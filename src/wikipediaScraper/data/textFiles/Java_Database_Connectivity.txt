Java Database Connectivity ( JDBC ) is an application programming interface (API) for the Java programming language which defines how a client may access a database . It is a Java-based data access technology used for Java database connectivity. It is part of the Java Standard Edition platform, from Oracle Corporation . It provides methods to query and update data in a database, and is oriented toward relational databases . A JDBC-to- ODBC bridge enables connections to any ODBC-accessible data source in the Java virtual machine (JVM) host environment.

Sun Microsystems released JDBC as part of Java Development Kit (JDK) 1.1 on February 19, 1997. Since then it has been part of the Java Platform, Standard Edition (Java SE).

The JDBC classes are contained in the Java package java.sql and javax.sql .

Starting with version 3.1, JDBC has been developed under the Java Community Process . JSR 54 specifies JDBC 3.0 (included in J2SE 1.4), JSR 114 specifies the JDBC Rowset additions, and JSR 221 is the specification of JDBC 4.0 (included in Java SE 6).

JDBC 4.1, is specified by a maintenance release 1 of JSR 221 and is included in Java SE 7.

JDBC 4.2, is specified by a maintenance release 2 of JSR 221 and is included in Java SE 8.

The latest version, JDBC 4.3, is specified by a maintenance release 3 of JSR 221 and is included in Java SE 9.

Since JDBC ('Java Database Connectivity') is mostly a collection of interface definitions and specifications, it allows multiple implementations of these interfaces to exist and be used by the same application at runtime. The API provides a mechanism for dynamically loading the correct Java packages and registering them with the JDBC Driver Manager ( DriverManager ). DriverManager is used as a Connection factory for creating JDBC connections.

JDBC connections support creating and executing statements. JDBC connections support update statements such as SQL's CREATE , INSERT , UPDATE and DELETE , or query statements such as SELECT . Additionally, stored procedures may be invoked through a JDBC connection. JDBC represents statements using one of the following classes:

PreparedStatement allows the dynamic query to vary depending on the query parameter.

Update statements such as INSERT, UPDATE and DELETE return an update count indicating the number of rows affected in the database as an integer. These statements do not return any other information.

Query statements return a JDBC row result set. The row result set is used to walk over the result set . Individual columns in a row are retrieved either by name or by column number. There may be any number of rows in the result set. The row result set has metadata that describes the names of the columns and their types.

There is an extension to the basic JDBC API in the javax.sql .

JDBC connections are often managed via a connection pool rather than obtained directly from the driver.

When a Java application needs a database connection, one of the DriverManager.getConnection() methods is used to create a JDBC Connection . The URL used is dependent upon the particular database and JDBC driver. It will always begin with the "jdbc:" protocol, but the rest is up to the particular vendor.

Starting from Java SE 7 you can use Java's try-with-resources statement to simplify the above code:

Once a connection is established, a Statement can be created.

Note that Connection s, Statement s, and ResultSet s often tie up operating system resources such as sockets or file descriptors . In the case of Connection s to remote database servers, further resources are tied up on the server, e.g. cursors for currently open ResultSet s.
It is vital to close() any JDBC object as soon as it has played its part; garbage collection should not be relied upon.
The above try-with-resources construct is a code pattern that obviates this.

Data is retrieved from the database using a database query mechanism. The example below shows creating a statement and executing a query.

The following code is an example of a PreparedStatement query which uses conn and class from the first example:

If a database operation fails, JDBC raises an SQLException . There is typically very little one can do to recover from such an error, apart from logging it with as much detail as possible. It is recommended that the SQLException be translated into an application domain exception (an unchecked one) that eventually results in a transaction rollback and a notification to the user.

The following code is an example of a database transaction :

For an example of a CallableStatement (to call stored procedures in the database), see the JDBC API Guide documentation.

JDBC drivers are client-side adapters (installed on the client machine, not on the server) that convert requests from Java programs to a protocol that the DBMS can understand.

Commercial and free drivers provide connectivity to most relational-database servers. These drivers fall into one of the following types:

Note also a type called an internal JDBC driver - a driver embedded with JRE in Java-enabled SQL databases. It is used for Java stored procedures . This does not fit into the classification scheme above, although it would likely resemble either a type 2 or type 4 driver (depending on whether the database itself is implemented in Java or not). An example of this is the KPRB (Kernel Program Bundled) driver supplied with Oracle RDBMS . "jdbc:default:connection" offers a relatively standard way of making such a connection (at least the Oracle database and Apache Derby support it). However, in the case of an internal JDBC driver, the JDBC client actually runs as part of the database being accessed, and so can access data directly rather than through network protocols.