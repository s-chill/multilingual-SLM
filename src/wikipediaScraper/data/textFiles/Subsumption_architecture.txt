Subsumption architecture is a reactive robotic architecture heavily associated with behavior-based robotics which was very popular in the 1980s and 90s.  The term was introduced by Rodney Brooks and colleagues in 1986. Subsumption has been widely influential in autonomous robotics and elsewhere in real-time AI .

Subsumption architecture is a control architecture that was proposed in opposition to traditional symbolic AI . Instead of guiding behavior by symbolic mental representations of the world, subsumption architecture couples sensory information to action selection in an intimate and bottom-up fashion.

It does this by decomposing the complete behavior into sub-behaviors.  These sub-behaviors are organized into a hierarchy of layers. Each layer implements a particular level of behavioral competence, and higher levels are able to subsume lower levels (= integrate/combine lower levels to a more comprehensive whole) in order to create viable behavior.  For example, a robot's lowest layer could be "avoid an object". The second layer would be "wander around", which runs beneath the third layer "explore the world".  Because a robot must have the ability to "avoid objects" in order to "wander around" effectively, the subsumption architecture creates a system in which the higher layers utilize the lower-level competencies.  The layers, which all receive sensor-information, work in parallel and generate outputs.  These outputs can be commands to actuators, or signals that suppress or inhibit other layers.

Subsumption architecture attacks the problem of intelligence from a significantly different perspective than traditional AI.  Disappointed with the performance of Shakey the robot and similar conscious mind representation-inspired projects, Rodney Brooks started creating robots based on a different notion of intelligence, resembling unconscious mind processes.  Instead of modelling aspects of human intelligence via symbol manipulation, this approach is aimed at real-time interaction and viable responses to a dynamic lab or office environment.

The goal was informed by four key ideas:

The ideas outlined above are still a part of an ongoing debate regarding the nature of intelligence and how the progress of robotics and AI should be fostered.

Each layer is made up by a set of processors that are augmented finite-state machines (AFSM), the augmentation being added instance variables to hold programmable data-structures.  A layer is a module and is responsible for a single behavioral goal, such as "wander around."  There is no central control within or between these behavioral modules.  All AFSMs continuously and asynchronously receive input from the relevant sensors and send output to actuators (or other AFSMs).  Input signals that are not read by the time a new one is delivered end up getting discarded.  These discarded signals are common, and is useful for performance because it allows the system to work in real time by dealing with the most immediate information.

Because there is no central control, AFSMs communicate with each other via inhibition and suppression signals.  Inhibition signals block signals from reaching actuators or AFSMs, and suppression signals blocks or replaces the inputs to layers or their AFSMs. This system of AFSM communication is how higher layers subsume lower ones (see figure 1), as well as how the architecture deals with priority and action selection arbitration in general.

The development of layers follows an intuitive progression.  First, the lowest layer is created, tested, and debugged.  Once that lowest level is running, one creates and attaches the second layer with the proper suppression and inhibition connections to the first layer.  After testing and debugging the combined behavior, this process can be repeated for (theoretically) any number of behavioral modules.

The following is a small list of robots that utilize the subsumption architecture.

The above are described in detail along with other robots in Elephants Don't Play Chess .

The main advantages of the architecture are:

The main disadvantages of the architecture are:

When subsumption architecture was developed, the novel setup and approach of subsumption architecture allowed it to be successful in many important domains where traditional AI had failed, namely real-time interaction with a dynamic environment.  The lack of large memory storage, symbolic representations, and central control, however, places it at a disadvantage at learning complex actions, in-depth mapping , and understanding language .