In cryptography , Optimal Asymmetric Encryption Padding ( OAEP ) is a padding scheme often used together with RSA encryption . OAEP was introduced by Bellare and Rogaway , and subsequently standardized in PKCS#1 v2 and RFC 2437.

The OAEP algorithm is a form of Feistel network which uses a pair of random oracles G and H to process the plaintext prior to asymmetric encryption .  When combined with any secure trapdoor one-way permutation f {\displaystyle f} , this processing is proved in the random oracle model to result in a combined scheme which is semantically secure under chosen plaintext attack (IND-CPA) .  When implemented with certain trapdoor permutations (e.g., RSA), OAEP is also proven to be secure against chosen ciphertext attack .  OAEP can be used to build an all-or-nothing transform .

OAEP satisfies the following two goals:

The original version of OAEP (Bellare/Rogaway, 1994) showed a form of " plaintext awareness " (which they claimed implies security against chosen ciphertext attack ) in the random oracle model when OAEP is used with any trapdoor permutation.  Subsequent results contradicted this claim, showing that OAEP was only IND-CCA1 secure.  However, the original scheme was proved in the random oracle model to be IND-CCA2 secure when OAEP is used with the RSA permutation using standard encryption exponents, as in the case of RSA-OAEP. An improved scheme (called OAEP+) that works with any trapdoor one-way permutation was offered by Victor Shoup to solve this problem. More recent work has shown that in the standard model (that is, when hash functions are not modeled as random oracles) it is impossible to prove the IND-CCA2 security of RSA-OAEP under the assumed hardness of the RSA problem .

In the diagram,

RFC 8017 for PKCS#1 v2.2 specifies the OAEP scheme as follows for encoding:

Decoding works by reversing the steps taken in the encoding algorithm:

Usage in RSA: The encoded message can then be encrypted with RSA. The deterministic property of RSA is now avoided by using the OAEP encoding because the seed is randomly generated and influences the entire encoded message.

The " all-or-nothing " security is from the fact that to recover M , one must recover the entire maskedDB and the entire maskedSeed ; maskedDB is required to recover the seed from the maskedSeed , and the seed is required to recover the data block DB from maskedDB . Since any changed bit of a cryptographic hash completely changes the result, the entire maskedDB , and the entire maskedSeed must both be completely recovered.

In the PKCS#1 standard, the random oracles are identical. The PKCS#1 standard further requires that the random oracles be MGF1 with an appropriate hash function.