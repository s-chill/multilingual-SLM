The history of programming languages spans from documentation of early mechanical computers to modern tools for software development . Early programming languages were highly specialized, relying on mathematical notation and similarly obscure syntax . Throughout the 20th century, research in compiler theory led to the creation of high-level programming languages , which use a more accessible syntax to communicate instructions.

The first high-level programming language was Plankalkül , created by Konrad Zuse between 1942 and 1945. The first high-level language to have an associated compiler was created by Corrado Böhm in 1951, for his PhD thesis. The first commercially available language was FORTRAN (FORmula TRANslation), developed in 1956 (first manual appeared in 1956, but first developed in 1954) by a team led by John Backus at IBM .

During 1842–1849, Ada Lovelace translated the memoir of Italian mathematician Luigi Menabrea about Charles Babbage 's newest proposed machine: the Analytical Engine ; she supplemented the memoir with notes that specified in detail a method for calculating Bernoulli numbers with the engine, recognized by most of historians as the world's first published computer program.

Jacquard Looms and Charles Babbage's Difference Engine both were designed to utilize punched cards , which would describe the sequence of operations that their programmable machines should perform.

The first computer codes were specialized for their applications: e.g., Alonzo Church was able to express the lambda calculus in a formulaic way and the Turing machine was an abstraction of the operation of a tape-marking machine.

In the 1940s, the first recognizably modern electrically powered computers were created. The limited speed and memory capacity forced programmers to write hand-tuned assembly language programs. It was eventually realized that programming in assembly language required a great deal of intellectual effort.

An early proposal for a high-level programming language was Plankalkül , developed by Konrad Zuse for his Z1 computer between 1942 and 1945 but not implemented at the time.

The first functioning programming languages designed to communicate instructions to a computer were written in the early 1950s. John Mauchly 's Short Code , proposed in 1949, was one of the first high-level languages ever developed for an electronic computer . Unlike machine code , Short Code statements represented mathematical expressions in understandable form. However, the program had to be interpreted into machine code every time it ran, making the process much slower than running the equivalent machine code.

In the early 1950s, Alick Glennie developed Autocode , possibly the first compiled programming language, at the University of Manchester . In 1954, a second iteration of the language, known as the "Mark 1 Autocode", was developed for the Mark 1 by R. A. Brooker . Brooker, with the University of Manchester, also developed an autocode for the Ferranti Mercury in the 1950s. The version for the EDSAC 2 was devised by Douglas Hartree of University of Cambridge Mathematical Laboratory in 1961. Known as EDSAC 2 Autocode, it was a straight development from Mercury Autocode adapted for local circumstances and was noted for its object code optimization and source-language diagnostics which were advanced for the time. A contemporary but separate thread of development, Atlas Autocode was developed for the University of Manchester Atlas 1 machine.

In 1954, FORTRAN was invented at IBM by a team led by John Backus ; it was the first widely used high-level general purpose language to have a functional implementation, in contrast to only a design on paper. When FORTRAN was first introduced, it was viewed with skepticism due to bugs, delays in development, and the comparative efficiency of "hand-coded" programs written in assembly. However, in a hardware market that was rapidly evolving, the language eventually became known for its efficiency. It is still a popular language for high-performance computing and is used for programs that benchmark and rank the world's TOP500 fastest supercomputers.

Another early programming language was devised by Grace Hopper in the US, named FLOW-MATIC . It was developed for the UNIVAC I at Remington Rand during the period from 1955 until 1959. Hopper found that business data processing customers were uncomfortable with mathematical notation , and in early 1955, she and her team wrote a specification for an English language programming language and implemented a prototype. The FLOW-MATIC compiler became publicly available in early 1958 and was substantially complete in 1959. Flow-Matic was a major influence in the design of COBOL , since only it and its direct descendant AIMACO were in use at the time.

Other languages still in use today include LISP (1958), invented by John McCarthy and COBOL (1959), created by the Short Range Committee. Another milestone in the late 1950s was the publication, by a committee of American and European computer scientists, of "a new language for algorithms"; the ALGOL 60 Report (the " ALGO rithmic L anguage"). This report consolidated many ideas circulating at the time and featured three key language innovations:

Another innovation, related to this, was in how the language was described:

ALGOL 60 was particularly influential in the design of later languages, some of which soon became more popular. The Burroughs large systems were designed to be programmed in an extended subset of ALGOL.

ALGOL's key ideas were continued, producing ALGOL 68 :

ALGOL 68's many little-used language features (for example, concurrent and parallel blocks) and its complex system of syntactic shortcuts and automatic type coercions made it unpopular with implementers and gained it a reputation of being difficult . Niklaus Wirth actually walked out of the design committee to create the simpler Pascal language.

Some notable languages that were developed in this period include:

The period from the late 1960s to the late 1970s brought a major flowering of programming languages. Most of the major language paradigms now in use were invented in this period:

The 1960s and 1970s also saw considerable debate over the merits of " structured programming ", which essentially meant programming without the use of goto . A significant fraction of programmers believed that, even in languages that provide goto , it is bad programming style to use it except in rare circumstances. This debate was closely related to language design: some languages had no goto , which forced the use of structured programming.

To provide even faster compile times, some languages were structured for " one-pass compilers " which expect subordinate routines to be defined first, as with Pascal , where the main routine, or driver function, is the final section of the program listing.

Some notable languages that were developed in this period include:

The 1980s were years of relative consolidation in imperative languages . Rather than inventing new paradigms, all of these movements elaborated upon the ideas invented in the prior decade. C++ combined object-oriented and systems programming. The United States government standardized Ada , a systems programming language intended for use by defense contractors. In Japan and elsewhere, vast sums were spent investigating so-called fifth-generation programming languages that incorporated logic programming constructs. The functional languages community moved to standardize ML and Lisp. Research in Miranda , a functional language with lazy evaluation , began to take hold in this decade.

One important new trend in language design was an increased focus on programming for large-scale systems through the use of modules , or large-scale organizational units of code. Modula , Ada, and ML all developed notable module systems in the 1980s. Module systems were often wedded to generic programming constructs: generics being, in essence, parametrized modules (see also Polymorphism (computer science) ).

Although major new paradigms for imperative programming languages did not appear, many researchers expanded on the ideas of prior languages and adapted them to new contexts. For example, the languages of the Argus and Emerald systems adapted object-oriented programming to distributed computing systems.

The 1980s also brought advances in programming language implementation. The reduced instruction set computer (RISC) movement in computer architecture postulated that hardware should be designed for compilers rather than for human assembly programmers. Aided by central processing unit (CPU) speed improvements that enabled increasingly aggressive compiling methods, the RISC movement sparked greater interest in compiler technology for high-level languages.

Language technology continued along these lines well into the 1990s.

Some notable languages that were developed in this period include:

The rapid growth of the Internet in the mid-1990s was the next major historic event in programming languages. By opening up a radically new platform for computer systems, the Internet created an opportunity for new languages to be adopted. In particular, the JavaScript programming language rose to popularity because of its early integration with the Netscape Navigator web browser. Various other scripting languages achieved widespread use in developing customized applications for web servers such as PHP. The 1990s saw no fundamental novelty in imperative languages , but much recombination and maturation of old ideas. This era began the spread of functional languages . A big driving philosophy was programmer productivity. Many rapid application development (RAD) languages emerged, which usually came with an integrated development environment (IDE), garbage collection , and were descendants of older languages. All such languages were object-oriented . These included Object Pascal , Objective Caml (renamed OCaml ), Visual Basic , and Java . Java in particular received much attention.

More radical and innovative than the RAD languages were the new scripting languages . These did not directly descend from other languages and featured new syntaxes and more liberal incorporation of features. Many consider these scripting languages to be more productive than even the RAD languages, but often because of choices that make small programs simpler but large programs more difficult to write and maintain. Nevertheless, scripting languages came to be the most prominent ones used in connection with the Web.

Some programming languages included other languages in their distribution to save the development time. for example both of Python and Ruby included Tcl to support GUI programming through libraries like Tkinter .

Some notable languages that were developed in this period include:

Programming language evolution continues, in both industry and research. Some of the recent trends have included:

Many Big Tech companies introduced multiple new programming languages that are designed to serve their needs and provides first-class support for their platforms. for example:

Some notable languages developed during this period and are listed in TIOBE index (Top 100 programming languages) as of February 2024 include:

Other new programming languages include Elm , Ballerina , Red , Crystal , Haxe , V (Vlang) , Reason , and Mojo .

Some key people who helped develop programming languages: