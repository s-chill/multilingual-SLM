The POrtable COmponents ( POCO ) C++ Libraries are computer software , a set of class libraries for developing computer network -centric, portable applications in the programming language C++ . The libraries cover functions such as threads , thread synchronizing , file system access, streams , shared libraries and class loading, Internet sockets , and network communications protocols ( HTTP , FTP , SMTP , etc.), and include an HTTP server , and an XML parser with SAX2 and DOM interfaces and SQL database access. The modular and efficient design and implementation makes the libraries well suited for embedded system development.

The libraries are free and open-source software distributed under the Boost Software License 1.0.

POCO is a set of C++ libraries providing users with library support similar to that found in other development environments, like the Java Class Library , .NET Framework , or Apple's Cocoa .  POCO is centered on network-centric application domains and developed with modern ANSI/ISO Standard C++ and C++ Standard Library facilities and techniques with emphasis on powerful functionality, ease of use, and consistency.  Governed primarily by code quality, consistent style and unit testing, POCO is highly portable, and already ported to a variety of different platforms.

As of 2017 , POCO C++ Libraries are split into five core libraries with optional add-on libraries available with each release.  The design and hierarchy of POCO C++ is considered well designed. The five core component libraries cover the following areas that can be found in the basic edition:

One design goal of many targeted decisions are based around POCO C++ providing an easy to use component library that works out of the box .  As of 2017 , the libraries are available in two package formats: the basic and the complete editions.  The complete edition covers NetSSL, Crypto, Zip, and Data abilities, among others. The basic edition does not, and thus eliminates dependence on external facilities such as OpenSSL, ODBC, and MySQL dependencies.

Being open source enables and encourages development of further library functions.  Design and development of existing and upcoming library support is driven by the pragmatic needs of the user base.  Library additions occur in a sandbox development environment and are reviewed and integrated into the main library releases as approved by the core development team with input from contributors.

Users include: