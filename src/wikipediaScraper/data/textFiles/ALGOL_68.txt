ALGOL 68 (short for Algorithmic Language 1968 ) is an imperative programming language that was conceived as a successor to the ALGOL 60 programming language, designed with the goal of a much wider scope of application and more rigorously defined syntax and semantics.

The complexity of the language's definition, which runs to several hundred pages filled with non-standard terminology, made compiler implementation difficult and it was said it had "no implementations and no users". This was only partly true; ALGOL 68 did find use in several niche markets, notably in the United Kingdom where it was popular on International Computers Limited (ICL) machines, and in teaching roles. Outside these fields, use was relatively limited.

Nevertheless, the contributions of ALGOL 68 to the field of computer science have been deep, wide-ranging and enduring, although many of these contributions were only publicly identified when they had reappeared in subsequently developed programming languages. Many languages were developed specifically as a response to the perceived complexity of the language, the most notable being Pascal , or were reimplementations for specific roles, like Ada .

Many languages of the 1970s trace their design specifically to ALGOL 68, selecting some features while abandoning others that were considered too complex or out-of-scope for given roles. Among these is the language C , which was directly influenced by ALGOL 68, especially by its strong typing and structures. Most modern languages trace at least some of their syntax to either C or Pascal, and thus directly or indirectly to ALGOL 68.

ALGOL 68 features include expression-based syntax, user-declared types and structures/tagged-unions, a reference model of variables and reference parameters, string, array and matrix slicing, and concurrency.

ALGOL 68 was designed by the International Federation for Information Processing (IFIP) IFIP Working Group 2.1 on Algorithmic Languages and Calculi. On December 20, 1968, the language was formally adopted by the group, and then approved for publication by the General Assembly of IFIP.

ALGOL 68 was defined using a formalism , a two-level formal grammar , invented by Adriaan van Wijngaarden . Van Wijngaarden grammars use a context-free grammar to generate an infinite set of productions that will recognize a particular ALGOL 68 program; notably, they are able to express the kind of requirements that in many other programming language technical standards are labelled semantics , and must be expressed in ambiguity-prone natural language prose, and then implemented in compilers as ad hoc code attached to the formal language parser.

ALGOL 68 was the first (and possibly one of the last) major language for which a full formal definition was made before it was implemented.

C. H. A. Koster

The main aims and principles of design of ALGOL 68:

ALGOL 68 has been criticized, most prominently by some members of its design committee such as C. A. R. Hoare and Edsger Dijkstra , for abandoning the simplicity of ALGOL 60 , becoming a vehicle for complex or overly general ideas, and doing little to make the compiler writer's task easier, in contrast to deliberately simple contemporaries (and competitors) such as C , S-algol and Pascal .

In 1970, ALGOL 68-R became the first working compiler for ALGOL 68.

In the 1973 revision, certain features — such as proceduring , gommas and formal bounds — were omitted. C.f. The language of the unrevised report.

Though European defence agencies (in Britain Royal Signals and Radar Establishment (RSRE)) promoted the use of ALGOL 68 for its expected security advantages, the American side of the NATO alliance decided to develop a different project, the language Ada , making its use obligatory for US defense contracts.

ALGOL 68 also had a notable influence in the Soviet Union , details of which can be found in Andrey Terekhov 's 2014 paper: "ALGOL 68 and Its Impact on the USSR and Russian Programming", and "Алгол 68 и его влияние на программирование в СССР и России".

Steve Bourne , who was on the ALGOL 68 revision committee, took some of its ideas to his Bourne shell (and thereby, to descendant Unix shells such as Bash ) and to C (and thereby to descendants such as C++ ).

The complete history of the project can be found in C. H. Lindsey 's A History of ALGOL 68 .

For a full-length treatment of the language, see "Programming ALGOL 68 Made Easy" by Dr. Sian Mountbatten, or "Learning ALGOL 68 Genie" by Marcel van der Veer which includes the Revised Report.

ALGOL 68, as the name implies, is a follow-on to the ALGOL language that was first formalized in 1960. That same year the International Federation for Information Processing (IFIP) formed and started the Working Group on ALGOL, or WG2.1. This group released an updated ALGOL 60 specification in Rome in April 1962. At a follow-up meeting in March 1964, it was agreed that the group should begin work on two follow-on standards, ALGOL X which would be a redefinition of the language with some additions, and an ALGOL Y , which would have the ability to modify its own programs in the style of the language LISP .

The first meeting of the ALGOL X group was held in Princeton University in May 1965. A report of the meeting noted two broadly supported themes, the introduction of strong typing and interest in Euler's concepts of 'trees' or 'lists' for handling collections.

At the second meeting in October in France, three formal proposals were presented, Niklaus Wirth 's ALGOL W along with comments about record structures by C.A.R. (Tony) Hoare , a similar language by Gerhard Seegmüller, and a paper by Adriaan van Wijngaarden on "Orthogonal design and description of a formal language". The latter, written in almost indecipherable "W-Grammar", proved to be a decisive shift in the evolution of the language. The meeting closed with an agreement that van Wijngaarden would re-write the Wirth/Hoare submission using his W-Grammar.

This seemingly simple task ultimately proved more difficult than expected, and the follow-up meeting had to be delayed six months. When it met in April 1966 in Kootwijk , van Wijngaarden's draft remained incomplete and Wirth and Hoare presented a version using more traditional descriptions. It was generally agreed that their paper was "the right language in the wrong formalism". As these approaches were explored, it became clear there was a difference in the way parameters were described that would have real-world effects, and while Wirth and Hoare protested that further delays might become endless, the committee decided to wait for van Wijngaarden's version. Wirth then implemented their current definition as ALGOL W.

At the next meeting in Warsaw in October 1966, there was an initial report from the I/O Subcommittee who had met at the Oak Ridge National Laboratory and the University of Illinois but had not yet made much progress. The two proposals from the previous meeting were again explored, and this time a new debate emerged about the use of pointers ; ALGOL W used them only to refer to records, while van Wijngaarden's version could point to any object. To add confusion, John McCarthy presented a new proposal for operator overloading and the ability to string together and or constructs, and Klaus Samelson wanted to allow anonymous functions . In the resulting confusion, there was some discussion of abandoning the entire effort. The confusion continued through what was supposed to be the ALGOL Y meeting in Zandvoort in May 1967.

A draft report was finally published in February 1968. This was met by "shock, horror and dissent", mostly due to the hundreds of pages of unreadable grammar and odd terminology. Charles H. Lindsey attempted to figure out what "language was hidden inside of it", a process that took six man-weeks of effort. The resulting paper, "ALGOL 68 with fewer tears", was widely circulated. At a wider information processing meeting in Zürich in May 1968, attendees complained that the language was being forced upon them and that IFIP was "the true villain of this unreasonable situation" as the meetings were mostly closed and there was no formal feedback mechanism. Wirth and Peter Naur formally resigned their authorship positions in WG2.1 at that time.

The next WG2.1 meeting took place in Tirrenia in June 1968. It was supposed to discuss the release of compilers and other issues, but instead devolved into a discussion on the language. van Wijngaarden responded by saying (or threatening) that he would release only one more version of the report. By this point Naur, Hoare, and Wirth had left the effort, and several more were threatening to do so. Several more meetings followed, North Berwick in August 1968, Munich in December which produced the release of the official Report in January 1969 but also resulted in a contentious Minority Report being written. Finally, at Banff, Alberta in September 1969, the project was generally considered complete and the discussion was primarily on errata and a greatly expanded Introduction to the Report.

The effort took five years, burned out many of the greatest names in computer science , and on several occasions became deadlocked over issues both in the definition and the group as a whole. Hoare released a "Critique of ALGOL 68" almost immediately, which has been widely referenced in many works. Wirth went on to further develop the ALGOL W concept and released this as Pascal in 1970.

The first implementation of the standard, based on the late-1968 draft Report, was introduced by the Royal Radar Establishment in the UK as ALGOL 68-R in July 1970. This was, however, a subset of the full language, and Barry Mailloux , the final editor of the Report, joked that "It is a question of morality.  We have a Bible and you are sinning!" This version nevertheless became very popular on the ICL machines, and became a widely-used language in military coding, especially in the UK.

Among the changes in 68-R was the requirement for all variables to be declared before their first use. This had a significant advantage that it allowed the compiler to be one-pass, as space for the variables in the activation record was set aside before it was used. However, this change also had the side-effect of demanding the PROC s be declared twice, once as a declaration of the types, and then again as the body of code. Another change was to eliminate the assumed VOID mode, an expression that returns no value (named a statement in other languages) and demanding the word VOID be added where it would have been assumed. Further, 68-R eliminated the explicit parallel processing commands based on PAR .

The first full implementation of the language was introduced in 1974 by CDC Netherlands for the Control Data mainframe series. This saw limited use, mostly teaching in Germany and the Netherlands.

A version similar to 68-R was introduced from Carnegie Mellon University in 1976 as 68S, and was again a one-pass compiler based on various simplifications of the original and intended for use on smaller machines like the DEC PDP-11 . It too was used mostly for teaching purposes.

A version for IBM mainframes did not become available until 1978, when one was released from Cambridge University . This was "nearly complete". Lindsey released a version for small machines including the IBM PC in 1984.

Three open source Algol 68 implementations are known:

"Van Wijngaarden once characterized the four authors, somewhat tongue-in-cheek, as: Koster: transputter , Peck: syntaxer, Mailloux: implementer, Van Wijngaarden: party ideologist." – Koster.

1968: On 20 December 1968, the "Final Report" (MR 101) was adopted by the Working Group, then subsequently approved by the General Assembly of UNESCO 's IFIP for publication. Translations of the standard were made for Russian , German , French and Bulgarian , and then later Japanese and Chinese . The standard was also made available in Braille .

1984: TC 97 considered ALGOL 68 for standardisation as "New Work Item" TC97/N1642 [2] [3] . West Germany, Belgium, Netherlands, USSR and Czechoslovakia willing to participate in preparing the standard but the USSR and Czechoslovakia "were not the right kinds of member of the right ISO committees" [4] and Algol 68's ISO standardisation stalled. [5]

1988: Subsequently ALGOL 68 became one of the GOST standards in Russia.

The standard language contains about sixty reserved words, typically bolded in print, and some with "brief symbol" equivalents:

The basic language construct is the unit . A unit may be a formula , an enclosed clause , a routine text or one of several technically needed constructs (assignation, jump, skip, nihil). The technical term enclosed clause unifies some of the inherently bracketing constructs known as block , do statement , switch statement in other contemporary languages. When keywords are used, generally the reversed character sequence of the introducing keyword is used for terminating the enclosure, e.g. ( IF ~ THEN ~ ELSE ~ FI , CASE ~ IN ~ OUT ~ ESAC , FOR ~ WHILE ~ DO ~ OD ). This Guarded Command syntax was reused by Stephen Bourne in the common Unix Bourne shell . An expression may also yield a multiple value , which is constructed from other values by a collateral clause . This construct just looks like the parameter pack of a procedure call.

The basic data types (called mode s in Algol 68 parlance) are real , int , compl ( complex number ), bool , char , bits and bytes . For example:

However, the declaration REAL x; is just syntactic sugar for REF REAL x = LOC REAL ; . That is, x is really the constant identifier for a reference to a newly generated local REAL variable.

Furthermore, instead of defining both float and double , or int and long and short , etc., ALGOL 68 provides modifiers , so that the presently common double would be written as LONG REAL or LONG LONG REAL instead, for example. The prelude constants max real and min long int are provided to adapt programs to different implementations.

All variables need to be declared, but declaration does not have to precede the first use.

primitive-declarer: INT , REAL , COMPL , COMPLEX , BOOL , CHAR , STRING , BITS , BYTES , FORMAT , FILE , PIPE , CHANNEL , SEMA

Complex types can be created from simpler ones using various type constructors:

For some examples, see Comparison of ALGOL 68 and C++ .

Other declaration symbols include: FLEX , HEAP , LOC , REF , LONG , SHORT , EVENT

A name for a mode (type) can be declared using a MODE declaration,
which is similar to TYPEDEF in C/C++ and TYPE in Pascal:

This is similar to the following C code:

For ALGOL 68, only the NEWMODE mode-indication appears to the left of the equals symbol, and most notably the construction is made, and can be read, from left to right without regard to priorities. Also, the lower bound of Algol 68 arrays is one by default, but can be any integer from - max int to max int .

Mode declarations allow types to be recursive : defined directly or indirectly in terms of themselves.
This is subject to some restrictions – for instance, these declarations are illegal:

while these are valid:

The coercions produce a coercee from a coercend according to three criteria: the a priori mode of the coercend before the application of any coercion, the a posteriori mode of the coercee required after those coercions, and the syntactic position or "sort" of the coercee. Coercions may be cascaded.

The six possible coercions are termed deproceduring , dereferencing , uniting , widening , rowing , and voiding . Each coercion, except for uniting , prescribes a corresponding dynamic effect on the associated values. Hence, many primitive actions can be programmed implicitly by coercions.

Context strength – allowed coercions:

ALGOL 68 has a hierarchy of contexts which determine the kind of coercions available at a particular point in the program. These contexts are:

For more details about Primaries, Secondaries, Tertiary & Quaternaries refer to Operator precedence .

Pragmats are directives in the program, typically hints to the compiler; in newer languages these are called "pragmas" (no 't'). e.g.

Comments can be inserted in a variety of ways:

Normally, comments cannot be nested in ALGOL 68. This restriction can be circumvented by using different comment delimiters (e.g. use hash only for temporary code deletions).

ALGOL 68 being an expression-oriented programming language , the value returned by an assignment statement is a reference to the destination. Thus, the following is valid ALGOL 68 code:

This notion is present in C and Perl , among others. Note that as in earlier languages such as Algol 60 and FORTRAN , spaces are allowed in identifiers, so that half pi is a single identifier (thus avoiding the underscores versus camel case versus all lower-case issues).

As another example, to express the mathematical idea of a sum of f(i) from i=1 to n, the following ALGOL 68 integer expression suffices:

Note that, being an integer expression, the former block of code can be used in any context where an integer value can be used . A block of code returns the value of the last expression it evaluated; this idea is present in Lisp , among other languages.

Compound statements are all terminated by distinctive closing brackets:

This scheme not only avoids the dangling else problem but also avoids having to use BEGIN and END in embedded statement sequences.

Choice clause example with Brief symbols:

Choice clause example with Bold symbols:

Choice clause example mixing Bold and Brief symbols:

Algol68 allowed the switch to be of either type INT or (uniquely) UNION . The latter allows the enforcing strong typing onto UNION variables. c.f. union below for example.

This was considered the "universal" loop, the full syntax is:

The construct have several unusual aspects:

Subsequent "extensions" to the standard Algol68 allowed the TO syntactic element to be replaced with UPTO and DOWNTO to achieve a small optimisation.  The same compilers also incorporated:

Further examples can be found in the code examples below.

ALGOL 68 supports arrays with any number of dimensions, and it allows for the slicing of whole or partial rows or columns.

Matrices can be sliced either way, e.g.:

ALGOL 68 supports multiple field structures ( STRUCT ) and united modes . Reference variables may point to any MODE including array slices and structure fields.

For an example of all this, here is the traditional linked list declaration:

Usage example for UNION CASE of NODE :

Procedure ( PROC ) declarations require type specifications for both the parameters and the result ( VOID if none):

or, using the "brief" form of the conditional statement:

The return value of a proc is the value of the last expression evaluated in the procedure. References to procedures ( ref proc ) are also permitted. Call-by-reference parameters are provided by specifying references (such as ref real ) in the formal argument list. The following example defines a procedure that applies a function (specified as a parameter) to each element of an array:

This simplicity of code was unachievable in ALGOL 68's predecessor ALGOL 60 .

The programmer may define new operators and both those and the pre-defined ones may be overloaded and their priorities may be changed by the coder. The following example defines operator MAX with both dyadic and monadic versions (scanning across the elements of an array).

These are technically not operators, rather they are considered " units associated with names "

Specific details:

These are technically not operators, rather they are considered " units associated with names "

Note: Quaternaries include names SKIP and ~.

:=: (alternatively IS ) tests if two pointers are equal; :/=: (alternatively ISNT ) tests if they are unequal.

Consider trying to compare two pointer values, such as the following variables, declared as pointers-to-integer:

Now consider how to decide whether these two are pointing to the same location, or whether one of them is pointing to NIL . The following expression

will dereference both pointers down to values of type INT , and compare those, since the = operator is defined for INT , but not REF INT . It is not legal to define = for operands of type REF INT and INT at the same time, because then calls become ambiguous, due to the implicit coercions that can be applied: should the operands be left as REF INT and that version of the operator called? Or should they be dereferenced further to INT and that version used instead? Therefore the following expression can never be made legal:

Hence the need for separate constructs not subject to the normal coercion rules for operands to operators. But there is a gotcha. The following expressions:

while legal, will probably not do what might be expected. They will always return FALSE , because they are comparing the actual addresses of the variables ip and jp , rather than what they point to . To achieve the right effect, one would have to write

Most of Algol's "special" characters (⊂, ≡, ␣, ×, ÷, ≤, ≥, ≠, ¬, ⊃, ≡, ∨, ∧, →, ↓, ↑, ⌊, ⌈, ⎩, ⎧, ⊥, ⏨, ¢, ○ and □) can be found on the IBM 2741 keyboard with the APL "golf-ball" print head inserted; these became available in the mid-1960s while ALGOL 68 was being drafted. These characters are also part of the Unicode standard and most of them are available in several popular fonts .

Transput is the term used to refer to ALGOL 68's input and output facilities. It includes pre-defined procedures for unformatted, formatted and binary transput. Files and other transput devices are handled in a consistent and machine-independent manner. The following example prints out some unformatted output to the standard output device:

Note the predefined procedures newpage and newline passed as arguments.

The TRANSPUT is considered to be of BOOKS , CHANNELS and FILES :

"Formatted transput" in ALGOL 68's transput has its own syntax and patterns (functions), with FORMAT s embedded between two $ characters.

Examples:

ALGOL 68 supports programming of parallel processing. Using the keyword PAR , a collateral clause is converted to a parallel clause , where the synchronisation of actions is controlled using semaphores . In A68G the parallel actions are mapped to threads when available on the hosting operating system . In A68S a different paradigm of parallel processing was implemented (see below).

For its technical intricacies, ALGOL 68 needs a cornucopia of methods to deny the existence of something:

The term NIL IS var always evaluates to TRUE for any variable (but see above for correct use of IS :/=:), whereas it is not known to which value a comparison x < SKIP evaluates for any integer x .

ALGOL 68 leaves intentionally undefined what happens in case of integer overflow , the integer bit representation, and the degree of numerical accuracy for floating point.

Both official reports included some advanced features that were not part of the standard language.  These were indicated with an ℵ and considered effectively private.  Examples include "≮" and "≯" for templates, the OUTTYPE / INTYPE for crude duck typing , and the STRAIGHTOUT and STRAIGHTIN operators for "straightening" nested arrays and structures

This sample program implements the Sieve of Eratosthenes to find all the prime numbers that are less than 100. NIL is the ALGOL 68 analogue of the null pointer in other languages. The notation x OF y accesses a member x of a STRUCT y .

Note: The Soviet Era computers Эльбрус-1 (Elbrus-1) and Эльбрус-2 were created using high-level language Эль-76 (AL-76), rather than the traditional assembly. Эль-76 resembles Algol-68, The main difference is the dynamic binding types in Эль-76 supported at the hardware level. Эль-76 is used for application, job control, system programming.

Both ALGOL 68C and ALGOL 68-R are written in ALGOL 68, effectively making ALGOL 68 an application of itself. Other applications include:

A feature of ALGOL 68, inherited from the ALGOL tradition, is its different representations. There is a representation language used to describe algorithms in printed work, a strict language (rigorously defined in the Report), and an official reference language intended to be used in compiler input. The examples contain BOLD typeface words, this is the STRICT language. ALGOL 68's reserved words are effectively in a different namespace from identifiers, and spaces are allowed in identifiers, so this next fragment is legal:

The programmer who writes executable code does not always have an option of BOLD typeface or underlining in the code as this may depend on hardware and cultural issues. Different methods to denote these identifiers have been devised. This is called a stropping regime . For example, all or some of the following may be available programming representations :

All implementations must recognize at least POINT, UPPER and RES inside PRAGMAT sections. Of these, POINT and UPPER stropping are quite common, while RES stropping is a contradiction to the specification (as there are no reserved words). QUOTE (single apostrophe quoting) was the original recommendation, while matched apostrophe quoting, common in ALGOL 60, is not used much in ALGOL 68.

The following characters were recommended for portability, and termed "worthy characters" in the Report on the Standard Hardware Representation of Algol 68 Archived 2014-01-02 at the Wayback Machine :

This reflected a problem in the 1960s where some hardware didn't support lower-case, nor some other non- ASCII characters, indeed in the 1973 report it was written: "Four worthy characters — "|", "_", "[", and "]" — are often coded differently, even at installations which nominally use the same character set."

ALGOL 68 allows for every natural language to define its own set of keywords Algol-68. As a result, programmers are able to write programs using keywords from their native language. Below is an example of a simple procedure that calculates "the day following", the code is in two languages: English and German.

Russian/Soviet example: In English Algol68's case statement reads CASE ~ IN ~ OUT ~ ESAC , in Cyrillic this reads выб ~ в ~ либо ~ быв .

Except where noted (with a ), the language described above is that of the "Revised Report ".

The original language (As per the "Final Report" ) differs in syntax of the mode cast , and it had the feature of proceduring , i.e. coercing the value of a term into a procedure which evaluates the term. Proceduring would be intended to make evaluations lazy . The most useful application could have been the short-circuited evaluation of boolean operators. In:

b is only evaluated if a is true.

As defined in ALGOL 68, it did not work as expected, for example in the code:

against the programmers naïve expectations the print would be executed as it is only the value of the elaborated enclosed-clause after ANDF that was procedured. Textual insertion of the commented-out PROC BOOL : makes it work.

Some implementations emulate the expected behaviour for this special case by extension of the language.

Before revision, the programmer could decide to have the arguments of a procedure evaluated serially instead of collaterally by using semicolons instead of commas ( gomma s).

For example in:

The first argument to test is guaranteed to be evaluated before the second, but in the usual:

then the compiler could evaluate the arguments in whatever order it felt like.

After the revision of the report, some extensions to the language have been proposed to widen the applicability:

So far, only partial parametrisation has been implemented, in Algol 68 Genie.

The S3 language that was used to write the ICL VME operating system and much other system software on the ICL 2900 Series was a direct derivative of Algol 68. However, it omitted many of the more complex features, and replaced the basic modes with a set of data types that mapped directly to the 2900 Series hardware architecture.

ALGOL 68R from RRE was the first ALGOL 68 subset implementation, running on the ICL 1900 . Based on the original language, the main subset restrictions were definition before use and no parallel processing. This compiler was popular in UK universities in the 1970s, where many computer science students learnt ALGOL 68 as their first programming language; the compiler was renowned for good error messages.

ALGOL 68RS from RSRE was a portable compiler system written in ALGOL 68RS (bootstrapped from ALGOL 68R), and implemented on a variety of systems including the ICL 2900 / Series 39 , Multics and DEC VAX/VMS . The language was based on the Revised Report, but with similar subset restrictions to ALGOL 68R. This compiler survives in the form of an Algol68-to-C compiler.

In ALGOL 68S from Carnegie Mellon University the power of parallel processing was improved by adding an orthogonal extension, eventing . Any variable declaration containing keyword EVENT made assignments to this variable eligible for parallel evaluation, i.e. the right hand side was made into a procedure which was moved to one of the processors of the C.mmp multiprocessor system. Accesses to such variables were delayed after termination of the assignment.

Cambridge ALGOL 68C was a portable compiler that implemented a subset of ALGOL 68, restricting operator definitions and omitting garbage collection, flexible rows and formatted transput.

Algol 68 Genie by M. van der Veer is an ALGOL 68 implementation for today's computers and operating systems.

"Despite good intentions, a programmer may violate portability by inadvertently employing a local extension.  To guard against this, each implementation should provide a PORTCHECK pragmat option.  While this option is in force, the compiler prints a message for each construct that it recognizes as violating some portability constraint."