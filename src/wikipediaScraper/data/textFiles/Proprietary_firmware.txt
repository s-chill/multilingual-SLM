Proprietary firmware is any firmware that has had its use, private modification, copying , or republishing restricted by the producer. Proprietors may enforce restrictions by technical means, such as by restricting source code access, firmware replacement restrictions (by denying complete tooling that may be necessary in order to recompile and replace the firmware), or by legal means, such as through copyright and patents . Alternatives to proprietary firmware may be free (libre) or open-source .

Proprietary firmware (and especially the microcode) is much more difficult to avoid than proprietary software or even proprietary device drivers , because the firmware is usually very specific to the manufacturer of each device (often being unique for each model), and the programming documentation and complete specifications that would be necessary to create a replacement are often withheld by the hardware manufacturer.

Many open-source operating systems reluctantly choose to include proprietary firmware files in their distributions simply to make their device drivers work, because manufacturers try to save money by removing flash memory or EEPROM from their devices, requiring the operating system to upload the firmware each time the device is used. However, in order to do so, the operating system still has to have distribution rights for this proprietary microcode.

Proprietary firmware poses a significant security risk to the user because of the direct memory access (DMA) architecture of modern computers and the potential for DMA attacks . Theo de Raadt of OpenBSD suggests that wireless firmware are kept proprietary because of poor design quality and firmware defects. Mark Shuttleworth of Ubuntu suggests that "it's reasonable to assume that all firmware is a cesspool of insecurity courtesy of incompetence of the worst degree from manufacturers, and competence of the highest degree from a very wide range of such agencies".

The security and reliability risks posed by proprietary microcode may be lower than those posed by proprietary device drivers , because the microcode in this context isn't linked against the operating system , and doesn't run on the host's main processor .

Custom firmware may still be available for certain products, which is often free and open-source software , and is especially popular in certain segments of hardware like gaming consoles , wireless routers and Android phones , which are capable of running complete general-purpose operating systems like Linux , FreeBSD or NetBSD , which are often the systems used by the manufacturer in their original proprietary firmware.

Another potential solution is going with open-source hardware , which goes a step further by also providing schematics for replicating the hardware itself.