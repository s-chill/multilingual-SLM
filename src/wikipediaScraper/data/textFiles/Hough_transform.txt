The Hough transform is a feature extraction technique used in image analysis , computer vision , pattern recognition , and digital image processing . The purpose of the technique is to find imperfect instances of objects within a certain class of shapes by a voting procedure. This voting procedure is carried out in a parameter space , from which object candidates are obtained as local maxima in a so-called accumulator space that is explicitly constructed by the algorithm for computing the Hough transform.

The classical Hough transform was concerned with the identification of lines in the image, but later the Hough transform has been extended to identifying positions of arbitrary shapes, most commonly circles or ellipses . The Hough transform as it is universally used today was invented by Richard Duda and Peter Hart in 1972, who called it a "generalized Hough transform" after the related 1962 patent of Paul Hough. The transform was popularized in the computer vision community by Dana H. Ballard through a 1981 journal article titled " Generalizing the Hough transform to detect arbitrary shapes ".

It was initially invented for machine analysis of bubble chamber photographs (Hough, 1959).

The Hough transform was patented as U.S. patent 3,069,654 in 1962 and assigned to the U.S. Atomic Energy Commission with the name "Method and Means for Recognizing Complex Patterns". This patent uses a slope-intercept parametrization for straight lines, which awkwardly leads to an unbounded transform space since the slope can go to infinity.

The rho-theta parametrization universally used today was first described in

although it was already standard for the Radon transform since at least the 1930s.

O'Gorman and Clowes' variation is described in

The story of how the modern form of the Hough transform was invented is given in

In automated analysis of digital images , a subproblem often arises of detecting simple shapes, such as straight lines, circles or ellipses. In many cases an edge detector can be used as a pre-processing stage to obtain image points or image pixels that are on the desired curve in the image space. Due to imperfections in either the image data or the edge detector, however, there may be missing points or pixels on the desired curves as well as spatial deviations between the ideal line/circle/ellipse and the noisy edge points as they are obtained from the edge detector. For these reasons, it is often non-trivial to group the extracted edge features to an appropriate set of lines, circles or ellipses. The purpose of the Hough transform is to address this problem by making it possible to perform groupings of edge points into object candidates by performing an explicit voting procedure over a set of parameterized image objects (Shapiro and Stockman, 304).

The simplest case of Hough transform is detecting straight lines. In general, the straight line y = mx + b can be represented as a point ( b , m ) in the parameter space. However, vertical lines pose a problem. They would give rise to unbounded values of the slope parameter m . Thus, for computational reasons, Duda and Hart proposed the use of the Hesse normal form

where r {\displaystyle r} is the distance from the origin to the closest point on the straight line, and θ {\displaystyle \theta } is the angle between the x {\displaystyle x} axis and the line connecting the origin with that closest point.

The intuition for this form, similarly to the plane equation, is that every vector on the line must be perpendicular (orthogonal) to the straight line of length r {\displaystyle r} that comes from the origin. It can be seen that the intersection point of the function line and the perpendicular line that comes from the origin is at P 0 = ( r cos ⁡ θ , r sin ⁡ θ ) {\displaystyle P_{0}=(r\cos \theta ,r\sin \theta )} . So, for any point P {\displaystyle P} on the line, the vector P − P 0 {\displaystyle P-P_{0}} must be orthogonal to the vector P 0 − 0 = P 0 {\displaystyle P_{0}-0=P_{0}} . Therefore, we get that for any point P = ( x , y ) {\displaystyle P=(x,y)} on the function line, the equation ( P − P 0 ) ⋅ P 0 = 0 {\displaystyle (P-P_{0})\cdot P_{0}=0} must be satisfied. Therefore, P ⋅ P 0 = P 0 ⋅ P 0 {\displaystyle P\cdot P_{0}=P_{0}\cdot P_{0}} . Since P = ( x , y ) {\displaystyle P=(x,y)} and P 0 = ( r cos ⁡ θ , r sin ⁡ θ ) {\displaystyle P_{0}=(r\cos \theta ,r\sin \theta )} , we get r ( x cos ⁡ θ + y sin ⁡ θ ) = r 2 ( cos 2 ⁡ θ + sin 2 ⁡ θ ) {\displaystyle r(x\cos \theta +y\sin \theta )=r^{2}(\cos ^{2}\theta +\sin ^{2}\theta )} . Since cos 2 ⁡ θ + sin 2 ⁡ θ = 1 {\displaystyle \cos ^{2}\theta +\sin ^{2}\theta =1} , we get the final form of x cos ⁡ θ + y sin ⁡ θ = r {\displaystyle x\cos \theta +y\sin \theta =r} .

It is therefore possible to associate with each line of the image a pair ( r , θ ) {\displaystyle (r,\theta )} . The ( r , θ ) {\displaystyle (r,\theta )} plane is sometimes referred to as Hough space for the set of straight lines in two dimensions. This representation makes the Hough transform conceptually very close to the two-dimensional Radon transform . In fact, the Hough transform is mathematically equivalent to the Radon transform, but the two transformations have different computational interpretations traditionally associated with them.

Given a single point in the plane, the set of all straight lines going through that point corresponds to a sinusoidal curve in the ( r , θ ) plane, which is unique to that point. A set of two or more points that form a straight line will produce sinusoids crossing at the ( r , θ ) for that line. Thus, the problem of detecting collinear points can be converted to the problem of finding concurrent curves .

Given a shape parametrized by ( a 1 , . . . , a t ) {\displaystyle (a_{1},...,a_{t})} , taking values in the set S {\displaystyle S} called the shape space, one can interpret the Hough transform as the inverse transform of a probability distribution on the image space to the shape space S {\displaystyle S} , and interpret shape detection as maximum likelihood estimation .

Explicitly, the Hough transform performs an approximate naive Bayes inference. We start with a uniform prior on the shape space. We consider only the positive evidence, and ignore all negative evidence, so that we can detect partially occluded shapes.

We add up the log-likelihood in the shape space up to an additive constant. The assumption of naive Bayes means that all pixels in the image space provide independent evidence, so that their likelihoods multiply, that is, their log-likelihoods add. The freedom in additive constant allows us to perform no operation on the "background pixels" in shape space.

Finally, we perform maximum likelihood estimation by picking out the peaks in the log-likelihood on the shape space.

Derivations

The linear Hough transform algorithm estimates the two parameters that define a straight line. The transform space has two dimensions, and every point in the transform space is used as an accumulator to detect or identify a line described by r = x cos ⁡ θ + y sin ⁡ θ {\displaystyle r=x\cos \theta +y\sin \theta } . Every point in the detected edges in the image contributes to the accumulators.

The dimension of the accumulator equals the number of unknown parameters, i.e., two, considering quantized values of r {\displaystyle r} and θ {\displaystyle \theta } in the pair ( r , θ ) {\displaystyle (r,\theta )} . For each pixel at ( x , y ) {\displaystyle (x,y)} and its neighborhood, the Hough transform algorithm determines whether there is enough evidence of a straight line at that pixel. If so, it will calculate the parameters ( r , θ ) {\displaystyle (r,\theta )} of that line, then look for the accumulator's bin that the parameters fall into, and increment the value of that bin.

By finding the bins with the highest values, typically by looking for local maxima in the accumulator space, the most likely lines can be extracted, and their (approximate) geometric definitions read off (Shapiro and Stockman, 304). The simplest way of finding these peaks is by applying some form of threshold, but other techniques may yield better results in different circumstances – determining which lines are found, as well as how many. Since the lines returned do not contain any length information, it is often necessary, in the next step, to find which parts of the image match up with which lines. Moreover, due to imperfection errors in the edge-detection step, there will usually be errors in the accumulator space, which may make it non-trivial to find the appropriate peaks, and thus the appropriate lines.

The final result of the linear Hough transform is a two-dimensional array (matrix) similar to the accumulator—one dimension of this matrix is the quantized angle θ {\displaystyle \theta } , and the other dimension is the quantized distance r {\displaystyle r} . Each element of the matrix has a value equal to the sum of the points or pixels that are positioned on the line represented by quantized parameters ( r , θ ) {\displaystyle (r,\theta )} . So the element with the highest value indicates the straight line that is most represented in the input image.

Consider three data points, shown here as black dots.

From the calculations, it can be seen that in either case the support line at 60° has a similar length.
Hence, it is understood that the corresponding lines (the blue ones in the above picture) are very similar.
One can thus assume that all points lie close to the blue line.

The following is a different example showing the results of a Hough transform on a raster image containing two thick lines.

The results of this transform were stored in a matrix. Cell value represents the number of curves through any point. Higher cell values are rendered brighter. The two distinctly bright spots are the Hough parameters of the two lines. From these spots' positions, angle and distance from image center of the two lines in the input image can be determined.

An improvement suggested by O'Gorman and Clowes can be used to detect lines if one takes into account that the local gradient of the image intensity will necessarily be orthogonal to the edge. Since edge detection generally involves computing the intensity gradient magnitude, the gradient direction is often found as a side effect. If a given point of coordinates ( x,y ) happens to indeed be on a line, then the local direction of the gradient gives the θ parameter corresponding to said line, and the r parameter is then immediately obtained. (Shapiro and Stockman, 305) The gradient direction can be estimated to within 20°, which shortens the sinusoid trace from the full 180° to roughly 45°. This reduces the computation time and has the interesting effect of reducing the number of useless votes, thus enhancing the visibility of the spikes corresponding to real lines in the image.

Fernandes and Oliveira suggested an improved voting scheme for the Hough transform that allows a software implementation to achieve real-time performance even on relatively large images (e.g., 1280×960). The Kernel-based Hough transform uses the same ( r , θ ) {\displaystyle (r,\theta )} parameterization proposed by Duda and Hart but operates on clusters of approximately collinear pixels. For each cluster, votes are cast using an oriented elliptical-Gaussian kernel that models the uncertainty associated with the best-fitting line with respect to the corresponding cluster. The approach not only significantly improves the performance of the voting scheme, but also produces a much cleaner accumulator and makes the transform more robust to the detection of spurious lines.

Limberger and Oliveira suggested a deterministic technique for plane detection in unorganized point clouds whose cost is n log ⁡ ( n ) {\displaystyle n\log(n)} in the number of samples, achieving real-time performance for relatively large datasets (up to 10 5 {\displaystyle 10^{5}} points on a 3.4 GHz CPU). It is based on a fast Hough-transform voting strategy for planar regions, inspired by the Kernel-based Hough transform (KHT). This 3D kernel-based Hough transform (3DKHT) uses a fast and robust algorithm to segment clusters of approximately co-planar samples, and casts votes for individual clusters (instead of for individual samples) on a ( θ , ϕ , ρ {\displaystyle \theta ,\phi ,\rho } ) spherical accumulator using a trivariate Gaussian kernel. The approach is several orders of magnitude faster than existing (non-deterministic) techniques for plane detection in point clouds, such as RHT and RANSAC , and scales better with the size of the datasets. It can be used with any application that requires fast detection of planar features on large datasets.

Although the version of the transform described above applies only to finding straight lines, a similar transform can be used for finding any shape which can be represented by a set of parameters. A circle, for instance, can be transformed into a set of three parameters, representing its center and radius, so that the Hough space becomes three dimensional. Arbitrary ellipses and curves can also be found this way, as can any shape easily expressed as a set of parameters.

The generalization of the Hough transform for detecting analytical shapes in spaces having any dimensionality was proposed by Fernandes and Oliveira. In contrast to other Hough transform-based approaches for analytical shapes, Fernandes' technique does not depend on the shape one wants to detect nor on the input data type. The detection can be driven to a type of analytical shape by changing the assumed model of geometry where data have been encoded (e.g., euclidean space , projective space , conformal geometry , and so on), while the proposed formulation remains unchanged. Also, it guarantees that the intended shapes are represented with the smallest possible number of parameters, and it allows the concurrent detection of different kinds of shapes that best fit an input set of entries with different dimensionalities and different geometric definitions (e.g., the concurrent detection of planes and spheres that best fit a set of points, straight lines and circles).

For more complicated shapes in the plane (i.e., shapes that cannot be represented analytically in some 2D space), the Generalised Hough transform is used, which allows a feature to vote for a particular position, orientation and/or scaling of the shape using a predefined look-up table.The Hough transform accumulates contributions from all pixels in the detected edge.

Altering the algorithm to detect circular shapes instead of lines is relatively straightforward.

If we do not know the radius of the circle we are trying to locate beforehand, we can use a three-dimensional accumulator space to search for circles with an arbitrary radius. Naturally, this is more computationally expensive.

This method can also detect circles that are partially outside of the accumulator space, as long as enough of the circle's area is still present within it.

Hough transform can also be used for the detection of 3D objects in range data or 3D point clouds . The extension of classical Hough transform for plane detection is quite straightforward. A plane is represented by its explicit equation z = a x x + a y y + d {\displaystyle z=a_{x}x+a_{y}y+d} for which we can use a 3D Hough space corresponding to a x {\displaystyle a_{x}} , a y {\displaystyle a_{y}} and d {\displaystyle d} . This extension suffers from the same problems as its 2D counterpart i.e., near horizontal planes can be reliably detected, while the performance deteriorates as planar direction becomes vertical (big values of a x {\displaystyle a_{x}} and a y {\displaystyle a_{y}} amplify the noise in the data). This formulation of the plane has been used for the detection of planes in the point clouds acquired from airborne laser scanning and works very well because in that domain all planes are nearly horizontal.

For generalized plane detection using Hough transform, the plane can be parametrized by its normal vector n {\displaystyle n} (using spherical coordinates) and its distance from the origin ρ {\displaystyle \rho } resulting in a three dimensional Hough space. This results in each point in the input data voting for a sinusoidal surface in the Hough space. The intersection of these sinusoidal surfaces indicates presence of a plane. A more general approach for more than 3 dimensions requires search heuristics to remain feasible.

Hough transform has also been used to find cylindrical objects in point clouds using a two step approach. The first step finds the orientation of the cylinder and the second step finds the position and radius.

One common variation detail. That is, finding the bins with the highest count in one stage can be used to constrain the range of values searched in the next.

A high-dimensional parameter space for the Hough transform is not only slow, but if implemented without forethought can easily overrun the available memory. Even if the programming environment allows the allocation of an array larger than the available memory space through virtual memory, the number of page swaps required for this will be very demanding because the accumulator array is used in a randomly accessed fashion, rarely stopping in contiguous memory as it skips from index to index.

Consider the task of finding ellipses in an 800x600 image. Assuming that the radii of the ellipses are oriented along principal axes, the parameter space is four-dimensional. ( x , y ) defines the center of the ellipse, and a and b denote the two radii. Allowing the center to be anywhere in the image, adds the constraint 0<x<800 and 0<y<600. If the radii are given the same values as constraints, what is left is a sparsely filled accumulator array of more than 230 billion values.

A program thus conceived is unlikely to be allowed to allocate sufficient memory. This doesn't mean that the problem can't be solved, but only that new ways to constrain the size of the accumulator array are to be found, which makes it feasible. For instance:

By applying just the first three of these constraints to the example stated about, the size of the accumulator array is reduced by almost a factor of 1000, bringing it down to a size that is much more likely to fit within a modern computer's memory.

Yonghong Xie and Qiang Ji give an efficient way of implementing the Hough transform for ellipse detection by overcoming the memory issues. As discussed in the algorithm (on page 2 of the paper), this approach uses only a one-dimensional accumulator (for the minor axis) in order to detect ellipses in the image. The complexity is O(N ) in the number of non-zero points in the image.

The Hough transform is only efficient if a high number of votes fall in the right bin, so that the bin can be easily detected amid the background noise. This means that the bin must not be too small, or else some votes will fall in the neighboring bins, thus reducing the visibility of the main bin.

Also, when the number of parameters is large (that is, when we are using the Hough transform with typically more than three parameters), the average number of votes cast in a single bin is very low, and those bins corresponding to a real figure in the image do not necessarily appear to have a much higher number of votes than their neighbors. The complexity increases at a rate of O ( A m − 2 ) {\displaystyle {\mathcal {O}}\left({A^{m-2}}\right)} with each additional parameter, where A {\displaystyle A} is the size of the image space and m {\displaystyle m} is the number of parameters. (Shapiro and Stockman, 310) Thus, the Hough transform must be used with great care to detect anything other than lines or circles.

Finally, much of the efficiency of the Hough transform is dependent on the quality of the input data: the edges must be detected well for the Hough transform to be efficient. Use of the Hough transform on noisy images is a very delicate matter and generally, a denoising stage must be used before. In the case where the image is corrupted by speckle, as is the case in radar images, the Radon transform is sometimes preferred to detect lines, because it attenuates the noise through summation.