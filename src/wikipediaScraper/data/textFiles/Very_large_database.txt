A very large database , (originally written very large data base ) or VLDB , is a database that contains a very large amount of data, so much that it can require specialized architectural, management, processing and maintenance methodologies.

The vague adjectives of very and large allow for a broad and subjective interpretation, but attempts at defining a metric and threshold have been made. Early metrics were the size of the database in a canonical form via database normalization or the time for a full database operation like a backup . Technology improvements have continually changed what is considered very large .

One definition has suggested that a database has become a VLDB when it is "too large to be maintained within the window of opportunity… the time when the database is quiet".

There is no absolute amount of data that can be cited. For example, one cannot say that any database with more than 1 TB of data is considered a VLDB. This absolute amount of data has varied over time as computer processing, storage and backup methods have become better able to handle larger amounts of data. That said, VLDB issues may start to appear when 1 TB is approached, and are more than likely to have appeared as 30 TB or so is exceeded.

Key areas where a VLDB may present challenges include configuration, storage, performance, maintenance, administration, availability and server resources.

Careful configuration of databases that lie in the VLDB realm is necessary to alleviate or reduce issues raised by VLDB databases.

The complexities of managing a VLDB can increase exponentially for the database administrator as database size increases.

When dealing with VLDB operations relating to maintenance and recovery such as database reorganizations and file copies which were quite practical on a non-VLDB  take very significant amounts of time and resources for a VLDB database. In particular it typically infeasible to meet a typical recovery time objective (RTO), the maximum expected time a database is expected to be unavailable due to interruption, by methods which involve copying files from disk or other storage archives. To overcome these issues techniques such as clustering, cloned/replicated/standby databases, file-snapshots, storage snapshots or a backup manager may help achieve the RTO and availability, although individual methods may have limitations, caveats, license, and infrastructure requirements while some may risk data loss and not meet the recovery point objective (RPO). For many systems only geographically remote solutions may be acceptable.

Best practice is for backup and recovery to be architectured in terms of the overall availability and business continuity solution.

Given the same infrastructure there may typically be a decrease in performance, that is increase in response time as database size increases.  Some accesses will simply have more data to process (scan) which will take proportionally longer ( linear time ); while the indexes used to access data may grow slightly in height requiring perhaps an extra storage access to reach the data ( sub-linear time ). Other effects can be caching becoming less efficient because proportionally less data can be cached and while some indexes such as the B+ automatically sustain well with growth others such as a hash table may need to be rebuilt.

Should an increase in database size cause the number of accessors of the database to increase then more server and network resources may be consumed, and the risk of contention will increase.  Some solutions to regaining performance include partitioning , clustering , possibly with sharding , or use of a database machine .

Partitioning may be able assist the performance of bulk operations on a VLDB including backup and recovery., bulk movements due to information lifecycle management (ILM), reducing contention as well as allowing optimization of some query processing.

In order to satisfy needs of a VLDB the database storage needs to have low access latency and contention , high throughput , and high availability .

The increasing size of a VLDB may put pressure on server and network resources and a bottleneck may appear that may require infrastructure investment to resolve.

VLDB is not the same as big data , but the storage aspect of big data may involve a VLDB database. That said some of the storage solutions supporting big data were designed from the start to support large volumes of data, so database administrators may not encounter VLDB issues that older versions of traditional RDBMS 's might encounter.