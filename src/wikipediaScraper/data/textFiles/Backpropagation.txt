In machine learning , backpropagation is a gradient estimation method commonly used for training neural networks to compute the network parameter updates.

It is an efficient application of the chain rule to neural networks. Backpropagation computes the gradient of a loss function with respect to the weights of the network for a single input–output example, and does so efficiently , computing the gradient one layer at a time, iterating backward from the last layer to avoid redundant calculations of intermediate terms in the chain rule; this can be derived through dynamic programming .

Strictly speaking, the term backpropagation refers only to an algorithm for efficiently computing the gradient, not how the gradient is used; but the term is often used loosely to refer to the entire learning algorithm – including how the gradient is used, such as by stochastic gradient descent, or as an intermediate step in a more complicated optimizer, such as Adam .

Backpropagation had multiple discoveries and partial discoveries, with a tangled history and terminology. See the history section for details. Some other names for the technique include "reverse mode of automatic differentiation " or " reverse accumulation ".

Backpropagation computes the gradient in weight space of a feedforward neural network, with respect to a loss function . Denote:

In the derivation of backpropagation, other intermediate quantities are used by introducing them as needed below. Bias terms are not treated specially since they correspond to a weight with a fixed input of 1. For backpropagation the specific loss function and activation functions do not matter as long as they and their derivatives can be evaluated efficiently. Traditional activation functions include sigmoid, tanh, and ReLU . swish mish , and other activation functions have since been proposed as well.

The overall network is a combination of function composition and matrix multiplication :

For a training set there will be a set of input–output pairs, { ( x i , y i ) } {\displaystyle \left\{(x_{i},y_{i})\right\}} . For each input–output pair ( x i , y i ) {\displaystyle (x_{i},y_{i})} in the training set, the loss of the model on that pair is the cost of the difference between the predicted output g ( x i ) {\displaystyle g(x_{i})} and the target output y i {\displaystyle y_{i}} :

Note the distinction: during model evaluation the weights are fixed while the inputs vary (and the target output may be unknown), and the network ends with the output layer (it does not include the loss function). During model training the input–output pair is fixed while the weights vary, and the network ends with the loss function.

Backpropagation computes the gradient for a fixed input–output pair ( x i , y i ) {\displaystyle (x_{i},y_{i})} , where the weights w j k l {\displaystyle w_{jk}^{l}} can vary. Each individual component of the gradient, ∂ C / ∂ w j k l , {\displaystyle \partial C/\partial w_{jk}^{l},} can be computed by the chain rule; but doing this separately for each weight is inefficient. Backpropagation efficiently computes the gradient by avoiding duplicate calculations and not computing unnecessary intermediate values, by computing the gradient of each layer – specifically the gradient of the weighted input of each layer, denoted by δ l {\displaystyle \delta ^{l}} – from back to front.

Informally, the key point is that since the only way a weight in W l {\displaystyle W^{l}} affects the loss is through its effect on the next layer, and it does so linearly , δ l {\displaystyle \delta ^{l}} are the only data you need to compute the gradients of the weights at layer l {\displaystyle l} , and then the previous layer can be computed δ l − 1 {\displaystyle \delta ^{l-1}} and repeated recursively. This avoids inefficiency in two ways. First, it avoids duplication because when computing the gradient at layer l {\displaystyle l} , it is unnecessary to recompute all derivatives on later layers l + 1 , l + 2 , … {\displaystyle l+1,l+2,\ldots } each time. Second, it avoids unnecessary intermediate calculations, because at each stage it directly computes the gradient of the weights with respect to the ultimate output (the loss), rather than unnecessarily computing the derivatives of the values of hidden layers with respect to changes in weights ∂ a j ′ l ′ / ∂ w j k l {\displaystyle \partial a_{j'}^{l'}/\partial w_{jk}^{l}} .

Backpropagation can be expressed for simple feedforward networks in terms of matrix multiplication , or more generally in terms of the adjoint graph .

For the basic case of a feedforward network, where nodes in each layer are connected only to nodes in the immediate next layer (without skipping any layers), and there is a loss function that computes a scalar loss for the final output, backpropagation can be understood simply by matrix multiplication. Essentially, backpropagation evaluates the expression for the derivative of the cost function as a product of derivatives between each layer from right to left – "backwards" – with the gradient of the weights between each layer being a simple modification of the partial products (the "backwards propagated error").

Given an input–output pair ( x , y ) {\displaystyle (x,y)} , the loss is:

To compute this, one starts with the input x {\displaystyle x} and works forward; denote the weighted input of each hidden layer as z l {\displaystyle z^{l}} and the output of hidden layer l {\displaystyle l} as the activation a l {\displaystyle a^{l}} . For backpropagation, the activation a l {\displaystyle a^{l}} as well as the derivatives ( f l ) ′ {\displaystyle (f^{l})'} (evaluated at z l {\displaystyle z^{l}} ) must be cached for use during the backwards pass.

The derivative of the loss in terms of the inputs is given by the chain rule; note that each term is a total derivative , evaluated at the value of the network (at each node) on the input x {\displaystyle x} :

where d a L d z L {\displaystyle {\frac {da^{L}}{dz^{L}}}} is a diagonal matrix.

These terms are: the derivative of the loss function; the derivatives of the activation functions; and the matrices of weights:

The gradient ∇ {\displaystyle \nabla } is the transpose of the derivative of the output in terms of the input, so the matrices are transposed and the order of multiplication is reversed, but the entries are the same:

Backpropagation then consists essentially of evaluating this expression from right to left (equivalently, multiplying the previous expression for the derivative from left to right), computing the gradient at each layer on the way; there is an added step, because the gradient of the weights is not just a subexpression: there's an extra multiplication.

Introducing the auxiliary quantity δ l {\displaystyle \delta ^{l}} for the partial products (multiplying from right to left), interpreted as the "error at level l {\displaystyle l} " and defined as the gradient of the input values at level l {\displaystyle l} :

Note that δ l {\displaystyle \delta ^{l}} is a vector, of length equal to the number of nodes in level l {\displaystyle l} ; each component is interpreted as the "cost attributable to (the value of) that node".

The gradient of the weights in layer l {\displaystyle l} is then:

The factor of a l − 1 {\displaystyle a^{l-1}} is because the weights W l {\displaystyle W^{l}} between level l − 1 {\displaystyle l-1} and l {\displaystyle l} affect level l {\displaystyle l} proportionally to the inputs (activations): the inputs are fixed, the weights vary.

The δ l {\displaystyle \delta ^{l}} can easily be computed recursively, going from right to left, as:

The gradients of the weights can thus be computed using a few matrix multiplications for each level; this is backpropagation.

Compared with naively computing forwards (using the δ l {\displaystyle \delta ^{l}} for illustration):

There are two key differences with backpropagation:

For more general graphs, and other advanced variations, backpropagation can be understood in terms of automatic differentiation , where backpropagation is a special case of reverse accumulation (or "reverse mode").

The goal of any supervised learning algorithm is to find a function that best maps a set of inputs to their correct output. The motivation for backpropagation is to train a multi-layered neural network such that it can learn the appropriate internal representations to allow it to learn any arbitrary mapping of input to output.

To understand the mathematical derivation of the backpropagation algorithm, it helps to first develop some intuition about the relationship between the actual output of a neuron and the correct output for a particular training example. Consider a simple neural network with two input units, one output unit and no hidden units, and in which each neuron uses a linear output (unlike most work on neural networks, in which mapping from inputs to outputs is non-linear) that is the weighted sum of its input.

Initially, before training, the weights will be set randomly. Then the neuron learns from training examples , which in this case consist of a set of tuples ( x 1 , x 2 , t ) {\displaystyle (x_{1},x_{2},t)} where x 1 {\displaystyle x_{1}} and x 2 {\displaystyle x_{2}} are the inputs to the network and t is the correct output (the output the network should produce given those inputs, when it has been trained). The initial network, given x 1 {\displaystyle x_{1}} and x 2 {\displaystyle x_{2}} , will compute an output y that likely differs from t (given random weights). A loss function L ( t , y ) {\displaystyle L(t,y)} is used for measuring the discrepancy between the target output t and the computed output y . For regression analysis problems the squared error can be used as a loss function, for classification the categorical cross-entropy can be used.

As an example consider a regression problem using the square error as a loss:

where E is the discrepancy or error.

Consider the network on a single training case: ( 1 , 1 , 0 ) {\displaystyle (1,1,0)} . Thus, the input x 1 {\displaystyle x_{1}} and x 2 {\displaystyle x_{2}} are 1 and 1 respectively and the correct output, t is 0. Now if the relation is plotted between the network's output y on the horizontal axis and the error E on the vertical axis, the result is a parabola. The minimum of the parabola corresponds to the output y which minimizes the error E . For a single training case, the minimum also touches the horizontal axis, which means the error will be zero and the network can produce an output y that exactly matches the target output t . Therefore, the problem of mapping inputs to outputs can be reduced to an optimization problem of finding a function that will produce the minimal error.

However, the output of a neuron depends on the weighted sum of all its inputs:

where w 1 {\displaystyle w_{1}} and w 2 {\displaystyle w_{2}} are the weights on the connection from the input units to the output unit. Therefore, the error also depends on the incoming weights to the neuron, which is ultimately what needs to be changed in the network to enable learning.

In this example, upon injecting the training data ( 1 , 1 , 0 ) {\displaystyle (1,1,0)} , the loss function becomes

E = ( t − y ) 2 = y 2 = ( x 1 w 1 + x 2 w 2 ) 2 = ( w 1 + w 2 ) 2 . {\displaystyle E=(t-y)^{2}=y^{2}=(x_{1}w_{1}+x_{2}w_{2})^{2}=(w_{1}+w_{2})^{2}.}

Then, the loss function E {\displaystyle E} takes the form of a parabolic cylinder with its base directed along w 1 = − w 2 {\displaystyle w_{1}=-w_{2}} . Since all sets of weights that satisfy w 1 = − w 2 {\displaystyle w_{1}=-w_{2}} minimize the loss function, in this case additional constraints are required to converge to a unique solution. Additional constraints could either be generated by setting specific conditions to the weights, or by injecting additional training data.

One commonly used algorithm to find the set of weights that minimizes the error is gradient descent . By backpropagation, the steepest descent direction is calculated of the loss function versus the present synaptic weights. Then, the weights can be modified along the steepest descent direction, and the error is minimized in an efficient way.

The gradient descent method involves calculating the derivative of the loss function with respect to the weights of the network. This is normally done using backpropagation. Assuming one output neuron, the squared error function is

where

For each neuron j {\displaystyle j} , its output o j {\displaystyle o_{j}} is defined as

where the activation function φ {\displaystyle \varphi } is non-linear and differentiable over the activation region (the ReLU is not differentiable at one point). A historically used activation function is the logistic function :

which has a [ [1] ] derivative of:

The input net j {\displaystyle {\text{net}}_{j}} to a neuron is the weighted sum of outputs o k {\displaystyle o_{k}} of previous neurons. If the neuron is in the first layer after the input layer, the o k {\displaystyle o_{k}} of the input layer are simply the inputs x k {\displaystyle x_{k}} to the network. The number of input units to the neuron is n {\displaystyle n} . The variable w k j {\displaystyle w_{kj}} denotes the weight between neuron k {\displaystyle k} of the previous layer and neuron j {\displaystyle j} of the current layer.

Calculating the partial derivative of the error with respect to a weight w i j {\displaystyle w_{ij}} is done using the chain rule twice:

In the last factor of the right-hand side of the above, only one term in the sum net j {\displaystyle {\text{net}}_{j}} depends on w i j {\displaystyle w_{ij}} , so that

If the neuron is in the first layer after the input layer, o i {\displaystyle o_{i}} is just x i {\displaystyle x_{i}} .

The derivative of the output of neuron j {\displaystyle j} with respect to its input is simply the partial derivative of the activation function:

which for the logistic activation function

This is the reason why backpropagation requires that the activation function be differentiable . (Nevertheless, the ReLU activation function, which is non-differentiable at 0, has become quite popular, e.g. in AlexNet )

The first factor is straightforward to evaluate if the neuron is in the output layer, because then o j = y {\displaystyle o_{j}=y} and

If half of the square error is used as loss function we can rewrite it as

However, if j {\displaystyle j} is in an arbitrary inner layer of the network, finding the derivative E {\displaystyle E} with respect to o j {\displaystyle o_{j}} is less obvious.

Considering E {\displaystyle E} as a function with the inputs being all neurons L = { u , v , … , w } {\displaystyle L=\{u,v,\dots ,w\}} receiving input from neuron j {\displaystyle j} ,

and taking the total derivative with respect to o j {\displaystyle o_{j}} , a recursive expression for the derivative is obtained:

Therefore, the derivative with respect to o j {\displaystyle o_{j}} can be calculated if all the derivatives with respect to the outputs o ℓ {\displaystyle o_{\ell }} of the next layer – the ones closer to the output neuron – are known. [Note, if any of the neurons in set L {\displaystyle L} were not connected to neuron j {\displaystyle j} , they would be independent of w i j {\displaystyle w_{ij}} and the corresponding partial derivative under the summation would vanish to 0.]

Substituting Eq. 2 , Eq. 3 Eq.4 and Eq. 5 in Eq. 1 we obtain:

with

if φ {\displaystyle \varphi } is the logistic function, and the error is the square error:

To update the weight w i j {\displaystyle w_{ij}} using gradient descent, one must choose a learning rate, η > 0 {\displaystyle \eta >0} . The change in weight needs to reflect the impact on E {\displaystyle E} of an increase or decrease in w i j {\displaystyle w_{ij}} . If ∂ E ∂ w i j > 0 {\displaystyle {\frac {\partial E}{\partial w_{ij}}}>0} , an increase in w i j {\displaystyle w_{ij}} increases E {\displaystyle E} ; conversely, if ∂ E ∂ w i j < 0 {\displaystyle {\frac {\partial E}{\partial w_{ij}}}<0} , an increase in w i j {\displaystyle w_{ij}} decreases E {\displaystyle E} . The new Δ w i j {\displaystyle \Delta w_{ij}} is added to the old weight, and the product of the learning rate and the gradient, multiplied by − 1 {\displaystyle -1} guarantees that w i j {\displaystyle w_{ij}} changes in a way that always decreases E {\displaystyle E} . In other words, in the equation immediately below, − η ∂ E ∂ w i j {\displaystyle -\eta {\frac {\partial E}{\partial w_{ij}}}} always changes w i j {\displaystyle w_{ij}} in such a way that E {\displaystyle E} is decreased:

Using a Hessian matrix of second-order derivatives of the error function, the Levenberg–Marquardt algorithm often converges faster than first-order gradient descent, especially when the topology of the error function is complicated. It may also find solutions in smaller node counts for which other methods might not converge. The Hessian can be approximated by the Fisher information matrix.

The loss function is a function that maps values of one or more variables onto a real number intuitively representing some "cost" associated with those values. For backpropagation, the loss function calculates the difference between the network output and its expected output, after a training example has propagated through the network.

The mathematical expression of the loss function must fulfill two conditions in order for it to be possibly used in backpropagation. The first is that it can be written as an average E = 1 n ∑ x E x {\textstyle E={\frac {1}{n}}\sum _{x}E_{x}} over error functions E x {\textstyle E_{x}} , for n {\textstyle n} individual training examples, x {\textstyle x} . The reason for this assumption is that the backpropagation algorithm calculates the gradient of the error function for a single training example, which needs to be generalized to the overall error function. The second assumption is that it can be written as a function of the outputs from the neural network.

Let y , y ′ {\displaystyle y,y'} be vectors in R n {\displaystyle \mathbb {R} ^{n}} .

Select an error function E ( y , y ′ ) {\displaystyle E(y,y')} measuring the difference between two outputs. The standard choice is the square of the Euclidean distance between the vectors y {\displaystyle y} and y ′ {\displaystyle y'} : E ( y , y ′ ) = 1 2 ‖ y − y ′ ‖ 2 {\displaystyle E(y,y')={\tfrac {1}{2}}\lVert y-y'\rVert ^{2}} The error function over n {\textstyle n} training examples can then be written as an average of losses over individual examples: E = 1 2 n ∑ x ‖ ( y ( x ) − y ′ ( x ) ) ‖ 2 {\displaystyle E={\frac {1}{2n}}\sum _{x}\lVert (y(x)-y'(x))\rVert ^{2}}

Backpropagation had been derived repeatedly, as it is essentially an efficient application of the chain rule (first written down by Gottfried Wilhelm Leibniz in 1676 ) to neural networks.

The terminology "back-propagating error correction" was introduced in 1962 by Frank Rosenblatt , but he did not know how to implement this. In any case, he only studied neurons whose outputs were discrete levels, which only had zero derivatives, making backpropagation impossible.

Precursors to backpropagation appeared in optimal control theory since 1950s. Yann LeCun et al credits 1950s work by Pontryagin and others in optimal control theory, especially the adjoint state method , for being a continuous-time version of backpropagation. Hecht-Nielsen credits the Robbins–Monro algorithm (1951) and Arthur Bryson and Yu-Chi Ho 's Applied Optimal Control (1969) as presages of backpropagation. Other precursors were Henry J. Kelley 1960, and Arthur E. Bryson (1961). In 1962, Stuart Dreyfus published a simpler derivation based only on the chain rule . In 1973, he adapted parameters of controllers in proportion to error gradients. Unlike modern backpropagation, these precursors used standard Jacobian matrix calculations from one stage to the previous one, neither addressing direct links across several stages nor potential additional efficiency gains due to network sparsity.

The ADALINE (1960) learning algorithm was gradient descent with a squared error loss for a single layer. The first multilayer perceptron (MLP) with more than one layer trained by stochastic gradient descent was published in 1967 by Shun'ichi Amari . The MLP had 5 layers, with 2 learnable layers, and it learned to classify patterns not linearly separable.

Modern backpropagation was first published by Seppo Linnainmaa as "reverse mode of automatic differentiation " (1970) for discrete connected networks of nested differentiable functions.

In 1982, Paul Werbos applied backpropagation to MLPs in the way that has become standard. Werbos described how he developed backpropagation in an interview. In 1971, during his PhD work, he developed backpropagation to mathematicize Freud 's "flow of psychic energy". He faced repeated difficulty in publishing the work, only managing in 1981. He also claimed that "the first practical application of back-propagation was for estimating a dynamic model to predict nationalism and social communications in 1974" by him.

Around 1982, David E. Rumelhart independently developed backpropagation and taught the algorithm to others in his research circle. He did not cite previous work as he was unaware of them. He published the algorithm first in a 1985 paper, then in a 1986 Nature paper an experimental analysis of the technique. These papers became highly cited, contributed to the popularization of backpropagation, and coincided with the resurging research interest in neural networks during the 1980s.

In 1985, the method was also described by David Parker. Yann LeCun proposed an alternative form of backpropagation for neural networks in his PhD thesis in 1987.

Gradient descent took a considerable amount of time to reach acceptance. Some early objections were: there were no guarantees that gradient descent could reach a global minimum, only local minimum; neurons were "known" by physiologists as making discrete signals (0/1), not continuous ones, and with discrete signals, there is no gradient to take. See the interview with Geoffrey Hinton .

Contributing to the acceptance were several applications in training neural networks via backpropagation, sometimes achieving popularity outside the research circles.

In 1987, NETtalk learned to convert English text into pronunciation. Sejnowski tried training it with both backpropagation and Boltzmann machine, but found the backpropagation significantly faster, so he used it for the final NETtalk. The NETtalk program became a popular success, appearing on the Today show .

In 1989, Dean A. Pomerleau published ALVINN, a neural network trained to drive autonomously using backpropagation.

The LeNet was published in 1989 to recognize handwritten zip codes.

In 1992, TD-Gammon achieved top human level play in backgammon. It was a reinforcement learning agent with a neural network with two layers, trained by backpropagation.

In 1993, Eric Wan won an international pattern recognition contest through backpropagation.

During the 2000s it fell out of favour , but returned in the 2010s, benefiting from cheap, powerful GPU -based computing systems. This has been especially so in speech recognition , machine vision , natural language processing , and language structure learning research (in which it has been used to explain a variety of phenomena related to first and second language learning. )

Error backpropagation has been suggested to explain human brain event-related potential (ERP) components like the N400 and P600 .

In 2023, a backpropagation algorithm was implemented on a photonic processor by a team at Stanford University .