C# and Visual Basic (.NET) are the two main programming languages used to program on the .NET framework.

C# and VB.NET are very different languages in syntax and history.

As the name suggests, the C# syntax is based on the core C programming language originally developed by Dennis Ritchie at Bell Labs (AT&T) in the 1970s. Java and C++ are two other programming languages whose syntax is also based on the C syntax, so they share a common look and feel. See Comparison of C Sharp and Java for more on this topic.

BASIC's roots go back to Dartmouth College . BASIC (Beginner's All-purpose Symbolic Instruction Code) was developed in the 1960s as a method to overcome the difficulties of using assembly language written for processor-specific and/or brand name specific mainframes and hardware. Programming was hardware dependent by design more so for marketing reasons than to preserve the logical composition of programming that should transcend hardware. (Microsoft's claim to fame with its operating system was to free consumers from hardware-specific devices by encapsulating those tasks within its operating system.) Code became "portable" due to the compiler, and in fact, both Visual Basic .NET and C# use the same CLR (Common Language Runtime) today. Microsoft and HP were interested in creating an ISO standard language, which was the original goal, however; HP dropped its support, and the ISO computer language never materialized as an International Standard.

VB.NET finds its roots in BASIC. In its beginning, BASIC was used in the college community as a "basic" language for first exposure to computer programming and the acronym represented the language accurately. In the 1970s, the language was picked up by microcomputer manufacturers of the era to be used as both a simple ROM embedded programming language as well as a quasi operating system for input/output control. In the early 1980s, the language was picked up by Microsoft and expanded significantly beyond its original intent into their "Visual Basic" language/platform that was sold throughout the 1990s as a "rapid application development" (RAD) tool for Windows programming. It competed directly against other RAD tools of the 1990s such as PowerBuilder . Even though Visual Basic was a successful development platform, it was discontinued after its 6th version (VB6) when Microsoft introduced the .NET Framework and its related Visual Studio development platform in the early 2000s.  At that time, the current C++ and VB6 languages were used by Microsoft as the basis for two new programming languages in their new "Integrated Development Environment (IDE)". These languages were named C# and VB.NET.

In February 2017, Microsoft communicated their intent to end the "co-evolution" strategy between the two languages that had existed since 2010 and allow the two languages to again evolve independently.   C# is now the dominant Microsoft-based development language.    Developers will notice that VB 15 (first appearing in Visual Studio 2017) lacks certain language capabilities contained in the new C# 7.3.

Though C# and VB.NET are syntactically very different, that is where the differences mostly end.  
Microsoft developed both of these languages to be part of the same .NET Framework development platform.  They are both developed, managed, and supported by the same language development team at Microsoft. They compile to the same intermediate language (IL), which runs against the same .NET Framework runtime libraries. Although there are some differences in the programming constructs (discussed further below), their differences are primarily syntactic and, assuming one avoids the Visual Basic "Compatibility" libraries provided by Microsoft to aid conversion from VB6, almost every command in VB has an equivalent command in C# and vice versa.  Lastly, both languages reference the same Base Classes of the .NET Framework to extend their functionality.   As a result, with few exceptions, a program written in either language can be run through a simple syntax converter to translate to the other.  There are many open source and commercially available products for this task.
The only fundamental differences between the languages can be found in the implementation of interfaces and in the declaration, raising and handling of events. Although both languages are high-level programming languages , VB.NET maintains a slightly higher level of abstraction in some respects.

One of the main goals of .NET has been its multi-language support. The intent of the design was that all of the various Microsoft languages should have the same level of access to all OS features, should be able to expose the same level of power and usability , and simplify calling from a module in one language to that written in another language.

In implementation, all .NET programming languages share the same runtime engine, uniform abstract syntax tree , and Common Intermediate Language . Additionally all .NET languages have access to platform features including garbage collection, cross language inheritance, exception handling , and debugging . This allows the same output binary to be produced from any .NET programming language.

Visual Studio provides minor differences in the development environment for C# and VB.Net. With each subsequent release of Visual Studio, the differences between development environments for these languages have been reduced. For instance early versions of Visual Studio had poor support for Intellisense in C# compared to Visual Basic .NET, and did not offer background compilation for C#. Currently, the main differences in the development environments are additional features for Visual Basic .NET that originated in VB6, including:

Background compilation is a feature of the Visual Studio IDE whereby code is compiled as it is written by the programmer with the purpose of identifying compilation errors without requiring the solution to be built. This feature has been available for Visual Basic since .NET 1.1 and was present in early versions of Visual Studio for Visual Basic .NET. However, background compilation is a relatively new concept for Visual C# and is available with service pack 1 for Visual Studio 2008 Standard Edition and above. A distinct disadvantage for C# is that the Error List panel does not update until the solution is rebuilt. Refactoring large projects in C# is made more difficult by the need to frequently rebuild the solution in order to highlight compilation errors. Such is not the case with Visual Basic because the Error List panel is synchronized with the background compiler.

Background compilation is less demanding on system resources and results in faster build cycles. This is a particular advantage with large projects and can significantly reduce the time required to start debugging in the IDE.

The bulk of the differences between C# and VB.NET from a technical perspective are syntactic sugar . That is, most of the features are in both languages, but some things are easier to do in one language than another. Many of the differences between the two languages are actually centered around the IDE .

Although the default is for Option Strict to be off for backward compatibility reasons, it is recommended by Microsoft and widely considered to be good practice to turn Option Strict on, due to the fact that it increases application performance and reduces the possibility of naming errors and other programming mistakes.

Visual Basic .NET terminates a block of code with End BlockName statements (or Next statements, for a for loop ) which are more familiar for programmers with experience using T-SQL . In C#, the braces, {} , are used to delimit blocks, which is more familiar to programmers with experience in other widely deployed languages such as C++ and Java . Additionally, in C# if a block consists of only a single statement, the braces may be omitted.

C# is case sensitive while Visual Basic .NET is not. Thus in C# it is possible to have two variables with the same apparent name, for example variable1 and Variable1 . Visual Studio will correct (make uniform) the case of variables as they are typed in VB.NET. In some cases however, case sensitivity can be useful. C# programmers typically capitalize type and member names and leave field and variable names lowercase. This allows, for example, a fairly natural naming of method arguments: public int CalculateOrders(Customer customer) . This can, however, cause problems for those converting C# code to a case-insensitive language, such as Visual Basic, or to those unaccustomed to reading a case sensitive language.

Visual Basic is not case sensitive, which means that any combinations of upper and lower case letters in keywords are acceptable. Visual Studio automatically converts all Visual Basic keywords to the default capitalised forms, e.g. "Public", "If".

C# is case sensitive and all C# keywords are in lower cases.

Visual Basic and C# share most keywords, with the difference being that the default Visual Basic keywords are the capitalised versions of the C# keywords, e.g. Public vs public , If vs if .

A few keywords have very different versions in Visual Basic and C#:

Some C# keywords such as sealed represent different things when applied to methods as opposed to when they are applied to class definitions. VB.NET, on the other hand, uses different keywords for different contexts.

Both C# and VB.NET have high adoption rates, and very active developer communities and Microsoft fully supports both communities. .NET framework developers widely use both VB.NET and C# as primary languages. However, C# has more community activity on the Internet and there are more books available for C#. This may indicate either that there is more adoption of C# or that users need more help with it.

Examples of community and industry adoption include:

C++/CLI (a replacement for Managed Extensions for C++ ) does not have the adoption rate of C# or VB.NET, but does have a significant following. C++/CLI syntactically, stylistically, and culturally is closest to C#. However, C++/CLI stays closer to its C++ roots than C# does. C++/CLI directly supports pointers, destructors, and other unsafe program concepts which are not supported or limited in the other languages. It allows the direct use of both .NET code and standard C++ code. C++/CLI is used for porting native/legacy C++ applications into the .NET framework, or cases where the programmer wants to take more control of the code; but this control comes at a significant cost of ease of use and readability. Many of the automated tools that come with Visual Studio have reduced functionality when interacting with C++ code. This is because reflection cannot provide as much information about the code as it can for C# and VB.net

J# runs a distant fourth in .NET adoption. J# is a language mainly designed to ease transition of Java applications to the .NET framework; it allows developers to leave much of their Java or J++ code unchanged while still running it in the .NET framework, thus allowing them to migrate small pieces of it into another .NET language, such as C#, individually. J# does not receive the same level of updates as the other languages, and does not have the same level of community support. For example, Visual Studio 2005 Team System supports automatic generation of Unit Tests in C#, VB.Net, and C++, but excludes J#. J# has been discontinued and is not included in Visual Studio 2008 or newer versions, since the existing J# feature set largely meets customer needs and usage of J# is declining.

All .NET languages compile down to Common Intermediate Language (CIL), which contains rich metadata and is functionally and logically equivalent to the original .NET language code. For these reasons, while it is possible to code directly in CIL, it is rarely done. The equivalency of CIL to .NET language code permits tools such as .NET Reflector to transform a .NET assembly into source code that is nearly identical to the original source. Code obfuscators are often used to guard against this, and operate by directly modifying the CIL of an assembly in order to make it difficult or impossible to de-compile to a higher level .NET language.