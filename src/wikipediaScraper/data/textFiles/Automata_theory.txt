Automata theory is the study of abstract machines and automata , as well as the computational problems that can be solved using them. It is a theory in theoretical computer science with close connections to mathematical logic . The word automata comes from the Greek word αὐτόματος, which means "self-acting, self-willed, self-moving". An automaton (automata in plural) is an abstract self-propelled computing device which follows a predetermined sequence of operations automatically. An automaton with a finite number of states is called a finite automaton (FA) or finite-state machine (FSM). The figure on the right illustrates a finite-state machine, which is a well-known type of automaton.  This automaton consists of states (represented in the figure by circles) and transitions (represented by arrows).  As the automaton sees a symbol of input, it makes a transition (or jump) to another state, according to its transition function , which takes the previous state and current input symbol as its arguments.

Automata theory is closely related to formal language theory. In this context, automata are used as finite representations of formal languages that may be infinite. Automata are often classified by the class of formal languages they can recognize, as in the Chomsky hierarchy , which describes a nesting relationship between major classes of automata. Automata play a major role in the theory of computation , compiler construction , artificial intelligence , parsing and formal verification .

The theory of abstract automata was developed in the mid-20th century in connection with finite automata . Automata theory was initially considered a branch of mathematical systems theory , studying the behavior of discrete-parameter systems. Early work in automata theory differed from previous work on systems by using abstract algebra to describe information systems rather than differential calculus to describe material systems. The theory of the finite-state transducer was developed under different names by different research communities. The earlier concept of Turing machine was also included in the discipline along with new forms of infinite-state automata, such as pushdown automata .

1956 saw the publication of Automata Studies , which collected work by scientists including Claude Shannon , W. Ross Ashby , John von Neumann , Marvin Minsky , Edward F. Moore , and Stephen Cole Kleene . With the publication of this volume, "automata theory emerged as a relatively autonomous discipline". The book included Kleene's description of the set of regular events, or regular languages , and a relatively stable measure of complexity in Turing machine programs by Shannon. In the same year, Noam Chomsky described the Chomsky hierarchy , a correspondence between automata and formal grammars , and Ross Ashby published An Introduction to Cybernetics , an accessible textbook explaining automata and information using basic set theory .

The study of linear bounded automata led to the Myhill–Nerode theorem , which gives a necessary and sufficient condition for a formal language to be regular, and an exact count of the number of states in a minimal machine for the language. The pumping lemma for regular languages , also useful in regularity proofs, was proven in this period by Michael O. Rabin and Dana Scott , along with the computational equivalence of deterministic and nondeterministic finite automata.

In the 1960s, a body of algebraic results known as "structure theory" or "algebraic decomposition theory" emerged, which dealt with the realization of sequential machines from smaller machines by interconnection. While any finite automaton can be simulated using a universal gate set , this requires that the simulating circuit contain loops of arbitrary complexity. Structure theory deals with the "loop-free" realizability of machines. The theory of computational complexity also took shape in the 1960s. By the end of the decade, automata theory came to be seen as "the pure mathematics of computer science".

What follows is a general definition of an automaton, which restricts a broader definition of a system to one viewed as acting in discrete time-steps, with its state behavior and outputs defined at each step by unchanging functions of only its state and input.

An automaton runs when it is given some sequence of inputs in discrete (individual) time steps (or just steps ). An automaton processes one input picked from a set of symbols or letters , which is called an input alphabet . The symbols received by the automaton as input at any step are a sequence of symbols called words . An automaton has a set of states . At each moment during a run of the automaton, the automaton is in one of its states. When the automaton receives new input, it moves to another state (or transitions ) based on a transition function that takes the previous state and current input symbol as parameters. At the same time, another function called the output function produces symbols from the output alphabet , also according to the previous state and current input symbol. The automaton reads the symbols of the input word and transitions between states until the word is read completely, if it is finite in length, at which point the automaton halts . A state at which the automaton halts is called the final state .

To investigate the possible state/input/output sequences in an automaton using formal language theory, a machine can be assigned a starting state and a set of accepting states . Then, depending on whether a run starting from the starting state ends in an accepting state, the automaton can be said to accept or reject an input sequence. The set of all the words accepted by an automaton is called the language recognized by the automaton . A familiar example of a machine recognizing a language is an electronic lock , which accepts or rejects attempts to enter the correct code.

Automata are defined to study useful machines under mathematical formalism. So the definition of an automaton is open to variations according to the "real world machine" that we want to model using the automaton. People have studied many variations of automata. The following are some popular variations in the definition of different components of automata.

Different combinations of the above variations produce many classes of automata.

Automata theory is a subject matter that studies properties of various types of automata. For example, the following questions are studied about a given type of automata.

Automata theory also studies the existence or nonexistence of any effective algorithms to solve problems similar to the following list:

The following is an incomplete list of types of automata.

Normally automata theory describes the states of abstract machines but there are discrete automata, analog automata or continuous automata , or hybrid discrete-continuous automata , which use digital data, analog data or continuous time, or digital and analog data, respectively.

The following is an incomplete hierarchy in terms of powers of different types of virtual machines. The hierarchy reflects the nested categories of languages the machines are able to accept.

Each model in automata theory plays important roles in several applied areas. Finite automata are used in text processing , compilers, and hardware design . Context-free grammar (CFGs) are used in programming languages and artificial intelligence. Originally, CFGs were used in the study of human languages . Cellular automata are used in the field of artificial life , the most famous example being John Conway 's Game of Life . Some other examples which could be explained using automata theory in biology include mollusk and pine cone growth and pigmentation patterns. Going further, a theory suggesting that the whole universe is computed by some sort of a discrete automaton, is advocated by some scientists. The idea originated in the work of Konrad Zuse , and was popularized in America by Edward Fredkin . Automata also appear in the theory of finite fields : the set of irreducible polynomials that can be written as composition of degree two polynomials is in fact a regular language. Another problem for which automata can be used is the induction of regular languages .

Automata simulators are pedagogical tools used to teach, learn and research automata theory. An automata simulator takes as input the description of an automaton and then simulates its working for an arbitrary input string. The description of the automaton can be entered in several ways. An automaton can be defined in a symbolic language or its specification may be entered in a predesigned form or its transition diagram may be drawn by clicking and dragging the mouse. Well known automata simulators include Turing's World, JFLAP, VAS, TAGS and SimStudio.

One can define several distinct categories of automata following the automata classification into different types described in the previous section. The mathematical category of deterministic automata, sequential machines or sequential automata , and Turing machines with automata homomorphisms defining the arrows between automata is a Cartesian closed category , it has both categorical limits and colimits . An automata homomorphism maps a quintuple of an automaton A i onto the quintuple of another automaton A j . Automata homomorphisms can also be considered as automata transformations or as semigroup homomorphisms, when the state space, S , of the automaton is defined as a semigroup S g . Monoids are also considered as a suitable setting for automata in monoidal categories .

One could also define a variable automaton , in the sense of Norbert Wiener in his book on The Human Use of Human Beings via the endomorphisms A i → A i {\displaystyle A_{i}\to A_{i}} . Then one can show that such variable automata homomorphisms form a mathematical group. In the case of non-deterministic, or other complex kinds of automata, the latter set of endomorphisms may become, however, a variable automaton groupoid . Therefore, in the most general case, categories of variable automata of any kind are categories of groupoids or groupoid categories . Moreover, the category of reversible automata is then a 2-category , and also a subcategory of the 2-category of groupoids, or the groupoid category.