cat is a standard Unix utility that reads files sequentially, writing them to standard output . The name is derived from its function to (con) cat enate files (from Latin catenare , "to chain"). It has been ported to a number of operating systems.

The other primary purpose of cat , aside from concatenation, is file printing â€” allowing the computer user to view the contents of a file. Printing to files and the terminal are the most common uses of cat .

cat was part of the early versions of Unix , e.g., Version 1 , and replaced pr , a PDP-7 and Multics utility for copying a single file to the screen. It was written by Ken Thompson and Dennis Ritchie .
The version of cat bundled in GNU coreutils was written by Torbjorn Granlund and Richard Stallman . The ReactOS version was written by David Welch, Semyon Novikov, and HermÃ¨s BÃ©lusca.

Over time, alternative utilities such as tac and bat also became available, bringing different new features.

The cat utility serves a dual purpose: concatenating and printing.
With a single argument, it is often used to print a file to the user's terminal emulator (or historically to a computer terminal or teletype ). With more than one argument, it concatenates several files. The combined result is by default also printed to the terminal, but often users redirect the result into yet another file. Hence printing a single file to the terminal is a special use-case of this concatenation program. Yet, this is its most common use.

The Single Unix Specification defines the operation of cat to read files in the sequence given in its arguments, writing their contents to the standard output in the same sequence. The specification mandates the support of one option flag, u for unbuffered output, meaning that each byte is written after it has been read.  Some operating systems, like the ones using GNU Core Utilities , do this by default and ignore the flag.

If one of the input filenames is specified as a single hyphen ( - ), then cat reads from standard input at that point in the sequence. If no files are specified, cat reads from standard input only.

The command- syntax is:

Example of some cat options:

cat can be used to pipe a file to a program that expects plain text or binary data on its input stream. cat does not destroy non-text bytes when concatenating and outputting. As such, its two main use cases are text files and certain format-compatible types of binary files.

Concatenation of text is limited to text files using the same legacy encoding, such as ASCII . cat does not provide a way to concatenate Unicode text files that have a Byte Order Mark or files using different text encodings from each other.

For many structured binary data sets, the resulting combined file may not be valid; for example, if a file has a unique header or footer, the result will spuriously duplicate these. However, for some multimedia digital container formats , the resulting file is valid, and so cat provides an effective means of appending files. Video streams can be a significant example of files that cat can concatenate without issue, e.g. the MPEG program stream (MPEG-1 and MPEG-2) and DV (Digital Video) formats, which are fundamentally simple streams of packets.

The Jargon File version 4.4.7 lists this as the definition of cat :

Among Unix fans, cat(1) is considered an excellent example of user-interface design, because it delivers the file contents without such verbosity as spacing or headers between the files, and because it does not require the files to consist of lines of text, but works with any sort of data.

Among Unix critics, cat(1) is considered the canonical example of bad user-interface design, because of its woefully unobvious name. It is far more often used to blast a single file to standard output than to concatenate two or more files. The name cat for the former operation is just as unintuitive as, say, LISP 's cdr .

Useless use of cat ( UUOC ) is common Unix jargon for command line constructs that only provide a function of convenience to the user. In computing, the word "abuse", in the second sense of the definition, is used to disparage the excessive or unnecessary use of a language construct; thus, abuse of cat is sometimes called "cat abuse". Example of a common cat abuse is given in the award:

This can be rewritten using redirection of stdin instead, in either of the following forms (the first is more traditional):

Beyond other benefits, the input redirection forms allow command to perform random access on the file, whereas the cat examples do not. This is because the redirection form opens the file as the stdin file descriptor which command can fully access, while the cat form simply provides the data as a stream of bytes.

Another common case where cat is unnecessary is where a command defaults to operating on stdin, but will read from a file, if the filename is given as an argument. This is the case for many common commands; the following examples

can instead be written as

A common interactive use of cat for a single file is to output the content of a file to standard output. However, if the output is piped or redirected, cat is unnecessary.

A cat written with UUOC might still be preferred for readability reasons, as reading a piped stream left-to-right might be easier to conceptualize. Also, one wrong use of the redirection symbol > instead of < (often adjacent on keyboards) may permanently delete the content of a file, in other words clobbering , and one way to avoid this is to use cat with pipes. Compare:

with: