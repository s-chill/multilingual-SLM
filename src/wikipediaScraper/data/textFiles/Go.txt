Go is a statically typed , compiled high-level programming language designed at Google by Robert Griesemer , Rob Pike , and Ken Thompson . It is syntactically similar to C , but also has memory safety , garbage collection , structural typing , and CSP -style concurrency . It is often referred to as Golang because of its former domain name, golang.org , but its proper name is Go.

There are two major implementations:

A third-party source-to-source compiler , GopherJS, compiles Go to JavaScript for front-end web development .

Go was designed at Google in 2007 to improve programming productivity in an era of multicore , networked machines and large codebases . The designers wanted to address criticisms of other languages in use at Google, but keep their useful characteristics:

Its designers were primarily motivated by their shared dislike of C++ .

Go was publicly announced in November 2009, and version 1.0 was released in March 2012. Go is widely used in production at Google and in many other organizations and open-source projects.

The Gopher mascot was introduced in 2009 for the open source launch of the language.  The design, by Ren√©e French , borrowed from a c. 2000 WFMU promotion.

In November 2016, the Go and Go Mono fonts were released by type designers Charles Bigelow and Kris Holmes specifically for use by the Go project. Go is a humanist sans-serif resembling Lucida Grande , and Go Mono is monospaced . Both fonts adhere to the WGL4 character set and were designed to be legible with a large x-height and distinct letterforms . Both Go and Go Mono adhere to the DIN 1450 standard by having a slashed zero, lowercase l with a tail, and an uppercase I with serifs.

In April 2018, the original logo was redesigned by brand designer Adam Smith. The new logo is a modern, stylized GO slanting right with trailing streamlines. (The Gopher mascot remained the same. )

The lack of support for generic programming in initial versions of Go drew considerable criticism. The designers expressed an openness to generic programming and noted that built-in functions were in fact type-generic, but are treated as special cases; Pike called this a weakness that might be changed at some point. The Google team built at least one compiler for an experimental Go dialect with generics, but did not release it.

In August 2018, the Go principal contributors published draft designs for generic programming and error handling and asked users to submit feedback. However, the error handling proposal was eventually abandoned.

In June 2020, a new draft design document was published that would add the necessary syntax to Go for declaring generic functions and types. A code translation tool, go2go , was provided to allow users to try the new syntax, along with a generics-enabled version of the online Go Playground.

Generics were finally added to Go in version 1.18 on March 15, 2022.

Go 1 guarantees compatibility for the language specification and major parts of the standard library. All versions up through the current Go 1.23 release have maintained this promise.

Go does not follow SemVer ; rather, each major Go release is supported until there are two newer major releases. Unlike most software, Go calls the second number in a version the major, i.e., in 1.x x is the major version. This is because Go plans to never reach 2.0, given that compatibility is one of language's major selling points.

Go is influenced by C (especially the Plan 9 dialect ), but with an emphasis on greater simplicity and safety. It consists of:

Go's syntax includes changes from C aimed at keeping code concise and readable. A combined declaration/initialization operator was introduced that allows the programmer to write i := 3 or s := "Hello, world!" , without specifying the types of variables used. This contrasts with C's int i = 3 ; and const char * s = "Hello, world!" ; .

Semicolons still terminate statements; but are implicit when the end of a line occurs.

Methods may return multiple values, and returning a result , err pair is the conventional way a method indicates an error to its caller in Go. Go adds literal syntaxes for initializing struct parameters by name and for initializing maps and slices . As an alternative to C's three-statement for loop, Go's range expressions allow concise iteration over arrays, slices, strings, maps, and channels.

Go has a number of built-in types, including numeric ones ( byte , int64 , float32 , etc.), Booleans , and byte strings ( string ). Strings are immutable; built-in operators and keywords (rather than functions) provide concatenation, comparison, and UTF-8 encoding/decoding. Record types can be defined with the struct keyword.

For each type T and each non-negative integer constant n , there is an array type denoted [ n ] T ; arrays of differing lengths are thus of different types. Dynamic arrays are available as "slices", denoted [] T for some type T . These have a length and a capacity specifying when new memory needs to be allocated to expand the array. Several slices may share their underlying memory.

Pointers are available for all types, and the pointer-to- T type is denoted * T . Address-taking and indirection use the & and * operators, as in C, or happen implicitly through the method call or attribute access syntax. There is no pointer arithmetic, except via the special unsafe.Pointer type in the standard library.

For a pair of types K , V , the type map[ K ] V is the type mapping type- K keys to type- V values, though Go Programming Language specification does not give any performance guarantees or implementation requirements for map types. Hash tables are built into the language, with special syntax and built-in functions. chan T is a channel that allows sending values of type T between concurrent Go processes .

Aside from its support for interfaces , Go's type system is nominal : the type keyword can be used to define a new named type , which is distinct from other named types that have the same layout (in the case of a struct , the same members in the same order). Some conversions between types (e.g., between the various integer types) are pre-defined and adding a new type may define additional conversions, but conversions between named types must always be invoked explicitly. For example, the type keyword can be used to define a type for IPv4 addresses, based on 32-bit unsigned integers as follows:

With this type definition, ipv4addr(x) interprets the uint32 value x as an IP address. Simply assigning x to a variable of type ipv4addr is a type error.

Constant expressions may be either typed or "untyped"; they are given a type when assigned to a typed variable if the value they represent passes a compile-time check.

Function types are indicated by the func keyword; they take zero or more parameters and return zero or more values, all of which are typed. The parameter and return values determine a function type; thus, func(string, int32) (int, error) is the type of functions that take a string and a 32-bit signed integer, and return a signed integer (of default width) and a value of the built-in interface type error .

Any named type has a method set associated with it. The IP address example above can be extended with a method for checking whether its value is a known standard:

Due to nominal typing, this method definition adds a method to ipv4addr , but not on uint32 . While methods have special definition and call syntax, there is no distinct method type.

Go provides two features that replace class inheritance .

The first is embedding , which can be viewed as an automated form of composition .

The second are its interfaces , which provides runtime polymorphism . Interfaces are a class of types and provide a limited form of structural typing in the otherwise nominal type system of Go. An object which is of an interface type is also of another type, much like C++ objects being simultaneously of a base and derived class. Go interfaces were designed after protocols from the Smalltalk programming language. Multiple sources use the term duck typing when describing Go interfaces. Although the term duck typing is not precisely defined and therefore not wrong, it usually implies that type conformance is not statically checked. Because conformance to a Go interface is checked statically by the Go compiler (except when performing a type assertion), the Go authors prefer the term structural typing .

The definition of an interface type lists required methods by name and type. Any object of type T for which functions exist matching all the required methods of interface type I is an object of type I as well. The definition of type T need not (and cannot) identify type I. For example, if Shape , Square and Circle are defined as

then both a Square and a Circle are implicitly a Shape and can be assigned to a Shape -typed variable. In formal language, Go's interface system provides structural rather than nominal typing. Interfaces can embed other interfaces with the effect of creating a combined interface that is satisfied by exactly the types that implement the embedded interface and any methods that the newly defined interface adds.

The Go standard library uses interfaces to provide genericity in several places, including the input/output system that is based on the concepts of Reader and Writer .

Besides calling methods via interfaces, Go allows converting interface values to other types with a run-time type check. The language constructs to do so are the type assertion , which checks against a single potential type:

and the type switch , which checks against multiple types:

The empty interface interface {} is an important base case because it can refer to an item of any concrete type. It is similar to the Object class in Java or C# and is satisfied by any type, including built-in types like int . Code using the empty interface cannot simply call methods (or built-in operators) on the referred-to object, but it can store the interface {} value, try to convert it to a more useful type via a type assertion or type switch, or inspect it with Go's reflect package. Because interface {} can refer to any value, it is a limited way to escape the restrictions of static typing, like void * in C but with additional run-time type checks.

The interface {} type can be used to model structured data of any arbitrary schema in Go, such as JSON or YAML data, by representing it as a map [ string ] interface {} (map of string to empty interface). This recursively describes data in the form of a dictionary with string keys and values of any type.

Interface values are implemented using pointer to data and a second pointer to run-time type information. Like some other types implemented using pointers in Go, interface values are nil if uninitialized.

Since version 1.18, Go supports generic code using parameterized types.

Functions and types now have the ability to be generic using type parameters. These type parameters are specified within square brackets, right after the function or type name. The compiler transforms the generic function or type into non-generic by substituting type arguments for the type parameters provided, either explicitly by the user or type inference by the compiler. This transformation process is referred to as type instantiation.

Interfaces now can define a set of types (known as type set) using | (Union) operator, as well as a set of methods. These changes were made to support type constraints in generics code. For a generic function or type, a constraint can be thought of as the type of the type argument: a meta-type. This new ~T syntax will be the first use of ~ as a token in Go. ~T means the set of all types whose underlying type is T .

Go uses the iota keyword to create enumerated constants.

In Go's package system, each package has a path (e.g., "compress/bzip2" or "golang.org/x/net/html" ) and a name (e.g., bzip2 or html ). References to other packages' definitions must always be prefixed with the other package's name, and only the capitalized names from other packages are accessible: io.Reader is public but bzip2.reader is not. The go get command can retrieve packages stored in a remote repository and developers are encouraged to develop packages inside a base path corresponding to a source repository (such as example.com/user_name/package_name) to reduce the likelihood of name collision with future additions to the standard library or other external libraries.

The Go language has built-in facilities, as well as library support, for writing concurrent programs . Concurrency refers not only to CPU parallelism, but also to asynchrony : letting slow operations like a database or network read run while the program does other work, as is common in event-based servers.

The primary concurrency construct is the goroutine , a type of green thread . A function call prefixed with the go keyword starts a function in a new goroutine. The language specification does not specify how goroutines should be implemented, but current implementations multiplex a Go process's goroutines onto a smaller set of operating-system threads , similar to the scheduling performed in Erlang .

While a standard library package featuring most of the classical concurrency control structures ( mutex locks, etc.) is available, idiomatic concurrent programs instead prefer channels , which send messages between goroutines. Optional buffers store messages in FIFO order and allow sending goroutines to proceed before their messages are received.

Channels are typed, so that a channel of type chan T can only be used to transfer messages of type T . Special syntax is used to operate on them; <-ch is an expression that causes the executing goroutine to block until a value comes in over the channel ch , while ch <- x sends the value x (possibly blocking until another goroutine receives the value). The built-in switch -like select statement can be used to implement non-blocking communication on multiple channels; see below for an example. Go has a memory model describing how goroutines must use channels or other operations to safely share data.

The existence of channels does not by itself set Go apart from actor model -style concurrent languages like Erlang, where messages are addressed directly to actors (corresponding to goroutines). In the actor model, channels are themselves actors, therefore addressing a channel just means to address an actor. The actor style can be simulated in Go by maintaining a one-to-one correspondence between goroutines and channels, but the language allows multiple goroutines to share a channel or a single goroutine to send and receive on multiple channels.

From these tools one can build concurrent constructs like worker pools, pipelines (in which, say, a file is decompressed and parsed as it downloads), background calls with timeout, "fan-out" parallel calls to a set of services, and others. Channels have also found uses further from the usual notion of interprocess communication, like serving as a concurrency-safe list of recycled buffers, implementing coroutines (which helped inspire the name goroutine ), and implementing iterators .

Concurrency-related structural conventions of Go ( channels and alternative channel inputs) are derived from Tony Hoare's communicating sequential processes model. Unlike previous concurrent programming languages such as Occam or Limbo (a language on which Go co-designer Rob Pike worked), Go does not provide any built-in notion of safe or verifiable concurrency. While the communicating-processes model is favored in Go, it is not the only one: all goroutines in a program share a single address space. This means that mutable objects and pointers can be shared between goroutines; see ¬ß¬†Lack of data race safety , below.

Although Go's concurrency features are not aimed primarily at parallel processing , they can be used to program shared-memory multi-processor machines. Various studies have been done into the effectiveness of this approach. One of these studies compared the size (in lines of code ) and speed of programs written by a seasoned programmer not familiar with the language and corrections to these programs by a Go expert (from Google's development team), doing the same for Chapel , Cilk and Intel TBB . The study found that the non-expert tended to write divide-and-conquer algorithms with one go statement per recursion, while the expert wrote distribute-work-synchronize programs using one goroutine per processor core. The expert's programs were usually faster, but also longer.

Go's approach to concurrency can be summarized as "don't communicate by sharing memory; share memory by communicating". There are no restrictions on how goroutines access shared data, making data races possible. Specifically, unless a program explicitly synchronizes via channels or other means, writes from one goroutine might be partly, entirely, or not at all visible to another, often with no guarantees about ordering of writes. Furthermore, Go's internal data structures like interface values, slice headers, hash tables, and string headers are not immune to data races, so type and memory safety can be violated in multithreaded programs that modify shared instances of those types without synchronization. Instead of language support, safe concurrent programming thus relies on conventions; for example, Chisnall recommends an idiom called "aliases xor mutable", meaning that passing a mutable value (or pointer) over a channel signals a transfer of ownership over the value to its receiver. The gc toolchain has an optional data race detector that can check for unsynchronized access to shared memory during runtime since version 1.1, additionally a best-effort race detector is also included by default since version 1.6 of the gc runtime for access to the map data type.

The linker in the gc toolchain creates statically linked binaries by default; therefore all Go binaries include the Go runtime.

Go deliberately omits certain features common in other languages, including (implementation)¬†inheritance , assertions , pointer arithmetic , implicit type conversions , untagged unions , and tagged unions . The designers added only those facilities that all three agreed on.

Of the omitted language features, the designers explicitly argue against assertions and pointer arithmetic, while defending the choice to omit type inheritance as giving a more useful language, encouraging instead the use of interfaces to achieve dynamic dispatch and composition to reuse code. Composition and delegation are in fact largely automated by struct embedding; according to researchers Schmager et al. , this feature "has many of the drawbacks of inheritance: it affects the public interface of objects, it is not fine-grained (i.e, no method-level control over embedding), methods of embedded objects cannot be hidden, and it is static", making it "not obvious" whether programmers will overuse it to the extent that programmers in other languages are reputed to overuse inheritance.

Exception handling was initially omitted in Go due to lack of a "design that gives value proportionate to the complexity". An exception-like panic / recover mechanism that avoids the usual try-catch control structure was proposed and released in the March 30, 2010 snapshot. The Go authors advise using it for unrecoverable errors such as those that should halt an entire program or server request, or as a shortcut to propagate errors up the stack within a package. Across package boundaries, Go includes a canonical error type, and multi-value returns using this type are the standard idiom.

The Go authors put substantial effort into influencing the style of Go programs:

The main Go distribution includes tools for building , testing , and analyzing code:

It also includes profiling and debugging support, fuzzing capabilities to detect bugs, runtime instrumentation (for example, to track garbage collection pauses), and a data race detector.

Another tool maintained by the Go team but is not included in Go distributions is gopls , a language server that provides IDE features such as intelligent code completion to Language Server Protocol compatible editors.

An ecosystem of third-party tools adds to the standard distribution, such as gocode , which enables code autocompletion in many text editors, goimports , which automatically adds/removes package imports as needed, and errcheck , which detects code that might unintentionally ignore errors.

where "fmt" is the package for formatted I/O , similar to C's C file input/output .

The following simple program demonstrates Go's concurrency features to implement an asynchronous program. It launches two lightweight threads ("goroutines"): one waits for the user to type some text, while the other implements a timeout. The select statement waits for either of these goroutines to send a message to the main routine, and acts on the first message to arrive (example adapted from David Chisnall's book).

The testing package provides support for automated testing of go packages. Target function example:

Test code (note that assert keyword is missing in Go; tests live in <filename>_test.go at the same package):

It is possible to run tests in parallel.

The net/http package provides support for creating web applications.

This example would show "Hello world!" when localhost:8080 is visited.

Go has found widespread adoption in various domains due to its robust standard library and ease of use.

Popular applications include: Caddy , a web server that automates the process of setting up HTTPS, Docker , which provides a platform for containerization, aiming to ease the complexities of software development and deployment, Kubernetes , which automates the deployment, scaling, and management of containerized applications, CockroachDB , a distributed SQL database engineered for scalability and strong consistency, and Hugo , a static site generator that prioritizes speed and flexibility, allowing developers to create websites efficiently.

The interface system, and the deliberate omission of inheritance, were praised by Michele Simionato, who likened these characteristics to those of Standard ML , calling it "a shame that no popular language has followed [this] particular route".

Dave Astels at Engine Yard wrote in 2009:

Go is extremely easy to dive into. There are a minimal number of fundamental language concepts and the syntax is clean and designed to be clear and unambiguous.
Go is still experimental and still a little rough around the edges.

Go was named Programming Language of the Year by the TIOBE Programming Community Index in its first year, 2009, for having a larger 12-month increase in popularity (in only 2 months, after its introduction in November) than any other language that year, and reached 13th place by January 2010, surpassing established languages like Pascal . By June 2015, its ranking had dropped to below 50th in the index, placing it lower than COBOL and Fortran . But as of January 2017, its ranking had surged to 13th, indicating significant growth in popularity and adoption. Go was again awarded TIOBE Programming Language of the Year in 2016.

Bruce Eckel has stated:

The complexity of C++ (even more complexity has been added in the new C++), and the resulting impact on productivity, is no longer justified. All the hoops that the C++ programmer had to jump through in order to use a C-compatible language make no sense anymore -- they're just a waste of time and effort. Go makes much more sense for the class of problems that C++ was originally intended to solve.

A 2011 evaluation of the language and its gc implementation in comparison to C++ ( GCC ), Java and Scala by a Google engineer found:

Go offers interesting language features, which also allow for a concise and standardized notation. The compilers for this language are still immature, which reflects in both performance and binary sizes.

The evaluation got a rebuttal from the Go development team. Ian Lance Taylor, who had improved the Go code for Hundt's paper, had not been aware of the intention to publish his code, and says that his version was "never intended to be an example of idiomatic or efficient Go"; Russ Cox then optimized the Go code, as well as the C++ code, and got the Go code to run almost as fast as the C++ version and more than an order of magnitude faster than the code in the paper.

On November 10, 2009, the day of the general release of the language, Francis McCabe, developer of the Go! programming language (note the exclamation point), requested a name change of Google's language to prevent confusion with his language, which he had spent 10 years developing. McCabe raised concerns that "the 'big guy' will end up steam-rollering over" him, and this concern resonated with the more than 120 developers who commented on Google's official issues thread saying they should change the name, with some even saying the issue contradicts Google's motto of: Don't be evil .

On October 12, 2010, the filed public issue ticket was closed by Google developer Russ Cox (@rsc) with the custom status "Unfortunate" accompanied by the following comment:

"There are many computing products and services named Go. In the 11 months since our release, there has been minimal confusion of the two languages."