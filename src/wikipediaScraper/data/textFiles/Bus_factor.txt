The bus factor is a measurement of the risk resulting from information and capabilities not being shared among team members, derived from the phrase "in case they get hit by a bus". It is also known as the bus problem , truck factor , or bus/truck number .

The concept is similar to the much older idea of key person risk , but considers the consequences of losing key technical experts, versus financial or managerial executives (who are theoretically replaceable at an insurable cost).  Personnel must be both key and irreplaceable to contribute to the bus factor; losing a replaceable or non-key person would not result in a bus-factor effect.

The term was first applied to software development , where a team member might create critical components by crafting code that performs well, but which also is unavailable to other team members, such as work that was undocumented , never shared , encrypted , obfuscated or not published . Thus a key component would be effectively lost as a direct consequence of the absence of that team member, making the member key. If this component was key to the project's advancement, the project would stall.

The "bus factor" is the minimum number of team members that have to suddenly disappear from a project before the project stalls due to lack of knowledgeable or competent personnel.

The expression "hit by a bus" describes a person either dying or more generally disappearing suddenly from the project. It is used to describe hypothetical future disappearances in a darkly humorous way. Team members do not literally have to get "hit by a bus" for the "bus factor" to apply—any number of events could occur in which a team member could be suddenly and substantially prevented from working on the project. This could include a person taking a new job, going on parental leave, or changing lifestyle or life status.

For instance, say a team of 30 people produces bread in three necessary steps: mixing ingredients, kneading the dough, and baking. Ten people know how to mix ingredients, all 30 people know how to knead the dough, and 5 people know how to bake. If all 5 people who know how to bake disappear, then the team cannot produce bread, so the team's bus factor is 5. A bus factor of one is a single point of failure .

An early instance of this sort of query was when Michael McLay publicly asked, in 1994, what would happen to the Python language if Guido van Rossum were to be hit by a bus.

"Truck number" was already a recurring concept in the Organizational Patterns book published in 2004, itself an evolution of the work published in the first book of the Pattern Languages of Program Design series in 1995, which was the publication record of the first Pattern Languages of Programs conference in August 1994, where it was referenced in patterns including Solo Virtuoso . The term was used in mental health in 1998. It was seen in engineering by 2003, and the Debian project in 2005.

Studies conducted in 2015 and 2016 calculated the bus/truck factor of 133 popular GitHub projects. The results show that most of the systems have a small bus factor (65% have bus factor ≤ 2) and the value is greater than 10 for less than 10% of the systems.

The term is mostly used in business management, and especially in the field of software development .

In many software development projects, one goal is to share information in order to improve the bus factor, potentially to the size of the entire team. A good bus factor means many individuals know enough to carry on and the project could still succeed even in very adverse events.

Several ways to improve the bus factor have been proposed: