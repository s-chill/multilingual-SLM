In computer science , an object is an entity with well-defined behavior.

Any language that supports a construct with state , behavior (modified via associated procedures ), and identity is classified as object-based . Object-oriented programming (OOP) is object-based with the addition of polymorphism and inheritance . An object-oriented system integrates code (behavior) and data (state) into objects. In a class-based language, an object is an instance of a class .

In the relational model of database management, aspects such as table and column may act as objects.

Information systems can be modeled with objects representing their components and interfaces.

An important distinction in programming languages is the difference between an object-oriented language and an object-based language. A language is usually considered object-based if it includes the basic capabilities for an object: identity, properties, and attributes. A language is considered object-oriented if it is object-based and also has the capability of polymorphism , inheritance , encapsulation , and, possibly, composition .

Not all object-based (or object-oriented) languages are class-based. One prominent alternative paradigm is prototype-based programming , used by JavaScript and Lua , among others.

The object-oriented approach is not just a programming model. It can be used equally well as an interface definition language for distributed systems. The objects in a distributed computing model tend to be larger grained, longer lasting, and more service-oriented than programming objects.

A standard method to package distributed objects is via an Interface Definition Language (IDL). An IDL shields the client of all of the details of the distributed server object. Details such as which computer the object resides on, what programming language it uses, what operating system , and other platform-specific issues. The IDL is also usually part of a distributed environment that provides services such as transactions and persistence to all objects in a uniform manner. Two of the most popular standards for distributed objects are the Object Management Group 's CORBA standard and Microsoft 's DCOM.

In addition to distributed objects, a number of other extensions to the basic concept of an object have been proposed to enable distributed computing:

Some of these extensions, such as distributed objects and protocol objects , are domain-specific terms for special types of "ordinary" objects used in a certain context (such as remote method invocation or protocol composition ). Others, such as replicated objects and live distributed objects , are more non-standard, in that they abandon the usual case that an object resides in a single location at a time, and apply the concept to groups of entities (replicas) that might span across multiple locations, might have only weakly consistent state, and whose membership might dynamically change.

The Semantic Web is essentially a distributed-objects framework. Two key technologies in the Semantic Web are the Web Ontology Language (OWL) and the Resource Description Framework (RDF). RDF provides the capability to define basic objects—names, properties, attributes, relations—that are accessible via the Internet. OWL adds a richer object model, based on set theory, that provides additional modeling capabilities such as multiple inheritance .

OWL objects are not like standard large-grained distributed objects accessed via an Interface Definition Language. Such an approach would not be appropriate for the Internet because the Internet is constantly evolving and standardization on one set of interfaces is difficult to achieve. OWL objects tend to be similar to the kinds of objects used to define application domain models in programming languages such as Java and C++ .

However, there are important distinctions between OWL objects and traditional object-oriented programming objects. Traditional objects get compiled into static hierarchies usually with single inheritance, but OWL objects are dynamic. An OWL object can change its structure at run time and can become an instance of new or different classes.

Another critical difference is the way the model treats information that is currently not in the system. Programming objects and most database systems use the " closed-world assumption ". If a fact is not known to the system that fact is assumed to be false. Semantic Web objects use the open-world assumption , a statement is only considered false if there is actual relevant information that it is false, otherwise it is assumed to be unknown, neither true nor false.

OWL objects are actually most like objects in artificial intelligence frame languages such as KL-ONE and Loom.

The following table contrasts traditional objects from Object-Oriented programming languages such as Java or C++ with Semantic Web Objects: