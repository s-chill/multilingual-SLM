Decision tree learning is a supervised learning approach used in statistics , data mining and machine learning . In this formalism, a classification or regression decision tree is used as a predictive model to draw conclusions about a set of observations.

Tree models where the target variable can take a discrete set of values are called classification trees ; in these tree structures, leaves represent class labels and branches represent conjunctions of features that lead to those class labels. Decision trees where the target variable can take continuous values (typically real numbers ) are called regression trees . More generally, the concept of regression tree can be extended to any kind of object equipped with pairwise dissimilarities such as categorical sequences.

Decision trees are among the most popular machine learning algorithms given their intelligibility and simplicity.

In decision analysis, a decision tree can be used to visually and explicitly represent decisions and decision making . In data mining , a decision tree describes data (but the resulting classification tree can be an input for decision making).

Decision tree learning is a method commonly used in data mining. The goal is to create a model that predicts the value of a target variable based on several input variables.

A decision tree is a simple representation for classifying examples. For this section, assume that all of the input features have finite discrete domains, and there is a single target feature called the "classification". Each element of the domain of the classification is called a class .
A decision tree or a classification tree is a tree in which each internal (non-leaf) node is labeled with an input feature. The arcs coming from a node labeled with an input feature are labeled with each of the possible values of the target feature or the arc leads to a subordinate decision node on a different input feature. Each leaf of the tree is labeled with a class or a probability distribution over the classes, signifying that the data set has been classified by the tree into either a specific class, or into a particular probability distribution (which, if the decision tree is well-constructed, is skewed towards certain subsets of classes).

A tree is built by splitting the source set , constituting the root node of the tree, into subsets—which constitute the successor children. The splitting is based on a set of splitting rules based on classification features. This process is repeated on each derived subset in a recursive manner called recursive partitioning .
The recursion is completed when the subset at a node has all the same values of the target variable, or when splitting no longer adds value to the predictions. This process of top-down induction of decision trees (TDIDT) is an example of a greedy algorithm , and it is by far the most common strategy for learning decision trees from data.

In data mining , decision trees can be described also as the combination of mathematical and computational techniques to aid the description, categorization and generalization of a given set of data.

Data comes in records of the form:

The dependent variable, Y {\displaystyle Y} , is the target variable that we are trying to understand, classify or generalize. The vector x {\displaystyle {\textbf {x}}} is composed of the features, x 1 , x 2 , x 3 {\displaystyle x_{1},x_{2},x_{3}} etc., that are used for that task.

Decision trees used in data mining are of two main types:

The term classification and regression tree (CART) analysis is an umbrella term used to refer to either of the above procedures, first introduced by Breiman et al. in 1984. Trees used for regression and trees used for classification have some similarities – but also some differences, such as the procedure used to determine where to split.

Some techniques, often called ensemble methods, construct more than one decision tree:

A special case of a decision tree is a decision list , which is a one-sided decision tree, so that every internal node has exactly 1 leaf node and exactly 1 internal node as a child (except for the bottommost node, whose only child is a single leaf node).  While less expressive, decision lists are arguably easier to understand than general decision trees due to their added sparsity , permit non-greedy learning methods and monotonic constraints to be imposed.

Notable decision tree algorithms include:

ID3 and CART were invented independently at around the same time (between 1970 and 1980) , yet follow a similar approach for learning a decision tree from training tuples.

It has also been proposed to leverage concepts of fuzzy set theory for the definition of a special version of decision tree, known as Fuzzy Decision Tree (FDT). In this type of fuzzy classification, generally, an input vector x {\displaystyle {\textbf {x}}} is associated with multiple classes, each with a different confidence value.
Boosted ensembles of FDTs have been recently investigated as well, and they have shown performances comparable to those of other very efficient fuzzy classifiers.

Algorithms for constructing decision trees usually work top-down, by choosing a variable at each step that best splits the set of items. Different algorithms use different metrics for measuring "best".  These generally measure the homogeneity of the target variable within the subsets. Some examples are given below. These metrics are applied to each candidate subset, and the resulting values are combined (e.g., averaged) to provide a measure of the quality of the split. Depending on the underlying metric, the performance of various heuristic algorithms for decision tree learning may vary significantly.

A simple and effective metric can be used to identify the degree to which true positives outweigh false positives (see Confusion matrix ). This metric, "Estimate of Positive Correctness" is defined below:

E P = T P − F P {\displaystyle E_{P}=TP-FP}

In this equation, the total false positives (FP) are subtracted from the total true positives (TP). The resulting number gives an estimate on how many positive examples the feature could correctly identify within the data, with higher numbers meaning that the feature could correctly classify more positive samples. Below is an example of how to use the metric when the full confusion matrix of a certain feature is given:

Feature A Confusion Matrix

Here we can see that the TP value would be 8 and the FP value would be 2 (the underlined numbers in the table). When we plug these numbers in the equation we are able to calculate the estimate: E p = T P − F P = 8 − 2 = 6 {\displaystyle E_{p}=TP-FP=8-2=6} . This means that using the estimate on this feature would have it receive a score of 6.

However, it should be worth noting that this number is only an estimate. For example, if two features both had a FP value of 2 while one of the features had a higher TP value, that feature would be ranked higher than the other because the resulting estimate when using the equation would give a higher value. This could lead to some inaccuracies when using the metric if some features have more positive samples than others. To combat this, one could use a more powerful metric known as Sensitivity that takes into account the proportions of the values from the confusion matrix to give the actual true positive rate (TPR). The difference between these metrics is shown in the example below:

In this example, Feature A had an estimate of 6 and a TPR of approximately 0.73 while Feature B had an estimate of 4 and a TPR of 0.75. This shows that although the positive estimate for some feature may be higher, the more accurate TPR value for that feature may be lower when compared to other features that have a lower positive estimate. Depending on the situation and knowledge of the data and decision trees, one may opt to use the positive estimate for a quick and easy solution to their problem. On the other hand, a more experienced user would most likely prefer to use the TPR value to rank the features because it takes into account the proportions of the data and all the samples that should have been classified as positive.

Gini impurity , Gini's diversity index , or Gini-Simpson Index in biodiversity research, is named after Italian mathematician Corrado Gini and used by the CART (classification and regression tree) algorithm for classification trees. Gini impurity measures how often a randomly chosen element of a set would be incorrectly labeled if it were labeled randomly and independently according to the distribution of labels in the set. It reaches its minimum (zero) when all cases in the node fall into a single target category.

For a set of items with J {\displaystyle J} classes and relative frequencies p i {\displaystyle p_{i}} , i ∈ { 1 , 2 , . . . , J } {\displaystyle i\in \{1,2,...,J\}} , the probability of choosing an item with label i {\displaystyle i} is p i {\displaystyle p_{i}} , and the probability of miscategorizing that item is ∑ k ≠ i p k = 1 − p i {\displaystyle \sum _{k\neq i}p_{k}=1-p_{i}} . The Gini impurity is computed by summing pairwise products of these probabilities for each class label:

The Gini impurity is also an information theoretic measure and corresponds to Tsallis Entropy with deformation coefficient q = 2 {\displaystyle q=2} , which in physics is associated with the lack of information in out-of-equilibrium, non-extensive, dissipative and quantum systems. For the limit q → 1 {\displaystyle q\to 1} one recovers the usual Boltzmann-Gibbs or Shannon entropy. In this sense, the Gini impurity is nothing but a variation of the usual entropy measure for decision trees.

Used by the ID3 , C4.5 and C5.0 tree-generation algorithms. Information gain is based on the concept of entropy and information content from information theory .

Entropy is defined as below

where p 1 , p 2 , … {\displaystyle p_{1},p_{2},\ldots } are fractions that add up to 1 and represent the percentage of each class present in the child node that results from a split in the tree.

Averaging over the possible values of A {\displaystyle A} ,

That is, the expected information gain is the mutual information , meaning that on average, the reduction in the entropy of T is the mutual information.

Information gain is used to decide which feature to split on at each step in building the tree. Simplicity is best, so we want to keep our tree small. To do so, at each step we should choose the split that results in the most consistent child nodes. A commonly used measure of consistency is called information which is measured in bits . For each node of the tree, the information value "represents the expected amount of information that would be needed to specify whether a new instance should be classified yes or no, given that the example reached that node".

Consider an example data set with four attributes: outlook (sunny, overcast, rainy), temperature (hot, mild, cool), humidity (high, normal), and windy (true, false), with a binary (yes or no) target variable, play , and 14 data points. To construct a decision tree on this data, we need to compare the information gain of each of four trees, each split on one of the four features. The split with the highest information gain will be taken as the first split and the process will continue until all children nodes each have consistent data, or until the information gain is 0.

To find the information gain of the split using windy , we must first calculate the information in the data before the split. The original data contained nine yes's and five no's.

The split using the feature windy results in two children nodes, one for a windy value of true and one for a windy value of false. In this data set, there are six data points with a true windy value, three of which have a play (where play is the target variable) value of yes and three with a play value of no. The eight remaining data points with a windy value of false contain two no's and six yes's. The information of the windy =true node is calculated using the entropy equation above. Since there is an equal number of yes's and no's in this node, we have

For the node where windy =false there were eight data points, six yes's and two no's. Thus we have

To find the information of the split, we take the weighted average of these two numbers based on how many observations fell into which node.

Now we can calculate the information gain achieved by splitting on the windy feature.

To build the tree, the information gain of each possible first split would need to be calculated. The best first split is the one that provides the most information gain. This process is repeated for each impure node until the tree is complete. This example is adapted from the example appearing in Witten et al.

Information gain is also known as Shannon index in bio diversity research.

Introduced in CART, variance reduction is often employed in cases where the target variable is continuous (regression tree), meaning that use of many other metrics would first require discretization before being applied. The variance reduction of a node N is defined as the total reduction of the variance of the target variable Y due to the split at this node:

where S {\displaystyle S} , S t {\displaystyle S_{t}} , and S f {\displaystyle S_{f}} are the set of presplit sample indices, set of sample indices for which the split test is true, and set of sample indices for which the split test is false, respectively. Each of the above summands are indeed variance estimates, though, written in a form without directly referring to the mean.

By replacing ( y i − y j ) 2 {\displaystyle (y_{i}-y_{j})^{2}} in the formula above with the dissimilarity d i j {\displaystyle d_{ij}} between two objects i {\displaystyle i} and j {\displaystyle j} , the variance reduction criterion applies to any kind of object for which pairwise dissimilarities can be computed.

Used by CART in 1984, the measure of "goodness" is a function that seeks to optimize the balance of a candidate split's capacity to create pure children with its capacity to create equally-sized children. This process is repeated for each impure node until the tree is complete. The function φ ( s ∣ t ) {\displaystyle \varphi (s\mid t)} , where s {\displaystyle s} is a candidate split at node t {\displaystyle t} , is defined as below

where t L {\displaystyle t_{L}} and t R {\displaystyle t_{R}} are the left and right children of node t {\displaystyle t} using split s {\displaystyle s} , respectively; P L {\displaystyle P_{L}} and P R {\displaystyle P_{R}} are the proportions of records in t {\displaystyle t} in t L {\displaystyle t_{L}} and t R {\displaystyle t_{R}} , respectively; and P ( j ∣ t L ) {\displaystyle P(j\mid t_{L})} and P ( j ∣ t R ) {\displaystyle P(j\mid t_{R})} are the proportions of class j {\displaystyle j} records in t L {\displaystyle t_{L}} and t R {\displaystyle t_{R}} , respectively.

Consider an example data set with three attributes: savings (low, medium, high), assets (low, medium, high), income (numerical value), and a binary target variable credit risk (good, bad) and 8 data points. The full data is presented in the table below. To start a decision tree, we will calculate the maximum value of φ ( s ∣ t ) {\displaystyle \varphi (s\mid t)} using each feature to find which one will split the root node. This process will continue until all children are pure or all φ ( s ∣ t ) {\displaystyle \varphi (s\mid t)} values are below a set threshold.

To find φ ( s ∣ t ) {\displaystyle \varphi (s\mid t)} of the feature savings , we need to note the quantity of each value. The original data contained three low's, three medium's, and two high's. Out of the low's, one had a good credit risk while out of the medium's and high's, 4 had a good credit risk . Assume a candidate split s {\displaystyle s} such that records with a low savings will be put in the left child and all other records will be put into the right child.

To build the tree, the "goodness" of all candidate splits for the root node need to be calculated. The candidate with the maximum value will split the root node, and the process will continue for each impure node until the tree is complete.

Compared to other metrics such as information gain, the measure of "goodness" will attempt to create a more balanced tree, leading to more-consistent decision time. However, it sacrifices some priority for creating pure children which can lead to additional splits that are not present with other metrics.

Amongst other data mining methods, decision trees have various advantages:

Many data mining software packages provide implementations of one or more decision tree algorithms (e.g. random forest).

Open source examples include:

Notable commercial software:

In a decision tree, all paths from the root node to the leaf node proceed by way of conjunction, or AND . In a decision graph, it is possible to use disjunctions (ORs) to join two more paths together using minimum message length (MML). Decision graphs have been further extended to allow for previously unstated new attributes to be learnt dynamically and used at different places within the graph. The more general coding scheme results in better predictive accuracy and log-loss probabilistic scoring. In general, decision graphs infer models with fewer leaves than decision trees.

Evolutionary algorithms have been used to avoid local optimal decisions and search the decision tree space with little a priori bias.

It is also possible for a tree to be sampled using MCMC .

The tree can be searched for in a bottom-up fashion. Or several trees can be constructed parallelly to reduce the expected number of tests till classification.