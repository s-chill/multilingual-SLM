Haskell ( / ˈ h æ s k əl / ) is a general-purpose , statically-typed , purely functional programming language with type inference and lazy evaluation . Designed for teaching, research, and industrial applications, Haskell has pioneered several programming language features such as type classes , which enable type-safe operator overloading , and monadic input/output (IO). It is named after logician Haskell Curry . Haskell's main implementation is the Glasgow Haskell Compiler (GHC).

Haskell's semantics are historically based on those of the Miranda programming language, which served to focus the efforts of the initial Haskell working group. The last formal specification of the language was made in July 2010, while the development of GHC continues to expand Haskell via language extensions.

Haskell is used in academia and industry. As of May 2021 , Haskell was the 28th most popular programming language by Google searches for tutorials, and made up less than 1% of active users on the GitHub source code repository.

After the release of Miranda by Research Software Ltd. in 1985, interest in lazy functional languages grew. By 1987, more than a dozen non- strict , purely functional programming languages existed. Miranda was the most widely used, but it was proprietary software . At the conference on Functional Programming Languages and Computer Architecture (FPCA '87) in Portland, Oregon , there was a strong consensus that a committee be formed to define an open standard for such languages. The committee's purpose was to consolidate existing functional languages into a common one to serve as a basis for future research in functional-language design.

Haskell was developed by a committee, attempting to bring together off the shelf solutions where possible.

Type classes , which enable type-safe operator overloading , were first proposed by Philip Wadler and Stephen Blott to address the ad-hoc handling of equality types and arithmetic overloading in languages at the time.

In early versions of Haskell up until and including version 1.2, user interaction and input/output (IO) were handled by both streams based and continuation based mechanisms which were widely considered unsatisfactory. In version 1.3, monadic IO was introduced, along with the generalisation of type classes to higher kinds (type constructors). Along with "do notation", which provides syntactic sugar for the Monad type class, this gave Haskell an effect system that maintained referential transparency and was convenient.

Other notable changes in early versions were the approach to the 'seq' function, which creates a data dependency between values, and is used in lazy languages to avoid excessive memory consumption; with it moving from a type class to a standard function to make refactoring more practical.

The first version of Haskell ("Haskell 1.0") was defined in 1990. The committee's efforts resulted in a series of language definitions (1.0, 1.1, 1.2, 1.3, 1.4).

In late 1997, the series culminated in Haskell 98 , intended to specify a stable, minimal, portable version of the language and an accompanying standard library for teaching, and as a base for future extensions. The committee expressly welcomed creating extensions and variants of Haskell 98 via adding and incorporating experimental features.

In February 1999, the Haskell 98 language standard was originally published as The Haskell 98 Report . In January 2003, a revised version was published as Haskell 98 Language and Libraries: The Revised Report . The language continues to evolve rapidly, with the Glasgow Haskell Compiler (GHC) implementation representing the current de facto standard.

In early 2006, the process of defining a successor to the Haskell 98 standard, informally named Haskell Prime , began. This was intended to be an ongoing incremental process to revise the language definition, producing a new revision up to once per year. The first revision, named Haskell 2010 , was announced in November 2009 and published in July 2010.

Haskell 2010 is an incremental update to the language, mostly incorporating several well-used and uncontroversial features previously enabled via compiler-specific flags.

The next formal specification had been planned for 2020. On 29 October 2021, with GHC version 9.2.1, the GHC2021 extension was released. While this is not a formal language spec, it combines several stable, widely-used GHC extensions to Haskell 2010.

Haskell features lazy evaluation , lambda expressions , pattern matching , list comprehension , type classes and type polymorphism . It is a purely functional programming language, which means that functions generally have no side effects . A distinct construct exists to represent side effects, orthogonal to the type of functions. A pure function can return a side effect that is subsequently executed, modeling the impure functions of other languages.

Haskell has a strong , static type system based on Hindley–Milner type inference . Its principal innovation in this area is type classes, originally conceived as a principled way to add overloading to the language, but since finding many more uses.

The construct that represents side effects is an example of a monad : a general framework which can model various computations such as error handling, nondeterminism , parsing and software transactional memory . They are defined as ordinary datatypes, but Haskell provides some syntactic sugar for their use.

Haskell has an open, published specification, and multiple implementations exist . Its main implementation, the Glasgow Haskell Compiler (GHC), is both an interpreter and native-code compiler that runs on most platforms. GHC is noted for its rich type system incorporating recent innovations such as generalized algebraic data types and type families. The Computer Language Benchmarks Game also highlights its high-performance implementation of concurrency and parallelism .

An active, growing community exists around the language, and more than 5,400 third-party open-source libraries and tools are available in the online package repository Hackage .

A "Hello, World!" program in Haskell (only the last line is strictly necessary):

The factorial function in Haskell, defined in a few different ways (the first line is the type annotation , which is optional and is the same for each implementation):

Using Haskell's Fixed-point combinator allows this function to be written without any explicit recursion.

As the Integer type has arbitrary-precision , this code will compute values such as factorial 100000 (a 456,574-digit number), with no loss of precision.

An implementation of an algorithm similar to quick sort over lists, where the first element is taken as the pivot:

All listed implementations are distributed under open source licenses .

Implementations that fully or nearly comply with the Haskell 98 standard include:

Implementations no longer actively maintained include:

Implementations not fully Haskell 98 compliant, and using a variant Haskell language, include:

Notable web frameworks written for Haskell include:

Jan-Willem Maessen, in 2002, and Simon Peyton Jones , in 2003, discussed problems associated with lazy evaluation while also acknowledging the theoretical motives for it. In addition to purely practical considerations such as improved performance, they note that lazy evaluation makes it more difficult for programmers to reason about the performance of their code (particularly its space use).

Bastiaan Heeren, Daan Leijen, and Arjan van IJzendoorn in 2003 also observed some stumbling blocks for Haskell learners: "The subtle syntax and sophisticated type system of Haskell are a double edged sword—highly appreciated by experienced programmers but also a source of frustration among beginners, since the generality of Haskell often leads to cryptic error messages." To address the error messages researchers from Utrecht University developed an advanced interpreter called Helium , which improved the user-friendliness of error messages by limiting the generality of some Haskell features. In particular it disables type classes by default.

Ben Lippmeier designed Disciple as a strict-by-default (lazy by explicit annotation) dialect of Haskell with a type-and-effect system, to address Haskell's difficulties in reasoning about lazy evaluation and in using traditional data structures such as mutable arrays. He argues (p. 20) that "destructive update furnishes the programmer with two important and powerful tools ... a set of efficient array-like data structures for managing collections of objects, and ... the ability to broadcast a new value to all parts of a program with minimal burden on the programmer."

Robert Harper , one of the authors of Standard ML, has given his reasons for not using Haskell to teach introductory programming. Among these are the difficulty of reasoning about resource use with non-strict evaluation, that lazy evaluation complicates the definition of datatypes and inductive reasoning, and the "inferiority" of Haskell's (old) class system compared to ML's module system.

Haskell's build tool, Cabal , has historically been criticized for poorly handling multiple versions of the same library, a problem known as "Cabal hell". The Stackage server and Stack build tool were made in response to these criticisms. Cabal itself now has a much more sophisticated build system, heavily inspired by Nix , which became the default with version 3.0.

Clean is a close, slightly older relative of Haskell. Its biggest deviation from Haskell is in the use of uniqueness types instead of monads for input/output (I/O) and side effects.

A series of languages inspired by Haskell, but with different type systems, have been developed, including:

Other related languages include:

Notable Haskell variants include:

The Haskell community meets regularly for research and development activities. The main events are:

Starting in 2006, a series of organized hackathons has occurred, the Hac series, aimed at improving the programming language tools and libraries.