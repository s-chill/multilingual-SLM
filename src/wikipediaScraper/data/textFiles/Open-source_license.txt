Open-source licenses are software licenses that allow content to be used, modified, and shared. They facilitate free and open-source software (FOSS) development. Intellectual property (IP) laws restrict the modification and sharing of creative works. Free and open-source licenses use these existing legal structures for an inverse purpose. They grant the recipient the rights to use the software, examine the source code , modify it, and distribute the modifications. These criteria are outlined in the Open Source Definition .

After 1980, the United States began to treat software as a literary work covered by copyright law. Richard Stallman founded the free software movement in response to the rise of proprietary software . The term "open source" was used by the Open Source Initiative (OSI), founded by free software developers Bruce Perens and Eric S. Raymond . "Open source" emphasizes the strengths of the open development model rather than software freedoms. While the goals behind the terms are different, open-source licenses and free software licenses describe the same type of licenses.

The two main categories of open-source licenses are permissive and copyleft . Both grant permission to change and distribute software. Typically, they require attribution and disclaim liability . Permissive licenses come from academia. Copyleft licenses come from the free software movement. Copyleft licenses require derivative works to be distributed with the source code and under a similar license. Since the mid-2000s, courts in multiple countries have upheld the terms of both types of license. Software developers have filed cases as copyright infringement and as breaches of contract.

Intellectual property (IP) is a legal category that treats creative output as property, comparable to private property . Legal systems grant the owner of an IP the right to restrict access in many ways. Owners can sell, lease, gift, or license their properties. Multiple types of IP law cover software including trademarks , patents , and copyrights .

Most countries, including the United States (US), have created copyright laws in line with the Berne Convention . These laws assign a copyright whenever a work is released in any fixed format. Under US copyright law, the initial release is considered an original work . The creator, or their employer, holds the copyright to this original work and therefore has the exclusive right to make copies, release modified versions, distribute copies, perform publicly, or display the work publicly. Modified versions of the original work are derivative works . When a creator modifies an existing work, they hold the copyright to their modifications. Unless the original work was in the public domain, a derivative work can only be distributed with the permission of every copyright holder.

In 1980, the US government amended the law to treat software as a literary work. Software released after this point was  restricted by IP laws. At that time, American activist and programmer Richard Stallman was working as a graduate student at the MIT Computer Science and Artificial Intelligence Laboratory . Stallman witnessed fragmentation among software developers. He blamed the spread of proprietary software and closed models of development. To push back against these trends, Stallman founded the free software movement . Throughout the 1980s, he started the GNU Project to create a free operating system, wrote essays on freedom, founded the Free Software Foundation (FSF), and wrote several free software licenses. The FSF used existing intellectual property laws for the opposite of their intended goal of restriction. Instead of imposing restrictions, free software explicitly provided freedoms to the recipient.

In the 90s, the term "open source" was coined as an alternative label for free software, and specific criteria were laid out to determine which licenses covered free and open-source software. Two active members of the free software community, Bruce Perens and Eric S. Raymond , founded the Open Source Initiative (OSI). At Debian , Perens had proposed the Debian Free Software Guidelines (DFSG). The DFSG were drafted to provide a more specific and objective standard for the FOSS that Debian would host in their repositories. The OSI adopted the DSFG and used them as the basis for their Open Source Definition. The Free Software Foundation maintains a rival set of criteria, the Free Software Definition. Historically, these three organizations and their sets of criteria have been the notable authorities in determining whether a license covers free and open-source software. There is significant diversity among individual licenses but little difference between the rival definitions. The three definitions each require that people receiving covered software must be able to use, modify, and redistribute the covered work.

Eric S. Raymond was a proponent of the term " open source " over "free software". He viewed open source as more appealing to businesses and more reflective of the tangible advantages of FOSS development. One of Raymond's goals was to expand the existing hacker community to include large commercial developers. In The Cathedral and the Bazaar , Raymond compared open-source development to the bazaar , an open-air public market. He argued that aside from ethics, the open model provided advantages that proprietary software could not replicate. Raymond focused heavily on feedback , testing , and bug reports . He contrasted the proprietary model where small pools of secretive workers carried out this work with the development of Linux where the pool of testers included potentially the entire world. He summarized this strength as "Given enough eyeballs, all bugs are shallow." The OSI succeeded in bringing open-source development to corporate developers including Sun Microsystems, IBM , Netscape, Mozilla , Apache , Apple Inc., Microsoft, and Nokia. These companies released code under existing licenses and drafted their own to be approved by the OSI.

Open-source licenses are categorized as copyleft or permissive . Copyleft licenses require derivative works to include source code under a similar license. Permissive licenses do not, and therefore the code can be used within proprietary software. Copyleft can be further divided into strong and weak depending on whether they define derivative works broadly or narrowly.

Licenses focus on copyright law, but code is also covered by other forms of IP. Major open-source licenses written since the late 1990s contain patent grants. These open-source patent grants cover the patents held by the developers. Software patents cover ideas and, rather than a specific implementation, cover any implementation of a claim . Patent claims give the holder the right to exclude others from making, using, selling, or importing products based on the idea. Because patents grant the right to exclude rather than the right to create, it is possible to have a patent on an idea but still be unable to legally implement it if the invention relies on another patented idea. Thus, open-source patent grants can offer permission only from covered patents. They cannot guarantee that a third party has not patented any concepts embodied in the code. The older permissive licenses do not discuss patents directly and offer only implicit patent grants in their offers to use or sell covered material. Newer copyleft licenses and the 2004 Apache License offer explicit patent grants and limited protection from patent litigation. These patent retaliation clauses protect developers by terminating grants for any party who initiates a patent lawsuit regarding covered software.

Trademarks are the only form of IP not shared by free and open-source software. Trademarks on FOSS function the same as any other trademark. A trademark is a design that identifies the distinct source of a product. Because they distinguish products, the same designs can be used in different fields where there is no risk of confusing similar sources. To give up control of a trademark would result in the loss of that trademark. Therefore, no open-source license freely offers the use of a trademark.

Trademark restrictions can overlap copyrights and affect material otherwise freely available. The US Supreme Court described using trademark law to restrict public domain content as "mutant copyright". In Dastar Corp. v. Twentieth Century Fox Film Corp. , the court "caution[ed] against misuse or over-extension of trademark" law without providing a firm decision on those mutant copyrights. Trademark overlap can leave open-source and free content projects vulnerable to a "hostile takeover" if outside parties file for trademarks on derivative works. Notably, Andrey Duskin applied for trademarks on the SCP Foundation , a collaborative writing project, when creating derivative works based on SCP stories.

Permissive licenses , also known as academic licenses, allow recipients to use, modify, and distribute software with no obligation to provide source code. Institutions created these licenses to distribute their creations to the public. Permissive licenses are usually short, often less than a page of text. They impose few conditions . Most include disclaimers of warranty and obligations to credit authors. A few include explicit provisions for patents, trademarks, and other forms of intellectual property.

The University of California, Berkeley created the first open-source license when they began distributing their Berkeley Software Distribution (BSD) operating system. The BSD license and its later variations permit modification and distribution of the covered software. The BSD licenses brought the concept of academic freedom of ideas to computing. Early academic software authors had shared code based on implied promises. Berkeley made these concepts explicit with clear disclaimers for liability and warranty along with conditions, or clauses , for redistribution. The original had four clauses, but subsequent versions have further reduced the restrictions. As a result, it's common to specify if the covered software uses a 2-clause or 3-clause version.

The Massachusetts Institute of Technology (MIT) created an academic license based on the BSD original. The MIT license clarified the conditions by making them more explicit. For example, the MIT license describes the right to sublicense . One of the strengths of open-source development is the continual process where developers can build on the derivative works of each other and combine their projects into collective works. Explicitly making covered code sublicensable provides a legal advantage when tracking the chain of authorship. The BSD and MIT are template licenses that can be adapted to any project. They are widely adapted and used by many FOSS projects.

The Apache License is more comprehensive and explicit. The Apache Software Foundation wrote it for their Apache HTTP Server . Version 2, published in 2004, offers legal advantages over simple licenses and provides similar grants. While the BSD and MIT licenses offer an implicit patent grant, the Apache License includes a section on patents with an explicit grant from contributors. Additionally, it is one of the few permissive licenses with a patent retaliation clause. Patent retaliation, or patent suspension, clauses take effect if a licensee initiates patent infringement litigation on covered code. In that situation, the patent grants are revoked. These clauses protect against patent trolling .

Copyleft licenses require source code to be distributed with software and require the source code to be made available under a similar license. Like the permissive licenses, most copyleft licenses require attribution. Most, including the GPL, disclaim implied warranties.

Copyleft uses the restrictions of IP law—contrary to their usual purpose—to mandate that the code remain open. The term and it's related slogan, "All rights reversed", had been previously used in a playful manner by the Principia Discordia and Tiny BASIC ; the modern usage begins with Richard Stallman's efforts to create a free operating system. In 1984, programmer Don Hopkins mailed a manual to Stallman with a "Copyleft Ⓛ" sticker. Stallman, who was working on the GNU operating system, adopted the term. An early version of copyleft licensing was used for the 1985 release of GNU Emacs . The term became associated with the FSF's later reciprocal licenses, notably the GNU General Public License (GPL).

Traditional, proprietary software licenses are written with the goal of increasing profit , but Stallman wrote the GPL to increase the body of available free software. His reciprocal licenses offer the rights to use, modify, and distribute the work on the condition that people must release derivative works under a license offering these same freedoms. Software built on a copyleft base must come with the source code, and the source code must be available under the same or a similar license. This offers protection against proprietary software consuming code without giving back. Richard Stallman stated that "the central idea of copyleft is to use copyright law, but flip it over to serve the opposite of its usual purpose: instead of a means of privatizing software, [copyright] becomes a means of keeping software free." Free software licenses are also open-source software licenses. The separate terms free software and open-source software reflect different values rather than a legal difference. Both movements and their formal definitions require the covered work to be made available with source code and with permission for modification and redistribution. There are occasional edge cases where only one of the FSF or the OSI accept a license, but the popular free software licenses are open source, including the GPL .

Practical benefits to copyleft licenses have attracted commercial developers. Corporations have used and written reciprocal licenses with a narrower scope than the GPL. For example, Netscape drafted their own copyleft terms after rejecting permissive licenses for the Mozilla project. The GPL remains the most popular license of this type, but there are other significant examples. The FSF has crafted the Lesser General Public License (LGPL) for libraries . Mozilla uses the Mozilla Public License (MPL) for their releases, including Firefox . IBM drafted the Common Public License (CPL) and later adopted the Eclipse Public License (EPL). A difference between the GPL and other reciprocal licenses is how they define derivative works covered by the reciprocal provisions. The GPL, and the Affero License (AGPL) based on it, use a broad scope to describe affected works. The AGPL extends the reciprocal obligation in the GPL to cover software made available over a network. They are called strong copyleft in contrast to the weaker copyleft licenses often used by corporations. Weak copyleft uses narrower, explicit definitions of derivative works. The MPL uses a file-based definition, the CPL and EPL use a module-based definition, and the FSF's own LGPL refers to software libraries.

License compatibility determines how code with different licenses can be distributed together. The goal of open-source licensing is to make the work freely available, but this becomes complicated when working with multiple terminologies imposing different requirements. There are many uncommonly used licenses and some projects write their own bespoke agreements. As a result, this causes more confusion than other legal aspects. When releasing a collection of applications, each license can be considered separately. However, when attempting to combine software, code from another project can only be in-licensed if the project uses compatible terms and conditions.

When combining code bases, the original licenses can be maintained for separate components, and the larger work released under a compatible license. This compatibility is often one-way. Public domain content can be used anywhere as there is no copyright claim, but code acquired under any almost any set of terms cannot be waved to the public domain. Permissive licenses can be used within copyleft works, but copyleft material cannot be released under a permissive license. Some weak copyleft licenses can be used under the GPL and are said to be GPL-compatible. GPL software can only be used under the GPL or AGPL. Permissive licenses are broadly compatible because they can cover separate parts of a project. Multiple licenses including the GPL and Apache License have been revised to enhance compatibility.

Translation issues, ambiguity in licensing terms, and incompatibility of some licenses with the law in certain jurisdictions compound the problem of license compatibility. Downloading an open-source module is straightforward, but complying with the licensing terms can be more difficult. Because of the amount of software dependencies, engineers working on complex projects often rely on license management software to achieve compliance with the licensing terms of open-source components. Many open-source software files do not unambiguously state the license, increasing the difficulties of compliance.

Free and open-source software licenses have been successfully enforced in civil court since the mid-2000s. In a pair of early lawsuits— Jacobsen v. Katzer in the United States and Welte v. Sitecom in Germany—defendants argued that open-source licenses were invalid. Sitecom and Katzer separately argued that the licenses were unenforceable. Both the US and German courts rejected these claims. They ruled that the defendants could not have legally distributed the software if the licenses were unenforceable.

Courts have found that distributing software indicates acceptance of the license's terms. Physical software releases can obtain the consumer's assent with notices placed on shrinkwrap . Online distribution can use clickwrap , a digital equivalent where the user must click to accept. Open-source software has an additional acceptance mechanism. Without permission from the copyright holder, the law prohibits redistribution. Therefore, courts treat redistribution as acceptance of the license terms. These can include attribution provisions or source code provisions for copyleft licenses.

Developers typically achieve compliance without lawsuits. Social pressures, like the potential for community backlash, are often sufficient. Cease and desist letters are a common method to bring companies back into compliance, especially in Germany. A standard process has developed in the German legal system. FOSS developers present companies with a cease and desist letter. These letters outline how to come back into compliance from a violation. German judges can issue a court-mandated cease and desist order to unresponsive companies. Civil cases proceed if these first steps fail. The German procedural laws are clear and favorable to claimants.

Uncertainties remain in how different courts will handle certain aspects of licensing. For software in general, there are debates about what can be patented and what can be copyrighted. Regarding an application programming interface (API), the European Court of Justice noted in the 2012 SAS Institute case that "ideas and principles which underlie [computer program] interfaces are not protected by copyright". In a similar 2021 case , the US Supreme Court permitted the recreation of an API in a transformative product under fair use .

A long-debated subject within the FOSS community is whether open-source licenses are "bare licenses" or contracts . A bare license is a set of conditions under which actions otherwise restricted by IP laws are permitted. Under the bare license interpretation, advocated by the FSF, a case is brought to court by the copyright holder as copyright infringement . Under the contract interpretation, a case can be brought to court by an involved party as a breach of contract . US and French courts have tried cases under both interpretations. Non-profit organizations like FSF and the Software Freedom Conservancy offer to hold the rights to developers' projects to enforce compliance.

When a copyright expires, the work enters the public domain , and is freely available to anyone. Some creative works are not covered by copyright and enter directly into the public domain. In the early history of computing, this applied to software. Early computer software was often given away with hardware. Developed initially at MIT, the pioneering video game Spacewar! was used to market and test the PDP-1 computer.

According to attorney Lawrence Rosen , copyright laws were not written with the expectation that creators would place their work into the public domain. Thus intellectual property laws lack clear paths to waive a copyright. Highly permissive licenses described as "public domain" may legally function as unilateral contracts that offer something but impose no terms.

A public-domain-equivalent license , like the Creative Commons CC0, provides a waiver of copyright claims into the public domain along with a permissive software license as a fallback. In jurisdictions that do not accept a public domain waiver, the permissive license takes effect. Public domain waivers share limitations with simple academic licenses. This creates the possibility that an outside party could attempt to control a public domain work via patent or trademark law. Public domain waivers handle warranties differently from any type of license. Even very permissive ones, like the MIT license, disclaim warranty and liability. Anyone using the free software must accept this disclaimer as a condition. Because public domain content is available to everyone, the copyright waiver cannot impose a disclaimer.

Open-source licenses allow other businesses to commercialize covered software. Work released under a permissive license can be incorporated into proprietary software. Permissive licenses permit the addition of new terms, including proprietary ones. Proprietary software has heavily integrated open-source code released under the Apache, BSD, and MIT licenses. Open core is a business model where developers release a core piece of software as open source and monetize a product containing it as proprietary software. The strong copyleft GPL is written to prevent distribution within proprietary software. Weak copyleft licenses impose specific requirements on derivative works that may allow the covered code to be distributed within proprietary software in certain circumstances.

Cloud computing relies on free and open-source software and avoids the distribution that triggers most licenses. Cloud software is hosted rather than distributed. A vendor hosts the software online, and their end users do not have to download, access, or even know about the code in use. The copyleft GNU Affero General Public License (AGPL) is triggered when covered code is hosted or distributed. Some developers have adopted the AGPL, and others have switched to proprietary licenses with features of open-source licensing. For example, open-core developer Elastic switched from the Apache license to the "source-available" Server Side Public License . Source-available software comes with source code as a reference.

Since 2010, the cloud model has grown in prominence. Developers have criticized cloud companies that profit from hosting open-source software without contributing money or code upstream, comparing the practice to strip mining . Cloud computing leader Amazon Web Services has stated they comply with licenses and act in their customers' best interests.