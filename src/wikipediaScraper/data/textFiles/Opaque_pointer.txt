In computer programming , an opaque pointer is a special case of an opaque data type , a data type declared to be a pointer to a record or data structure of some unspecified type.

Opaque pointers are present in several programming languages including Ada , C , C++ , D and Modula-2 .

If the language is strongly typed , programs and procedures that have no other information about an opaque pointer type T can still declare variables , arrays , and record fields of type T , assign values of that type, and compare those values for equality.  However, they will not be able to de-reference such a pointer, and can only change the object's content by calling some procedure that has the missing information.

Opaque pointers are a way to hide the implementation details of an interface from ordinary clients, so that the implementation may be changed without the need to recompile the modules using it.  This benefits the programmer as well since a simple interface can be created, and most details can be hidden in another file. This is important for providing binary code compatibility through different versions of a shared library , for example.

This technique is described in Design Patterns as the Bridge pattern .  It is sometimes referred to as " handle classes ", the " Pimpl idiom " (for "pointer to implementation idiom"), " Compiler firewall idiom ", " d-pointer" or " Cheshire Cat ", especially among the C++ community.

The type Handle is an opaque pointer to the real implementation, that is not defined in the specification. Note that the type is not only private (to forbid the clients from accessing the type directly, and only through the operations), but also limited (to avoid the copy of the data structure, and thus preventing dangling references).

These types are sometimes called " Taft types "—named after Tucker Taft , the main designer of Ada 95—because they were introduced in the so-called Taft Amendment to Ada 83.

This example demonstrates a way to achieve the information hiding ( encapsulation ) aspect of object-oriented programming using the C language. If someone wanted to change the definition of struct obj , it would be unnecessary to recompile any other modules in the program that use the obj.h header file unless the API was also changed. Note that it may be desirable for the functions to check that the passed pointer is not NULL , but such checks have been omitted above for brevity.

The d-pointer pattern is one of the implementations of the opaque pointer . It is commonly used in C++ classes due to its advantages (noted below). A d-pointer is a private data member of the class that points to an instance of a structure. This method allows class declarations to omit private data members, except for the d-pointer itself. As a result,

One side benefit is that compilations are faster because the header file changes less often. Note, possible disadvantage of d-pointer pattern is indirect member access through pointer (e.g., pointer to object in dynamic storage), which is sometimes slower than access to a plain, non-pointer member. The d-pointer is heavily used in the Qt and KDE libraries.