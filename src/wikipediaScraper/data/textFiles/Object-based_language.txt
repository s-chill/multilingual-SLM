The term object-based language may be used in a technical sense to describe any programming language that uses the idea of encapsulating state and operations inside objects . Object-based languages need not support inheritance or subtyping , but those that do are also termed object-oriented . Object-based languages that do not support inheritance or subtyping are usually not considered to be true object-oriented languages.

Examples of object-oriented languages , in rough chronological order, include Simula , Smalltalk , C++ (which object model is based on Simula's), Objective-C (which object model is based on Smalltalk's), Eiffel , Xojo (formerly REALbasic), Python , Ruby , Java , Visual Basic .NET , C# , and Fortran 2003 . Examples of a language that is object-based, but not object-oriented are early versions of Ada , Visual Basic (VB), and Fortran 90 . These languages all support the definition of an object as a data structure, but lack polymorphism and inheritance.

In practice, the term object-based is usually applied to those object-based languages that are not also object-oriented, although all object-oriented languages are also object-based, by definition. Instead, the terms object-based and object-oriented are normally used as mutually exclusive alternatives, rather than as categories that overlap.

Sometimes, the term object-based is applied to prototype-based programming languages, true object-oriented languages that lack classes, but in which objects instead inherit their code and data directly from other template objects. An example of a commonly used prototype-based scripting language is JavaScript .

Both object-based and object-oriented languages (whether class-based or prototype-based) may be statically type-checked . Statically checking prototype-based languages can be difficult, because these languages often allow objects to be dynamically extended with new behavior, and even to have their parent object (from which they inherit) changed, at runtime .