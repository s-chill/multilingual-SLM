A federated database system ( FDBS ) is a type of meta- database management system (DBMS), which transparently maps multiple autonomous database systems into a single federated database . The constituent databases are interconnected via a computer network and may be geographically decentralized. Since the constituent database systems remain autonomous, a federated database system is a contrastable alternative to the (sometimes daunting) task of merging several disparate databases. A federated database, or virtual database , is a composite of all constituent databases in a federated database system.  There is no actual data integration in the constituent disparate databases as a result of data federation.

Through data abstraction , federated database systems can provide a uniform user interface , enabling users and clients to store and retrieve data from multiple noncontiguous databases with a single query —even if the constituent databases are heterogeneous . To this end, a federated database system must be able to decompose the query into subqueries for submission to the relevant constituent DBMSs , after which the system must composite the result sets of the subqueries. Because various database management systems employ different query languages , federated database systems can apply wrappers to the subqueries to translate them into the appropriate query languages .

McLeod and Heimbigner were among the first to define a federated database system in the mid-1980s.

A FDBS is one which "define[s] the architecture and interconnect[s] databases that minimize central authority yet support partial sharing and coordination among database systems". This description might not accurately reflect the McLeod/Heimbigner definition of a federated database.  Rather, this description fits what McLeod/Heimbigner called a composite database.  McLeod/Heimbigner's federated database is a collection of autonomous components that make their data available to other members of the federation through the publication of an export schema and access operations; there is no unified, central schema that encompasses the information available from the members of the federation.

Among other surveys, practitioners define a Federated Database as a collection of cooperating component systems which are autonomous and are possibly heterogeneous .

The three important components of an FDBS are autonomy, heterogeneity and distribution. Another dimension which has also been considered is the Networking Environment Computer Network , e.g., many DBSs over a LAN or many DBSs over a WAN update related functions of participating DBSs (e.g., no updates, nonatomic transitions, atomic updates ).

A DBMS can be classified as either centralized or distributed. A centralized system manages a single database while distributed manages multiple databases. A component DBS in a DBMS may be centralized or distributed. A multiple DBS (MDBS) can be classified into two types depending on the autonomy of the component DBS as federated and non federated. A nonfederated database system is an integration of component DBMS that are not autonomous.
A federated database system consists of component DBS that are autonomous yet participate in a federation to allow partial and controlled sharing of their data.

Federated architectures differ based on levels of integration with the component database systems and the extent of services offered by the federation. A FDBS can be categorized as loosely or tightly coupled systems.

Multiple DBS of which FDBS are a specific type can be characterized along three dimensions: Distribution, Heterogeneity and Autonomy. Another characterization could be based on the dimension of networking, for example single databases or multiple databases in a LAN or WAN.

Distribution of data in an FDBS is due to the existence of a multiple DBS before an FDBS is built. Data can be distributed among multiple databases which could be stored in a single computer or multiple computers. These computers could be geographically located in different places but interconnected by a network. The benefits of data distribution help in increased availability and reliability as well as improved access times.

Heterogeneities in databases arise due to factors such as differences in structures, semantics of data, the constraints supported or query language . Differences in structure occur when two data models provide different primitives such as object oriented (OO) models that support specialization and inheritance and relational models that do not. Differences due to constraints occur when two models support two different constraints. For example, the set type in CODASYL schema may be partially modeled as a referential integrity constraint in a relationship schema. CODASYL supports insertion and retention that are not captured by referential integrity alone. The query language supported by one DBMS can also contribute to heterogeneity between other component DBMSs . For example, differences in query languages with the same data models or different versions of query languages could contribute to heterogeneity .

Semantic heterogeneities arise when there is a disagreement about meaning, interpretation or intended use of data . At the schema and data level, classification of possible heterogeneities include:

In creating a federated schema, one has to resolve such heterogeneities before integrating the component DB schemas.

Dealing with incompatible data types or query syntax is not the only obstacle to a concrete implementation of an FDBS. In systems that are not planned top-down, a generic problem lies in matching semantically equivalent , but differently named parts from different schemas (=data models) (tables, attributes). A pairwise mapping between n attributes would result in n ( n − 1 ) 2 {\displaystyle n(n-1) \over 2} mapping rules (given equivalence mappings) - a number that quickly gets too large for practical purposes. A common way out is to provide a global schema that comprises the relevant parts of all member schemas and provide mappings in the form of database views . Two principal approaches depend on the direction of the mapping:

Both are examples of data integration , called the schema matching problem.

Fundamental to the difference between an MDBS and an FDBS is the concept of autonomy.  It is important to understand the aspects of autonomy for component databases and how they can be addressed when a component DBS participates in an FDBS.
There are four kinds of autonomies addressed:

Heterogeneities in an FDBS are primarily due to design autonomy.

The ANSI/X3/SPARC Study Group outlined a three level data description architecture, the components of which are the conceptual schema, internal schema and external schema of databases.  The three level architecture is however inadequate to describing the architectures of an FDBS.  It was therefore extended to support the three dimensions of the FDBS namely Distribution, Autonomy and Heterogeneity.  The five level schema architecture is explained below.

The Heterogeneity and Autonomy requirements pose special challenges concerning concurrency control in an FDBS, which is crucial for the correct execution of its concurrent transactions (see also Global concurrency control ). Achieving global serializability , the major correctness criterion, under these requirements has been characterized as very difficult and unsolved.

The five level schema architecture includes the following:

While accurately representing the state of the art in data integration, the Five Level Schema Architecture above does suffer from a major drawback, namely IT imposed look and feel. Modern data users demand control over how data is presented; their needs are somewhat in conflict with such bottom-up approaches to data integration.