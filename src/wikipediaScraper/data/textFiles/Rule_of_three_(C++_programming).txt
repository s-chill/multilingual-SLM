The rule of three and rule of five are rules of thumb in C++ for the building of exception-safe code and for formalizing rules on resource management . The rules prescribe how the default members of a class should be used to achieve these goals systematically.

The rule of three (also known as the law of the big three or the big three ) is a rule of thumb in C++ (prior to C++11 ) that claims that if a class defines any of the following then it should probably explicitly define all three:

These three functions are special member functions . If one of these functions is used without first being declared by the programmer it will be implicitly implemented by the compiler with the following default semantics:

The rule of three claims that if one of these had to be defined by the programmer, it means that the compiler-generated version does not fit the needs of the class in one case and it will probably not fit in the other cases either. The term "Rule of three" was coined by Marshall Cline in 1991.

An amendment to this rule is that if the class is designed in such a way that resource acquisition is initialization (RAII) is used for all its (nontrivial) members, the destructor may be left undefined (also known as The Law of The Big Two ). A ready-to-go example of this approach is the use of smart pointers instead of plain ones.

Because implicitly-generated constructors and assignment operators simply copy all class data members (" shallow copy "), one should define explicit copy constructors and copy assignment operators for classes that encapsulate complex data structures or have external references such as pointers, if you need to copy the objects pointed to by the class members. If the default behavior ("shallow copy") is actually the intended one, then an explicit definition, although redundant, will be " self-documenting code " indicating that it was an intention rather than an oversight. Modern C++ includes a syntax for expressly specifying that a default function is desired without having to type out the function body.

With the advent of C++11 the rule of three can be broadened to the rule of five (also known as "the rule of the big five" ) as C++11 implements move semantics , allowing destination objects to grab (or steal ) data from temporary objects. The following example also shows the new moving members: move constructor and move assignment operator. Consequently, for the rule of five we have the following special members :

Situations exist where classes may need destructors, but cannot sensibly implement copy and move constructors and copy and move assignment operators. This happens, for example, when the base class does not support these latter Big Four members, but the derived class's constructor allocates memory for its own use. In C++11, this can be simplified by explicitly specifying the five members as default.