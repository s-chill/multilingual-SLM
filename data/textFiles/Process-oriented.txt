Process-oriented programming is a programming paradigm that separates the concerns of data structures and the concurrent processes that act upon them. The data structures in this case are typically persistent, complex, and large scale - the subject of general purpose applications, as opposed to specialized processing of specialized data sets seen in high productivity applications (HPC). The model allows the creation of large scale applications that partially share common data sets. Programs are functionally decomposed into parallel processes that create and act upon logically shared data.

The paradigm was originally invented for parallel computers in the 1980s, especially computers built with transputer microprocessors by INMOS , or similar architectures. Occam was an early process-oriented language developed for the Transputer.

Some derivations have evolved from the message passing paradigm of Occam to enable uniform efficiency when porting applications between distributed memory and shared memory parallel computers . The first such derived example appears in the programming language Ease designed at Yale University in 1990. Similar models have appeared since in the loose combination of SQL databases and objected oriented languages such as Java , often referred to as object-relational models and widely used in large scale distributed systems today. The paradigm is likely to appear on desktop computers as microprocessors increase the number of processors ( multicore ) per chip.

The Actor model might usefully be described as a specialized kind of process-oriented system in which the message-passing model is restricted to the simple fixed case of one infinite input queue per process (i.e. actor), to which any other process can send messages.