A software license is a legal instrument governing the use or redistribution of software.

Since the 1970s, software copyright has been recognized in the United States. Despite the copyright being recognized, most companies prefer to sell licenses rather than copies of the software because it enables them to enforce stricter terms on redistribution. Very few purchasers read any part of the license, initially shrink-wrap contracts and now most commonly encountered as clickwrap or browsewrap . The enforceability of this kind of license is a matter of controversy and is limited in some jurisdictions. Service-level agreements are another type of software license where the vendor agrees to provide a level of service to the purchaser, often backed by financial penalties.

Copyleft is a type of free license that mandates derivative works to be licensed. The other types of free license lack this requirement: for permissive licenses , attribution is typically the only requirement, and public-domain-equivalent licenses have no restrictions. The proliferation of open-source licenses has compounded license compatibility issues, but all share some features: allowing redistribution and derivative works under the same license, unrestricted access to the source code ,  and nondiscrimination between different uses—in particular, allowing commercial use.

The source code (or compiled binaries in the form of object code ) of a computer program is protected by copyright law that vests the owner with the exclusive right to copy the code. The underlying ideas or algorithms are not protected by copyright law, but are often treated as a trade secret and concealed by such methods as non-disclosure agreements . Software copyright has been recognized since the mid-1970s and is vested in the company that makes the software, not the employees or contractors who wrote it.

The tendency to license proprietary software , rather than sell it, dates from the time period before the existence, then the scope of software copyright protection was clear . These licenses have continued in use after software copyright was recognized in the courts, and are considered to grant the company extra protection compared to copyright law. According to United States federal law , a company can restrict the parties to which it sells but it cannot prevent a buyer from reselling the product. Software licensing agreements usually prohibit resale, enabling the company to maximize revenue.

Traditionally, software was distributed in the form of binary object code that could not be understood or modified by the user, but could be downloaded and run. The user bought a perpetual license to use a particular version of the software. Software as service (SaaS) vendors—who have the majority market share in application software as of 2023 —rarely offer perpetual licenses. SaaS licenses are usually temporary and charged on a pay-per-usage or subscription basis, although other revenue models such as freemium are also used. For customers, the advantages of temporary licenses include reduced upfront cost, increased flexibility, and lower overall cost compared to a perpetual license. In some cases, the steep one-time cost demanded by sellers of traditional software were out of the reach of smaller businesses , but pay-per-use SaaS models makes the software affordable.

Initially, end-user license agreements (EULAs) were printed on either the shrinkwrap packaging encasing the product (see shrink-wrap contract ) or a piece of paper. The license often stipulated that a customer agreed if they did not return the product within a specified interval. More recently, EULAs are most commonly found as clickwrap or browsewrap where the user's clicks or continued browsing are taken as a sign of agreement. As a result of the end of physical constraints, length increased. Most EULAs have been designed so that it is very difficult to read and understand them, but easy to agree to the licensing terms without reading them. Regardless of how easy it is to access, very few consumers read any part of the license agreement. Most assume the terms are unobjectionable or barely notice agreeing while installing the software. Companies take advantage of consumers' inattention to insert provisions into EULAs.

Proprietary software is usually offered under a restrictive license that bans copying and reuse and often limits the purchaser to using the software on one computer. Source code is rarely available. Derivative software works and reverse engineering are usually explicitly prohibited. Many EULAs allow the vendor to collect information about the user and use it in unrestricted ways. Some EULAs restrict the ability of users to exercise copyright over derivative work made using the software, such as creative creations in the virtual worlds of video games .

Most disclaim any liability for harms caused by the product, and prevent the purchaser from accessing the court system to seek a remedy. Furthermore, many EULAs allow the vendor to change the terms at any time and the customer must choose between agreeing or ceasing use of the product, without getting a refund. It is common for EULAs to allow unilateral termination by the vendor for any number of vague reasons or none at all.

EULAs, almost always offered on a take-it-or-leave-it basis as a non-negotiable condition for using the software, are very far from the prototypical contract where both parties fully understand the terms and agree of their own free will. There has been substantial debate on to what extent the agreements can be considered binding. Before 1996 in the United States, clickwrap or browsewrap licenses were not held to be binding, but since then they often have been. Under the New Digital Content Directive effective in the European Union, EULAs are only enforceable to the extent that they do not breach reasonable consumer expectations. The gap between expectations and the content of EULAs is especially wide when it comes to restrictions on copying and transferring ownership of digital content. Many EULAs contain stipulations  that are likely unenforceable  depending on the jurisdiction. Software vendors keep these unenforceable provisions in the agreements, perhaps because users rarely resort to the legal system to challenge them.

Service-level agreements are often used for enterprise software and guarantee a level of service, such as software performance or time to respond to issue raised by the customer. Many stipulate financial penalties if the service falls short of the agreed standard. SLAs often cover such aspects as availability, reliability, price, and security using quantifiable metrics. Multi-tier SLAs are common in cloud computing because of the use of different computing services that may be managed by different companies. SLAs in cloud computing are an area under active research as of 2024 .

Before the open-source movement in the 1980s, almost all software was proprietary and did not disclose its source code . Open-source licensing is intended to maximize openness and minimize barriers to software use, dissemination, and follow-on innovation.

Open-source licenses share a number of key characteristics:

The Open Source Initiative vets and approves new open-source licenses that comply with its Open Source Definition .

Outside of software, noncommercial-only Creative Commons licenses have become popular among some artists who wish to prevent others from profiting excessively from their work. However, software that is made available for noncommercial use only is not considered open source. Sun Microsystems ' noncommercial-only Java Research License was rejected by the open-source community, and in 2006 the company released most of Java under the GPL.

Since 1989, a variety of open-source licenses for software have been created. Choosing an open-source software license has grown increasingly difficult due to the proliferation of licenses , many of which are only trivially distinct. Many licenses are incompatible with each other, hampering the goals of the free software movement. Translation issues, ambiguity in licensing terms, and incompatibility of some licenses with the law in certain jurisdictions compounds the problem.

Although downloading an open-source module is quick and easy, complying with the licensing terms can be more difficult. The amount of software dependencies means that engineers working on complex projects must often rely on software license management software in order to help them achieve compliance with the licensing terms of open-source components. Many open-source software files do not unambiguously state the license, increasing the difficulties of compliance. When combining code bases, the original licenses can be maintained for separate components, and the larger work released under a compatible license. This compatibility is often one-way. Public domain content can be used anywhere as there is no copyright claim, but code acquired under any almost any set of terms cannot be waved to the public domain. Permissive licenses can be used within copyleft works, but copyleft material cannot be released under a permissive license. Some weak copyleft licenses can be used under the GPL and are said to be GPL-compatible. GPL software can only be used under the GPL or AGPL.

Free and open-source software licenses have been successfully enforced in civil court since the mid-2000s. Courts have found that distributing software indicates acceptance of the license's terms. However, developers typically achieve compliance without lawsuits. Social pressures , like the potential for community backlash, are often sufficient. Cease and desist letters are a common method to bring companies back into compliance, especially in Germany.

A long-debated subject within the FOSS community is whether open-source licenses are "bare licenses" or contracts . A bare license is a set of conditions under which actions otherwise restricted by intellectual property laws are permitted. Under the bare license interpretation, advocated by the Free Software Foundation (FSF), a case is brought to court by the copyright holder as copyright infringement . Under the contract interpretation, a case can be brought to court by an involved party as a breach of contract . United States and French courts have tried cases under both interpretations.

More than 90 percent of companies use open-source software as a component of their proprietary software. The decision to use open-source software, or even engage with open-source projects to improve existing open-source software, is typically a pragmatic business decision. When proprietary software is in direct competition with an open-source alternative, research has found conflicting results on the effect of the competition on the proprietary product's price and quality.

For decades, some companies have made servicing of an open-source software product for enterprise users as their business model. These companies control an open-source software product, and instead of charging for licensing or use, charge for improvements, integration, and other servicing. Software as a service (SaaS) products based on open-source components are increasingly common.

Open-source software is preferred for scientific applications, because it increases transparency and aids in the validation and acceptance of scientific results.