In information retrieval and natural language processing reification is the process by which an abstract idea about a person, place or thing, is turned into an explicit data model or other object created in a programming language, such as a feature set of demographic or psychographic attributes or both. By means of reification, something that was previously implicit, unexpressed, and possibly inexpressible is explicitly formulated and made available to conceptual (logical or computational) manipulation.

The process by which a natural language statement is transformed so actions and events in it become quantifiable variables is semantic parsing . For example "John chased the duck furiously" can be transformed into something like

Another example would be "Sally said John is mean", which could be expressed as something like

Such formal meaning representations allow one to use the tools of classical first-order predicate calculus even for statements which, due to their use of tense, modality, adverbial constructions, propositional arguments ( e.g. "Sally said that X"), etc., would have seemed intractable. This is an advantage because predicate calculus is better understood and simpler than the more complex alternatives (higher-order logics, modal logics, temporal logics, etc.), and there exist better automated tools ( e.g. automated theorem provers and model checkers ) for manipulating it.

Meaning representations can be used for other purposes besides the application of first-order logic; one example is the automatic discovery of synonymous phrases.

The meaning representations are sometimes called quasi-logical forms , and the existential variables are sometimes treated as Skolem constants .

Not all natural language constructs admit a uniform translation to first order logic. See donkey sentence for examples and a discussion.