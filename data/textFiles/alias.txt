In computing , alias is a command in various command-line interpreters ( shells ), which enables a replacement of a word by another string. It is mainly used for abbreviating a system command, or for adding default arguments to a regularly used command. alias is available in Unix shells , AmigaDOS , 4DOS / 4NT , FreeDOS , KolibriOS , Windows PowerShell , ReactOS , and the EFI shell . Aliasing functionality in the MS-DOS and Microsoft Windows operating systems is provided by the DOSKey command-line utility.

An alias will last for the life of the shell session. Regularly used aliases can be set from the shell's rc file (such as .bashrc ) so that they will be available upon the start of the corresponding shell session. The alias commands may either be written in the config file directly or sourced from a  separate file.

In Unix, aliases were introduced in the C shell to survive in descendant shells such as tcsh and bash . C shell aliases were strictly limited to one line. This was useful for creating simple shortcut commands, but not more complex constructs. Older versions of the Bourne shell did not offer aliases, but it did provide functions, which are more powerful than the csh alias concept. The alias concept from csh was imported into Bourne Again Shell (bash) and the Korn shell (ksh). With shells that support both functions and aliases but no parameterized inline shell scripts, the use of functions wherever possible is recommended. Cases where aliases are necessary include situations where chained aliases are required (bash and ksh).
The alias command has also been ported to the IBM i operating system.

Non-persistent aliases can be created by supplying name/value pairs as arguments for the alias command. In Unix shells the syntax is:

The corresponding syntax in the C shell or tcsh shell is:

This alias means that when the command gc is read in the shell, it will be replaced with git commit and that command will be executed instead.

In the 4DOS/4NT shell the following syntax is used to define cp as an alias for the 4DOS copy command:

To create a new alias in Windows PowerShell, the new-alias cmdlet can be used:

This creates a new alias called ci that will be replaced with the copy-item cmdlet when executed.

In PowerShell, an alias cannot be used to specify default arguments for a command. Instead, this must be done by adding items to the collection $PSDefaultParameterValues, one of the PowerShell preference variables.

To view defined aliases the following commands can be used:

In Unix shells, it is possible to override an alias by quoting any character in the alias name when using the alias. For example, consider the following alias definition:

To override this alias and execute the ls command as it was originally defined, the following syntax can be used:

or

In the 4DOS/4NT shell it is possible to override an alias by prefixing it with an asterisk.  For example, consider the following alias definition:

The asterisk in the 2nd instance of dir causes the unaliased dir to be invoked, preventing recursive alias expansion. Also the user can get the unaliased behaviour of dir at the command line by using the same syntax:

In Windows PowerShell, the set verb can be used with the alias cmdlet to change an existing alias:

The alias ci will now point to the cls command.

In the 4DOS/4NT shell, the eset command provides an interactive command line to edit an existing alias:

The /a causes the alias cp to be edited, as opposed to an environment variable of the same name.

In Unix shells and 4DOS/4NT, aliases can be removed by executing the unalias command:

In Windows PowerShell, the alias can be removed from the alias:\ drive using remove-item :

An alias usually replaces just the first word.  But some shells, such as bash and ksh , allow a sequence or words to be replaced. This particular feature is unavailable through the function mechanism.

The usual syntax is to define the first alias with a trailing space character. For instance, using the two aliases:

allows:

for a long listing, where "long" is also evaluated as an alias.

In the C Shell , arguments can be embedded inside the command using the string \!* . For example, with this alias:

ls-more /etc /usr expands to ls /etc /usr | more to list the contents of the directories /etc and /usr, pausing after every screenful. Without \!* ,

would instead expand to ls | more /etc /usr which incorrectly attempts to open the directories in more .

The Bash and Korn shells instead use shell functions — see § Alternatives below.

Aliases should usually be kept simple. Where it would not be simple, the recommendation is usually to use one of the following:

The most common form of aliases, which just add a few options to a command and then include the rest of the command line, can be converted easily to shell functions following this pattern:

To prevent a function from calling itself recursively , use command :

In older Bourne shells use /bin/ls instead of command ls .