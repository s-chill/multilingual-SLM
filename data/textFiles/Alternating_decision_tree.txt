An alternating decision tree (ADTree) is a machine learning method for classification. It generalizes decision trees and has connections to boosting .

An ADTree consists of an alternation of decision nodes, which specify a predicate condition, and prediction nodes, which contain a single number.  An instance is classified by an ADTree by following all paths for which all decision nodes are true, and summing any prediction nodes that are traversed.

ADTrees were introduced by Yoav Freund and Llew Mason. However, the algorithm as presented had several typographical errors.  Clarifications and optimizations were later presented by Bernhard Pfahringer, Geoffrey Holmes and Richard Kirkby. Implementations are available in Weka and JBoost.

Original boosting algorithms typically used either decision stumps or decision trees as weak hypotheses.  As an example, boosting decision stumps creates
a set of T {\displaystyle T} weighted decision stumps (where T {\displaystyle T} is the number of boosting iterations), which then vote on the final classification according to their weights.  Individual decision stumps are weighted according to their ability to classify the data.

Boosting a simple learner results in an unstructured set of T {\displaystyle T} hypotheses, making it difficult to infer correlations between attributes.  Alternating decision trees introduce structure to the set of hypotheses by requiring that they build off a hypothesis that was produced in an earlier iteration.  The resulting set of hypotheses can be visualized in a tree based on the relationship between a hypothesis and its "parent."

Another important feature of boosted algorithms is that the data is given a different distribution at each iteration.  Instances that are misclassified are given a larger weight while accurately classified instances are given reduced weight.

An alternating decision tree consists of decision nodes and prediction nodes. Decision nodes specify a predicate condition. Prediction nodes contain a single number.  ADTrees always have prediction nodes as both root and leaves.  An instance is classified by an ADTree by following all paths for which all decision nodes are true and summing any prediction nodes that are traversed.  This is different from binary classification trees such as CART ( Classification and regression tree ) or C4.5 in which an instance follows only one path through the tree.

The following tree was constructed using JBoost on the spambase dataset (available from the UCI Machine Learning Repository). In this example, spam is coded as 1 and regular email is coded as âˆ’1 .

The following table contains part of the information for a single instance.

The instance is scored by summing all of the prediction nodes through which it passes.  In the case of the instance above, the score is
calculated as

The final score of 0.657 is positive, so the instance is classified as spam.  The magnitude of the value is a measure of confidence in the prediction.  The original authors list three potential levels of interpretation for the set of attributes identified by an ADTree:

Care must be taken when interpreting individual nodes as the scores reflect a re weighting of the data in each iteration.

The inputs to the alternating decision tree algorithm are:

The fundamental element of the ADTree algorithm is the rule.  A single
rule consists of a precondition, a condition, and two scores.  A
condition is a predicate of the form "attribute <comparison> value."
A precondition is simply a logical conjunction of conditions.
Evaluation of a rule involves a pair of nested if statements:

Several auxiliary functions are also required by the algorithm:

The algorithm is as follows:

The set P {\displaystyle {\mathcal {P}}} grows by two preconditions in each iteration, and it is possible to derive the tree structure of a set of rules by making note of the precondition that is used in each successive rule.

Figure 6 in the original paper demonstrates that ADTrees are typically as robust as boosted decision trees and boosted decision stumps .  Typically, equivalent accuracy can be achieved with a much simpler tree structure than recursive partitioning algorithms.