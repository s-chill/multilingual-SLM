A virtual keyboard is a software component that allows the input of characters without the need for physical keys. Interaction with a virtual keyboard happens mostly via a touchscreen interface , but can also take place in a different form when in virtual or augmented reality .

On a desktop computer, a virtual keyboard might provide an alternative input mechanism for users with disabilities who cannot use a conventional keyboard, for multi-lingual users who switch frequently between different character sets or alphabets, which may be confusing over time, or for users who are lacking a traditional keyboard.

Virtual keyboards may utilize the following:

Various JavaScript virtual keyboards have been created on web browsers, allowing users to type their own languages on foreign keyboards. Multitouch screens allow the creation of virtual chorded keyboards for tablet computers , touchscreens, touchpads , and wired gloves .

Virtual keyboards are commonly used as an on-screen input method in devices with no physical keyboard where there is no room for one, such as a pocket computer , personal digital assistant (PDA), tablet computer , or touchscreen -equipped mobile phone . Text is commonly inputted either by tapping a virtual keyboard or finger-tracing. Virtual keyboards are also featured in emulation software for systems that have fewer buttons than a computer keyboard would have.

The four main approaches to enter text into a PDA were: virtual keyboards operated by a stylus, external USB keyboards, handwritten keyboards, and stroke recognition. Microsoft's mobile operating system approach was to simulate a completely functional keyboard, resulting in an overloaded layout. Without support for multi-touch technology, PDA vitural keyboards had usability constraints.

When Apple presented the iPhone in 2007, not including a physical keyboard was seen as a detriment. However, Apple brought the multi-touch technology into the device,  overcoming the usability problems of PDAs.

The most common mobile operating systems, Android and iOS , give the developer community the possibility to individually develop custom virtual keyboards.

The Android SDK provides an "InputMethodService". This service provides a standard implementation of an input method, enabling the Android development community to implement their own keyboard layouts. The InputMethodService ships with it on Keyboard View. While the InputMethodService can be used to customize key and gesture inputs, the Keyboard Class loads an XML description of a keyboard and stores the attributes of the keys.

As a result, it is possible to install different keyboard versions on an Android device, and the keyboard is only an application, most frequently downloaded among them being Gboard and SwiftKey ; a simple activation over the Android settings menu is possible.

Apple 's iOS allows development custom keyboards, but does not give access to the dictionary or general keyboard settings. iOS automatically switches between system and custom keyboards if the user enters text into the text input field.

The UIInputViewController is the primary view controller for a custom keyboard app extension. This controller provides different methods for the implementation of a custom keyboard, such as a user interface for a custom keyboard, obtaining a supplementary lexicon or changing the primary language of a custom keyboard.

Diverse scientific papers at the beginning of the 2000s showed even before the invention of smartphones, that predicting words, based on what the user is typing, assisted in increasing the typing speed. At the beginning of development of this keyboard feature, prediction was mainly based on static dictionaries. Google implemented the predicting method in 2013 in Android 4.4. This development was mainly driven by third party keyboard providers, such as SwiftKey and Swype . In 2014 Apple presented iOS 8 which includes a new predictive typing feature called Quick Type, which displays word predictions above the keyboard as the user types.

Haptic feedback provides for tactile confirmation that a key has been successfully triggered i.e. the user hears and feels a "click" as a key is pressed. Utilizing hysteresis , the feel of a physical key can be emulated to an even greater degree. In this case, there is an initial "click" that is heard and felt as the virtual key is pressed down, but then as finger pressure is reduced once the key is triggered, there is a further "unclick" sound and sensation as if a physical key is respringing back to its original unclicked state. This behaviour is explained in Aleks Oniszczak & Scott Mackenzie's 2004 paper "A Comparison of Two Input Methods for Keypads on Mobile Devices" which first introduced haptic feedback with hysteresis on a virtual keyboard.

Keyboards are needed in different digital areas. smartphones and devices that create virtual worlds, for example, virtual reality or augmented reality glasses, need to provide text input possibilities.

An optical virtual keyboard was invented and patented by IBM engineers in 1992. It optically detects and analyses human hand and finger motions and interprets them as operations on a physically non-existent input device, such as a surface having painted keys. This allows it to emulate unlimited types of manually operated input devices including mouse or keyboard. All mechanical input units can be replaced by such virtual devices, optimized for the current application and for the user's physiology maintaining the speed, simplicity, and unambiguity of manual data input.

One example of this technology is the "Selfie Type" - a keyboard technology for mobile phones made by Samsung Electronics . It was intended to use the front-facing camera (the selfie camera) to track the user's fingers, enabling the user to type on an "invisible keyboard" on a table or another surface in front of the phone. It was introduced at the Consumer Electronics Show 2020 and was expected to be launched in the same year but never did.

The basic idea of a virtual keyboard in an augmented reality environment is to give the user a text input possibility. A common approach is to render a flat keyboard into augmented reality, e.g. using the Unity TouchScreenKeyboard. The Microsoft HoloLens enables the user to point at letters on the keyboard by moving his head.

Another approach was researched by the Korean KJIST U-VR Lab in 2003. Their suggestion was to use wearables to track the finger motion to replace a physical keyboard with virtual ones. They also tried to give audiovisual feedback to the user, when a key got hit. The basic idea was to give the user a more natural way to enter text, based on what he is used to.

The Magic Leap 1 from Magic Leap implements a virtual keyboard with augmented reality.

The challenge, as in augmented reality , is to give the user the possibility to enter text in a completely virtual environment. Most augmented reality systems don't track the hands of the user. So many available systems provide the possibility to point at letters.

In September 2016, Google released a virtual keyboard app for their Daydream virtual reality headset. To enter text, the user points at letters using the controller.

In February 2017, Logitech presented an experimental approach to bring their keyboards into the virtual environment. The Vive Tracker and the Logitech G gaming keyboard track finger movement without wearing a glove. Fifty kits were sent to exclusive developers, enabling them, in combination with Logitech's BRIDGE developers kit, to test and experiment with the new technology.

Virtual keyboards may be used in some cases to reduce the risk of keystroke logging . For example, Westpac 's online banking service uses a virtual keyboard for password entry, as does TreasuryDirect (see picture). It is more difficult for malware to monitor the display and mouse to obtain the data entered via the virtual keyboard than it is to monitor real keystrokes. However, it is possible, for example by recording screenshots at regular intervals or upon each mouse click.

The use of an on-screen keyboard on which the user "types" with mouse clicks can increase the risk of password disclosure by shoulder surfing , because: