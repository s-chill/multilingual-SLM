Application Response Measurement ( ARM ) is an open standard published by the Open Group for monitoring and diagnosing performance bottlenecks within complex enterprise applications that use loosely-coupled designs or service-oriented architectures .

It includes an API for C and Java that allows timing information associated with each step in processing a transaction to be logged to a remote server for later analysis.

Version 1 of ARM was developed jointly by Tivoli Software and Hewlett-Packard in 1996. Version 2 was developed by an industry partnership (the ARM Working Group) and became available in December 1997 as an open standard approved by the Open Group . ARM 4.0 was released in 2003 and revised in 2004.

As of 2007 , ARM 4.1 version 1 is the latest version of the ARM standard.

Current application design tends to be more complex and distributed over networks. This leads to new challenges in today's development and
monitoring tools to provide application developers, system- and application administrators with the information they need.

Within distributed applications it is not easy to estimate if the application performs well. The following issues help in the
evaluation of distributed applications:

ARM helps answer these questions. It's important to mention that the ARM benefits as they are defined here are now just a subset of the Application Performance Management space.

The main approach of using ARM is:

ARM defines the following concepts to provide the described functionality.

Complex distributed applications usually consist of many different single applications (processes). In order to be able to understand the relationship between all single applications the concept of an ARM application is introduced with version 4.0 of the ARM standard. Each ARM transaction is executed exactly within one ARM application.

Transactions are the main concept of the ARM standard and represents a single performance measurement. A transaction definition defines the type (name) and additional attributes of an ARM transaction. A transaction can be executed (started and stopped) several times which results in multiple measurements. Each measurement has basic attributes like status of completion (good, failed, aborted), start and stop timestamp, the resulting duration and the system address (host) it was executed on. Additionally special metrics or context properties can be associated with a transaction measurement.

Uniquely defines a host by its name, IP address or other unique information.

ARM correlators are used to express a correlation between two ARM transactions. This is a synchronous relationship also known as parent-child relationship. Commonly, a parent transaction triggers a child transaction and only continues its execution when the child transaction has finished. Using correlators, it is possible to split a complex transaction into several nested child transactions, where each child transaction can have child transactions of its own. This results in a tree of transactions with the topmost parent transaction being the root of the tree.

ARM 4.1 defines asynchronous relationships to support data flow driven architectures.

ARM Metrics can be used to get more information about the execution of a transaction. ARM defines a set of metric types for different purposes such as a counter, a gauge or just a numeric value.

Properties are a set of so-called nameâ€“value pair strings which qualifies an ARM transaction or an ARM application beyond the
basic definition of these entities and allows to associate additional context information to each transaction measurement.

Defines a name of a user on behalf an transaction measurement was executed.

The following applications are already instrumented with ARM calls: