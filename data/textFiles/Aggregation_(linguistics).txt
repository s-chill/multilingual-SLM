In linguistics , aggregation is a subtask of natural language generation , which involves merging syntactic constituents (such as sentences and phrases ) together.  Sometimes aggregation can be done at a conceptual level.

A simple example of syntactic aggregation is merging the two sentences John went to the shop and John bought an apple into the single sentence John went to the shop and bought an apple .

Syntactic aggregation can be much more complex than this.  For example, aggregation can embed one of the constituents in the other; e.g., we can aggregate John went to the shop and The shop was closed into the sentence John went to the shop, which was closed .

From a pragmatic perspective, aggregating sentences together often suggests to the reader that these sentences are related to each other.  If this is not the case, the reader may be confused.  For example, someone who reads John went to the shop and bought an apple may infer that the apple was bought in the shop; if this is not the case, then these sentences should not be aggregated.

Aggregation algorithms must do two things:

The first issue, deciding when to aggregate, is poorly understood.  Aggegration decisions certainly depend on the semantic relations between the constituents, as mentioned above; they also depend on the genre (e.g., bureaucratic texts tend to be more aggregated than instruction manuals).  They probably should depend on rhetorical and discourse structure. The literacy level of the reader is also probably important (poor readers need shorter sentences). But we have no integrated model which brings all these factors together into a single algorithm .

With regard to the second issue, there have been some studies of different types of aggregation, and how they should be carried out.  Harbusch and Kempen describe several syntactic aggregation strategies.  In their terminology, John went to the shop and bought an apple is an example of forward conjunction Reduction Much less is known about conceptual aggregation.  Di Eugenio et al. show how conceptual aggregation can be done in an intelligent tutoring system, and demonstrate that performing such aggregation makes the system more effective (and that conceptual aggregation make a bigger impact than syntactic aggregation).

Unfortunately there is not much software available for performing aggregation. However the SimpleNLG system does include limited support for basic aggregation.  For example, the following code causes SimpleNLG to print out The man is hungry and buys an apple .