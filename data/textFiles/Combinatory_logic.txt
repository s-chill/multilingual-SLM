Combinatory logic is a notation to eliminate the need for quantified variables in mathematical logic . It was introduced by Moses Schönfinkel and Haskell Curry , and has more recently been used in computer science as a theoretical model of computation and also as a basis for the design of functional programming languages . It is based on combinators , which were introduced by Schönfinkel in 1920 with the idea of providing an analogous way to build up functions—and to remove any mention of variables—particularly in predicate logic .  A combinator is a higher-order function that uses only function application and earlier defined combinators to define a result from its arguments.

Combinatory logic was originally intended as a 'pre-logic' that would clarify the role of quantified variables in logic, essentially by eliminating them. Another way of eliminating quantified variables is Quine's predicate functor logic . While the expressive power of combinatory logic typically exceeds that of first-order logic , the expressive power of predicate functor logic is identical to that of first order logic ( Quine 1960, 1966, 1976 ).

The original inventor of combinatory logic, Moses Schönfinkel , published nothing on combinatory logic after his original 1924 paper. Haskell Curry rediscovered the combinators while working as an instructor at Princeton University in late 1927. In the late 1930s, Alonzo Church and his students at Princeton invented a rival formalism for functional abstraction, the lambda calculus , which proved more popular than combinatory logic. The upshot of these historical contingencies was that until theoretical computer science began taking an interest in combinatory logic in the 1960s and 1970s, nearly all work on the subject was by Haskell Curry and his students, or by Robert Feys in Belgium . Curry and Feys (1958), and Curry et al. (1972) survey the early history of combinatory logic. For a more modern treatment of combinatory logic and the lambda calculus together, see the book by Barendregt , which reviews the models Dana Scott devised for combinatory logic in the 1960s and 1970s.

In computer science , combinatory logic is used as a simplified model of computation , used in computability theory and proof theory . Despite its simplicity, combinatory logic captures many essential features of computation.

Combinatory logic can be viewed as a variant of the lambda calculus , in which lambda expressions (representing functional abstraction) are replaced by a limited set of combinators , primitive functions without free variables . It is easy to transform lambda expressions into combinator expressions, and combinator reduction is much simpler than lambda reduction. Hence combinatory logic has been used to model some non-strict functional programming languages and hardware . The purest form of this view is the programming language Unlambda , whose sole primitives are the S and K combinators augmented with character input/output. Although not a practical programming language, Unlambda is of some theoretical interest.

Combinatory logic can be given a variety of interpretations. Many early papers by Curry showed how to translate axiom sets for conventional logic into combinatory logic equations. Dana Scott in the 1960s and 1970s showed how to marry model theory and combinatory logic.

Lambda calculus is concerned with objects called lambda-terms , which can be represented by the following three forms of strings:

where ⁠ v {\displaystyle v} ⁠ is a variable name drawn from a predefined infinite set of variable names, and ⁠ E 1 {\displaystyle E_{1}} ⁠ and ⁠ E 2 {\displaystyle E_{2}} ⁠ are lambda-terms.

Terms of the form ⁠ λ v . E 1 {\displaystyle \lambda v.E_{1}} ⁠ are called abstractions . The variable v is called the formal parameter of the abstraction, and ⁠ E 1 {\displaystyle E_{1}} ⁠ is the body of the abstraction. The term ⁠ λ v . E 1 {\displaystyle \lambda v.E_{1}} ⁠ represents the function which, applied to an argument, binds the formal parameter v to the argument and then computes the resulting value of ⁠ E 1 {\displaystyle E_{1}} ⁠ — that is, it returns ⁠ E 1 {\displaystyle E_{1}} ⁠ , with every occurrence of v replaced by the argument.

Terms of the form ⁠ ( E 1 E 2 ) {\displaystyle (E_{1}E_{2})} ⁠ are called applications . Applications model function invocation or execution: the function represented by ⁠ E 1 {\displaystyle E_{1}} ⁠ is to be invoked, with ⁠ E 2 {\displaystyle E_{2}} ⁠ as its argument, and the result is computed. If ⁠ E 1 {\displaystyle E_{1}} ⁠ (sometimes called the applicand ) is an abstraction, the term may be reduced : ⁠ E 2 {\displaystyle E_{2}} ⁠ , the argument, may be substituted into the body of ⁠ E 1 {\displaystyle E_{1}} ⁠ in place of the formal parameter of ⁠ E 1 {\displaystyle E_{1}} ⁠ , and the result is a new lambda term which is equivalent to the old one. If a lambda term contains no subterms of the form ⁠ ( ( λ v . E 1 ) E 2 ) {\displaystyle ((\lambda v.E_{1})E_{2})} ⁠ then it cannot be reduced, and is said to be in normal form .

The expression ⁠ E [ v := a ] {\displaystyle E[v:=a]} ⁠ represents the result of taking the term E and replacing all free occurrences of v in it with a . Thus we write

By convention, we take ⁠ ( a b c ) {\displaystyle (abc)} ⁠ as shorthand for ⁠ ( ( a b ) c ) {\displaystyle ((ab)c)} ⁠ (i.e., application is left associative ).

The motivation for this definition of reduction is that it captures the essential behavior of all mathematical functions. For example, consider the function that computes the square of a number. We might write

(Using " ⁠ ∗ {\displaystyle *} ⁠ " to indicate multiplication.) x here is the formal parameter of the function. To evaluate the square for a particular argument, say 3, we insert it into the definition in place of the formal parameter:

To evaluate the resulting expression ⁠ 3 ∗ 3 {\displaystyle 3*3} ⁠ , we would have to resort to our knowledge of multiplication and the number 3. Since any computation is simply a composition of the evaluation of suitable functions on suitable primitive arguments, this simple substitution principle suffices to capture the essential mechanism of computation.
Moreover, in lambda calculus, notions such as '3' and ' ⁠ ∗ {\displaystyle *} ⁠ ' can be represented without any need for externally defined primitive operators or constants. It is possible to identify terms in lambda calculus, which, when suitably interpreted, behave like the number 3 and like the multiplication operator, q.v. Church encoding .

Lambda calculus is known to be computationally equivalent in power to many other plausible models for computation (including Turing machines ); that is, any calculation that can be accomplished in any of these other models can be expressed in lambda calculus, and vice versa. According to the Church–Turing thesis , both models can express any possible computation.

It is perhaps surprising that lambda-calculus can represent any conceivable computation using only the simple notions of function abstraction and application based on simple textual substitution of terms for variables. But even more remarkable is that abstraction is not even required. Combinatory logic is a model of computation equivalent to lambda calculus, but without abstraction. The advantage of this is that evaluating expressions in lambda calculus is quite complicated because the semantics of substitution must be specified with great care to avoid variable capture problems.  In contrast, evaluating expressions in combinatory logic is much simpler, because there is no notion of substitution.

Since abstraction is the only way to manufacture functions in the lambda calculus, something must replace it in the combinatory calculus. Instead of abstraction, combinatory calculus provides a limited set of primitive functions out of which other functions may be built.

A combinatory term has one of the following forms:

The primitive functions are combinators , or functions that, when seen as lambda terms, contain no free variables .

To shorten the notations, a general convention is that ⁠ ( E 1 E 2 E 3 . . . E n ) {\displaystyle (E_{1}E_{2}E_{3}...E_{n})} ⁠ , or even ⁠ E 1 E 2 E 3 . . . E n {\displaystyle E_{1}E_{2}E_{3}...E_{n}} ⁠ , denotes the term ⁠ ( . . . ( ( E 1 E 2 ) E 3 ) . . . E n ) {\displaystyle (...((E_{1}E_{2})E_{3})...E_{n})} ⁠ . This is the same general convention (left-associativity) as for multiple application in lambda calculus.

In combinatory logic, each primitive combinator comes with a reduction rule of the form

where E is a term mentioning only variables from the set { x 1 ... x n } . It is in this way that primitive combinators behave as functions.

The simplest example of a combinator is I , the identity combinator, defined by

for all terms x .  Another simple combinator is K , which manufactures constant functions:  ( K x ) is the function which, for any argument, returns x , so we say

for all terms x and y .  Or, following the convention for multiple application,

A third combinator is S , which is a generalized version of application:

S applies x to y after first substituting z into
each of them. Or put another way, x is applied to y inside the environment z .

Given S and K , I itself is unnecessary, since it can be built from the other two:

for any term x .  Note that although (( S K K ) x ) = ( I x ) for any x , ( S K K )
itself is not equal to I .  We say the terms are extensionally equal .  Extensional equality captures the mathematical notion of the equality of functions: that two functions are equal if they always produce the same results for the same arguments.  In contrast, the terms themselves, together with the reduction of primitive combinators, capture the notion of intensional equality of functions: that two functions are equal only if they have identical implementations up to the expansion of primitive combinators.  There are many ways to implement an identity function; ( S K K ) and I are among these ways.  ( S K S ) is yet another. We will use the word equivalent to indicate extensional equality, reserving equal for identical combinatorial terms.

A more interesting combinator is the fixed point combinator or Y combinator, which can be used to implement recursion .

S and K can be composed to produce combinators that are extensionally equal to any lambda term, and therefore, by Church's thesis, to any computable function whatsoever. The proof is to present a transformation, T [ ] , which converts an arbitrary lambda term into an equivalent combinator.

T [ ] may be defined as follows:

Note that T [ ] as given is not a well-typed mathematical function, but rather a term rewriter: Although it eventually yields a combinator, the transformation may generate intermediary expressions that are neither lambda terms nor combinators, via rule (5).

This process is also known as abstraction elimination . This definition is exhaustive: any lambda expression will be subject to exactly one of these rules (see Summary of lambda calculus above).

It is related to the process of bracket abstraction , which takes an expression E built from variables and application and produces a combinator expression [x]E in which the variable x is not free, such that [ x ] E x = E holds. A very simple algorithm for bracket abstraction is defined by induction on the structure of expressions as follows:

Bracket abstraction induces a translation from lambda terms to combinator expressions, by interpreting lambda-abstractions using the bracket abstraction algorithm.

For example, we will convert the lambda term λx . λy .( y x ) to a combinatorial term:

If we apply this combinatorial term to any two terms x and y (by feeding them in a queue-like fashion into the combinator 'from the right'), it reduces as follows:

The combinatory representation, ( S ( K ( S I )) ( S ( K K ) I )) is much longer than the representation as a lambda term, λx . λy .(y x).  This is typical. In general, the T [ ] construction may expand a lambda term of length n to a combinatorial term of length Θ ( n ).

The T [ ] transformation is motivated by a desire to eliminate abstraction. Two special cases, rules 3 and 4, are trivial: λx . x is clearly equivalent to I , and λx . E is clearly equivalent to ( K T [ E ]) if x does not appear free in E .

The first two rules are also simple: Variables convert to themselves, and applications, which are allowed in combinatory terms, are converted to combinators simply by converting the applicand and the argument to combinators.

It is rules 5 and 6 that are of interest.  Rule 5 simply says that to convert a complex abstraction to a combinator, we must first convert its body to a combinator, and then eliminate the abstraction.  Rule 6 actually eliminates the abstraction.

λx .( E ₁ E ₂) is a function which takes an argument, say a , and substitutes it into the lambda term ( E ₁ E ₂) in place of x , yielding ( E ₁ E ₂)[ x : = a ]. But substituting a into ( E ₁ E ₂) in place of x is just the same as substituting it into both E ₁ and E ₂, so

By extensional equality,

Therefore, to  find  a combinator equivalent to λx .( E ₁ E ₂), it is sufficient to find a combinator equivalent to ( S λx . E ₁ λx . E ₂), and

evidently fits the bill. E ₁ and E ₂ each contain strictly fewer applications than ( E ₁ E ₂), so the recursion must terminate in a lambda term with no applications at all—either a variable, or a term of the
form λx . E .

The combinators generated by the T [ ] transformation can be made smaller if we take into account the η-reduction rule:

λx .( E x) is the function which takes an argument, x , and applies the function E to it; this is extensionally equal to the function E itself. It is therefore sufficient to convert E to combinatorial form.

Taking this simplification into account, the example above becomes:

This combinator is equivalent to the earlier, longer one:

Similarly, the original version of the T [ ] transformation transformed the identity function λf . λx .( f x ) into ( S ( S ( K S ) ( S ( K K ) I )) ( K I )).  With the η-reduction rule, λf . λx .( f x ) is
transformed into I .

There are one-point bases from which every combinator can be composed extensionally equal to any lambda term. The simplest example of such a basis is { X } where:

It is not difficult to verify that:

Since { K , S } is a basis, it follows that { X } is a basis too. The Iota programming language uses X as its sole combinator.

Another simple example of a one-point basis is:

In fact, there exist infinitely many such bases.

In addition to S and K , Schönfinkel (1924) included two combinators which are now called B and C , with the following reductions:

He also explains how they in turn can be expressed using only S and K :

These combinators are extremely useful when translating predicate logic or lambda calculus into combinator expressions. They were also used by Curry , and much later by David Turner , whose name has been associated with their computational use. Using them, we can extend the rules for the transformation as follows:

Using B and C combinators, the transformation of λx . λy .( y x ) looks like this:

And indeed, ( C I x y ) does reduce to ( y x ):

The motivation here is that B and C are limited versions of S . Whereas S takes a value and substitutes it into both the applicand and its argument before performing the application, C performs the
substitution only in the applicand, and B only in the argument.

The modern names for the combinators come from Haskell Curry 's doctoral thesis of 1930 (see B, C, K, W System ). In Schönfinkel 's original paper, what we now call S , K , I , B and C were called S , C , I , Z , and T respectively.

The reduction in combinator size that results from the new transformation rules can also be achieved without introducing B and C , as demonstrated in Section 3.2 of Tromp (2008) .

A distinction must be made between the CL K as described in this article and the CL I calculus. The distinction corresponds to that between the λ K and the λ I calculus. Unlike the λ K calculus, the λ I calculus restricts abstractions to:

As a consequence, combinator K is not present in the λ I calculus nor in the CL I calculus. The constants of CL I are: I , B , C and S , which form a basis from which all CL I terms can be composed (modulo equality). Every λ I term can be converted into an equal CL I combinator according to rules similar to those presented above for the conversion of λ K terms into CL K combinators. See chapter 9 in Barendregt (1984).

The conversion L [ ] from combinatorial terms to lambda terms is trivial:

Note, however, that this transformation is not the inverse
transformation of any of the versions of T [ ] that we have seen.

A normal form is any combinatory term in which the primitive combinators that occur, if any, are not applied to enough arguments to be simplified. It is undecidable whether a general combinatory term has a normal form; whether two combinatory terms are equivalent, etc. This can be shown in a similar way as for the corresponding problems for lambda terms.

The undecidable problems above (equivalence, existence of normal form, etc.) take as input syntactic representations of terms under a suitable encoding (e.g., Church encoding). One may also consider a toy trivial computation model where we "compute" properties of terms by means of combinators applied directly to the terms themselves as arguments, rather than to their syntactic representations. More precisely, let a predicate be a combinator that, when applied,  returns either T or F (where T and F represent the conventional Church encodings of true and false, λx . λy . x and λx . λy . y , transformed into combinatory logic; the combinatory versions have T = K and F = ( K I ) ). A predicate N is nontrivial if there are two arguments A and B such that N A = T and N B = F . A combinator N is complete if N M has a normal form for every argument M .  An analogue of Rice's theorem for this toy model then says that every complete predicate is trivial. The proof of this theorem is rather simple.

By reductio ad absurdum. Suppose there is a complete non trivial predicate, say N . Because N is supposed to be non trivial there are combinators A and B such that

Fixed point theorem gives: ABSURDUM = (NEGATION ABSURDUM), for

Because N is supposed to be complete either:

Hence ( N ABSURDUM) is neither T nor F , which contradicts the presupposition that N would be a complete non trivial predicate. Q.E.D.

From this undefinability theorem it immediately follows that there is no complete predicate that can discriminate between terms that have a normal form and terms that do not have a normal form. It also follows that there is no complete predicate, say EQUAL, such that:

If EQUAL would exist, then for all A , λx. (EQUAL x A ) would have to be a complete non trivial predicate.

However, note that it also immediately follows from this undefinability theorem that many properties of terms that are obviously decidable are not definable by complete predicates either: e.g., there is no predicate that could tell whether the first primitive function letter occurring in a term is a K . This shows that definability by predicates is a not a reasonable model of decidability.

David Turner used his combinators to implement the SASL programming language .

Kenneth E. Iverson used primitives based on Curry's combinators in his J programming language , a successor to APL . This enabled what Iverson called tacit programming , that is, programming in functional expressions containing no variables, along with powerful tools for working with such programs. It turns out that tacit programming is possible in any APL-like language with user-defined operators.

The Curry–Howard isomorphism implies a connection between logic and programming: every proof of a theorem of intuitionistic logic corresponds to a reduction of a typed lambda term, and conversely. Moreover, theorems can be identified with function type signatures. Specifically, a typed combinatory logic corresponds to a Hilbert system in proof theory .

The K and S combinators correspond to the axioms

and function application corresponds to the detachment (modus ponens) rule

The calculus consisting of AK , AS , and MP is complete for the implicational fragment of the intuitionistic logic, which can be seen as follows. Consider the set W of all deductively closed sets of formulas, ordered by inclusion . Then ⟨ W , ⊆ ⟩ {\displaystyle \langle W,\subseteq \rangle } is an intuitionistic Kripke frame , and we define a model ⊩ {\displaystyle \Vdash } in this frame by

This definition obeys the conditions on satisfaction of →: on one hand, if X ⊩ A → B {\displaystyle X\Vdash A\to B} , and Y ∈ W {\displaystyle Y\in W} is such that Y ⊇ X {\displaystyle Y\supseteq X} and Y ⊩ A {\displaystyle Y\Vdash A} , then Y ⊩ B {\displaystyle Y\Vdash B} by modus ponens. On the other hand, if X ⊮ A → B {\displaystyle X\not \Vdash A\to B} , then X , A ⊬ B {\displaystyle X,A\not \vdash B} by the deduction theorem , thus the deductive closure of X ∪ { A } {\displaystyle X\cup \{A\}} is an element Y ∈ W {\displaystyle Y\in W} such that Y ⊇ X {\displaystyle Y\supseteq X} , Y ⊩ A {\displaystyle Y\Vdash A} , and Y ⊮ B {\displaystyle Y\not \Vdash B} .

Let A be any formula which is not provable in the calculus. Then A does not belong to the deductive closure X of the empty set, thus X ⊮ A {\displaystyle X\not \Vdash A} , and A is not intuitionistically valid.