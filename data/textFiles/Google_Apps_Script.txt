Google Apps Script is a scripting platform developed by Google for light-weight application development in the Google Workspace platform. Google Apps Script was initially developed by Mike Harm as a side project while working as a developer on Google Sheets .

The primary function of Google Apps Script is to facilitate the creation of custom tools for organizations, primarily focusing on automating tasks and simplifying system administration processes. It supports a community-based model for user support.

Google Apps Script was first publicly announced in May 2009 when a beta testing program was announced by Jonathan Rochelle, then Product Manager for Google Docs . In August 2009, Google Apps Script was subsequently made available to all Google Apps Premier and Education Edition customers.

Until 2020, Google Apps Script was based on Mozilla 's Rhino JavaScript (JS) interpreter, which limited its JS language support to version 1.6, with a subset of the ECMAScript 5 API. In March 2020, Google announced the introduction of the V8 JS runtime , bringing with it full support of modern ECMAScript except for JS modules.

The development environment for Google Apps Script is hosted in the cloud, with an IDE with a debugger for developing scripts directly within a web browser. The infrastructure provided by Google serves as the execution environment for Apps Script projects. This platform enables the automation of tasks across Google services and integration with third-party applications. Additionally, Google Apps Script facilitates the development of add-ons for Google Docs, Sheets, and Slides, enhancing their functionality.

Google Apps Script has some processing limitations. As a cloud-based service, Apps Script limits the time that a user's script may run, as well as limiting access to Google services. Currently, the Google Apps Store does not allow direct connections to internal (behind-the-firewall) corporate databases, which is key to building business apps. However, this can be overcome via the use of the JDBC service if connections are allowed from Google servers to the internal database server. Similarly, lack of other connectivity, such as LDAP connectivity, limits the level to which GAS can be used in the enterprise. Due to the cloud nature of Apps Script, functions related to date and time will produce results that seem to be incorrect due to the data crossing time zones . Using Date/Time objects and functions without very precise declaration and thorough testing may result in inaccurate results.

In March 2014, Google introduced add-ons for Docs and Sheets (soon followed by Forms). The add-on stores let users add extra features to Google editors, such as mail-merging, workflows, and diagram builders. All add-ons are either 100% built with Apps Script or simply use Apps Script to display a UI in the Google editors while relying on an external back-end to perform some tasks. For example, MailChimp, a mail-merging tool, has an add-on for Google Docs that communicates with MailChimp platform to send emails.

Before add-ons, it was possible to publish scripts for Google Sheets in the Script Gallery. When users installed scripts through this gallery, a copy of the Apps Script code was installed on the user's Sheet. With add-ons, the source code is not visible to the end user, and everyone is using the latest version published by the developer. This new approach makes it easier to support existing code and helped convince several companies, such as MailChimp or Lucidchart to invest in Apps Script.

As part of the add-ons release, Google also introduced a UI Style Guide and CSS package to help developers build add-ons that integrate into the editors. Each add-on is also reviewed by Google before its publication, and developers can benefit from advice from Googlers to provide a better user experience. It is not possible to embed ads in add-ons but it is possible to monetize them.