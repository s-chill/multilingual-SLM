Mobile app development is the act or process by which a mobile app is developed for one or more mobile devices , which can include personal digital assistants (PDA), enterprise digital assistants (EDA), or mobile phones . Such software applications are specifically designed to run on mobile devices, taking numerous hardware constraints into consideration. Common constraints include CPU architecture and speeds, available memory (RAM), limited data storage capacities, and considerable variation in displays (technology, size, dimensions, resolution) and input methods (buttons, keyboards, touch screens with or without styluses). These applications (or 'apps') can be pre-installed on phones during manufacturing or delivered as web applications, using server-side or client-side processing (e.g., JavaScript) to provide an "application-like" experience within a web browser .

The mobile app development sector has experienced significant growth in Europe. A 2017 report from the Progressive Policy Institute estimated there were 1.89 million jobs in the app economy across the EU by January 2017, marking a 15% increase from the previous year. These jobs include roles such as mobile app developers and other positions supporting the app economy.

In order to facilitate the development of applications for mobile devices, and the consistency thereof, various approaches have been taken.

Most companies that ship a product (e.g. Apple, iPod/iPhone/iPad) provide an official software development kit (SDK). They may also opt to provide some form of Testing and/or Quality Assurance (QA). In exchange for being provided the SDK or other tools, it may be necessary for a prospective developer to sign some form of non-disclosure agreement, or NDA, which restricts the sharing of privileged information.

As part of the development process, mobile user interface (UI) design is an essential step in the creation of mobile apps. Mobile UI designers consider constraints, contexts, screen space, input methods, and mobility as outlines for design. Constraints in mobile UI design, which include the limited attention span of the user and form factors such as a mobile device's screen size for a user's hand(s). Mobile UI context includes signal cues from user activity, such as the location where or the time when the device is in use, that can be observed from user interactions within a mobile app. Such context clues can be used to provide automatic suggestions when scheduling an appointment or activity or to filter a list of various services for the user.

The user is often the focus of interaction with their device, and the interface entails components of both hardware and software. User input allows for the users to manipulate a system, and the device's output allows the system to indicate the effects of the users' manipulation.

Overall, mobile UI design's goal is mainly for an understandable, user-friendly interface. Functionality is supported by mobile enterprise application platforms or integrated development environments (IDEs).

Developers of mobile applications must also consider a large array of devices with different screen sizes, hardware specifications, and configurations because of intense competition in mobile hardware and changes within each of the platforms.

Today, mobile apps are usually distributed via an official online outlet or marketplace (e.g. Apple - The App Store, Google - Google Play) and there is a formalized process by which developers submit their apps for approval and inclusion in those marketplaces. Historically, however, that was not always the case.

Mobile UIs, or front-ends, rely on mobile back-ends to support access to enterprise systems.  The mobile back-end facilitates data routing, security, authentication, authorization, working off-line, and service orchestration. This functionality is supported by a mix of middleware components, including mobile app servers, mobile backend as a service (MBaaS), and service-oriented architecture (SOA) infrastructure.

The software development packages needed to develop, deploy, and manage mobile apps are made from many components and tools which allow a developer to write, test, and deploy applications for one or more target platforms.

Front-end development tools are focused on the user interface and user experience (UI-UX) and provide the following abilities:

Notable tools are listed below.

First party tools include official SDKs published by, or on behalf of, the company responsible for the
design of a particular hardware platform (e.g. Apple, Google, etc) as well as any third-party software that is officially supported for the purpose of developing mobile apps for that hardware.

Back-end tools pick up where the front-end tools leave off, and provide a set of reusable services that are centrally managed and controlled and provide the following abilities:

Available tools are listed below.

With bring your own device (BYOD) becoming the norm within more enterprises, IT departments often need stop-gap, tactical solutions that layer atop existing apps, phones, and platform component. Features include

Many system-level components are needed to have a functioning platform for developing mobile apps.

Criteria for selecting a development platform usually include the target mobile platforms, existing infrastructure, and development skills. When targeting more than one platform with cross-platform development, it is also important to consider the impact of the tool on the user experience .  Performance is another important criterion, as research on mobile apps indicates a strong correlation between application performance and user satisfaction. Along with performance and other criteria, the availability of the technology and the project's requirements may drive the development between native and cross-platform environments.  To aid the choice between native and cross-platform environments, some guidelines and benchmarks have been published. Typically, cross-platform environments are reusable across multiple platforms, leveraging a native container while using HTML, CSS, and JavaScript for the user interface. In contrast, native environments are targeted at one platform for each of those environments. For example, Android development occurs in the Eclipse IDE using Android Developer Tools (ADT) plugins, Apple iOS development occurs using the Xcode IDE with Objective-C and/or Swift, Windows and BlackBerry each have their own development environments.

Mobile applications are first tested within the development environment using emulators and later subjected to field testing . Emulators provide an inexpensive way to test applications on mobile phones to which developers may not have physical access. The following are examples of tools used for testing applications across the most popular mobile operating systems .

Tools include

According to a 2020 Industry Report on Applications, 46% of mobile app users have stated that they have stopped using or uninstalled an app due to poor performance. Design experts advocate for the following design principles to create successful and effective mobile apps:

Clutter-free screens: Keeps interactions quick and simple, allowing users to focus on one specific task rather than being overwhelmed with multiple features and tasks. Design experts strongly advocate for one task per screen and recommend breaking down long forms into pages and progressively revealing new tasks or fields to minimize clutter.

Reduce cognitive load: Makes user journey through the app seamless and preserves natural flow through the app. Design experts suggest incorporating autocomplete , spell-check , prediction text assistance , and dropdown menus to reduce cognitive load. Design experts also recommend the state of the app be preserved when users temporarily leave the app and re-enter so that users can continue their journey from where they have left off.

Simple navigation: Around 11% of people have uninstalled apps due to their complicated interface . Design experts state it is paramount to present the navigation bar visibly in your app to help users navigate to frequently used and high-priority screens instantly. They suggest the use of recognizable icons specific to the device operating system to help users easily take actions such as opening a menu, changing settings, going back a screen, and searching within a page. According to them, a user should not be confused while navigating the app, so an orderly, clear, and logical navigation flow drives engagement and discovery in the app.

Notifications: It’s reported that around 19% of users uninstall an app due to frequent push notifications. Notifications should be sent with careful planning according to design experts. Experts state notifications should be sent at a time most convenient to users in their time zone and the messages should be personalized to bring great value to them.

Speed Appearance: About 19% of people uninstall apps due to hang up issues. Design experts state it’s important to make sure the app is fast and responsive so that users don’t have to wait for content. They state developers should deliver content faster or give the perception of progress. Some approaches suggested by the experts are the use of skeleton screens which show the layout of the app with content grayed out, progress bars or loading spinners, tasks being carried out in the background and delivering the content quickly when the user requests for it, or giving users some tasks or content while they are waiting for a page to load.

Usability: Approximately 85% of mobile users use their phone with one hand, thus design experts state it is important that the top-level menu, frequently used controls, and common action items are within the reach of the user’s thumb. They also stress the importance of readability and it’s recommended that the text size is at least 11 point font so that users can read it at the typical reading distance without zooming in. It is recommended that headers and titles on the app screens be San Francisco 17pt and Roboto 16sp for iOS and Android OS respectively. The experts also state there should be 4.5:1 minimum contrast ratio between text and the background color. Design experts strongly encourage developers to make apps accessible for all users including people with disabilities , so they suggest features such as voice navigation , screen reader compatibility, and user interface adaptability in mobile apps.

Many patent applications are pending for new mobile phone apps. Most of these are in the technological fields of business methods, database management, data transfer, and operator interface.