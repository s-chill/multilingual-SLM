Devised by Niklaus Wirth in the late 1960s and early 1970s, Pascal is a programming language . Originally produced by Borland Software Corporation, Embarcadero Delphi is composed of an IDE, set of standard libraries, and a Pascal-based language commonly called either Object Pascal , Delphi Pascal, or simply 'Delphi' (Embarcadero's current documentation refers to it as 'the Delphi language (Object Pascal)' ). Since first released, it has become the most popular commercial Pascal implementation.

While developing Pascal, Wirth employed a bootstrapping procedure in which each newer version of the Pascal compiler was written and compiled with its predecessor. Thus, the 'P2' compiler was written in the dialect compilable by 'P1', 'P3' in turn was written in 'P2' and so on, all the way till 'P5'. The 'P5' compiler implemented Pascal in its final state as defined by Wirth, and subsequently became standardised as 'ISO 7185 Pascal'.

The Borland dialect, like the popular UCSD Pascal before it, took the 'P4' version of the language as its basis, rather than Wirth's final revision. After much evolution independent of Standard Pascal, the Borland variant became the basis for Delphi. This page goes over the differences between Delphi and Standard Pascal. It does not go into Delphi-specific extensions to the language, which are numerous and still increasing.

Following features are mutually exclusive.
The Standard Pascal implementation is not accepted by Delphi and vice versa, the Delphi code is not acceptable in Standard Pascal.

Standard Pascal has a Euclidean-like definition of the mod operator whereas Delphi uses a truncated definition.

Standard Pascal requires that the comment delimiters { and the bigramm ( * , as well as } and * ) are synonymous to each other. In Delphi, however, a block comment started by { must be closed with a } . The bigramm * ) will only close any comment that started with ( * . This scheme allows for nested comments at the expense of compiler complexity.

The way procedures and functions can be passed as parameters differs:
Delphi requires explicit procedural types to be declared where Standard Pascal does not.

Various computer systems show a wide variety how to indicate a newline .
This affects the internal representation of text files which are composed of a series of “lines”.
In order to relieve the programmer from any associated headaches, Standard Pascal mandates that reading an “end-of-line character” returns a single space character.
To distinguish such an “end-of-line” space character from a space character that is actually genuine payload of the line, EOLn becomes true .

Delphi does not show this behavior.
Reading a newline will return whatever character sequence represents a newline on the current host system, for example two char values chr ( 13 ) (carriage return) plus chr ( 10 ) (line feed).

Following features are present or missing in either language.

Standard Pascal permits a goto to any label defined in scope.
In Delphi a goto must be within the current routine, i. e. may not leave the begin … end -frame.

Delphi does not support buffer variables and associated standard routines get and put .

In Standard Pascal allocating memory for a variant record may indicate a specific variant.
This allows implementations to allocate the least amount of really necessary memory.
Delphi does not support this.

In Delphi any file must be backed by a file in the file system.
That means any file needs to be associated with a file name with Delphi's assign procedure.
In contrast, Standard Pascal is usable without file names.
The following will produce a run-time error with Delphi.

Delphi does not implement the standard procedures pack and unpack . Regardless, transferring data between packed and unpacked data types is an easy feat, although the implementation might not be as efficient as a compiler vendor supplied implementation would be.

Delphi does not associate the data type Boolean with a default width if specified as write / writeLn parameters. Delphi demonstrates the behavior as usual for character-strings.

Delphi permits overloading routines.
In Standard Pascal identifiers must be unique in every block.

Delphi permits default parameters .

In Pascal, if the destination file is a text file, the parameters to write / writeLn have an implemention-defined default total width.
In Delphi, for integer values this is simply 1 .
That means always the least amount of space is occupied. Other compilers have shown default widths of, for example, 20 allowing for a fine tabular look at no cost of extra code.