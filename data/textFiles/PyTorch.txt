PyTorch is a machine learning library based on the Torch library, used for applications such as computer vision and natural language processing , originally developed by Meta AI and now part of the Linux Foundation umbrella. It is one of the two most popular deep learning libraries alongside TensorFlow , offering free and open-source software released under the modified BSD license . Although the Python interface is more polished and the primary focus of development, PyTorch also has a C++ interface.

A number of pieces of deep learning software are built on top of PyTorch, including Tesla Autopilot , Uber 's Pyro, Hugging Face 's Transformers, PyTorch Lightning , and Catalyst.

PyTorch provides two high-level features:

Meta (formerly known as Facebook) operates both PyTorch and Convolutional Architecture for Fast Feature Embedding ( Caffe2 ), but models defined by the two frameworks were mutually incompatible. The Open Neural Network Exchange ( ONNX ) project was created by Meta and Microsoft in September 2017 for converting models between frameworks. Caffe2 was merged into PyTorch at the end of March 2018. In September 2022, Meta announced that PyTorch would be governed by the independent PyTorch Foundation, a newly created subsidiary of the Linux Foundation .

PyTorch 2.0 was released on 15 March 2023.

PyTorch defines a class called Tensor ( torch.Tensor ) to store and operate on homogeneous multidimensional rectangular arrays of numbers. PyTorch Tensors are similar to NumPy Arrays, but can also be operated on a CUDA -capable NVIDIA GPU. PyTorch has also been developing support for other GPU platforms, for example, AMD's ROCm and Apple's Metal Framework.

PyTorch supports various sub-types of Tensors.

Note that the term "tensor" here does not carry the same meaning as tensor in mathematics or physics. The meaning of the word in machine learning is only superficially related to its original meaning as a certain kind of object in linear algebra . Tensors in PyTorch are simply multi-dimensional arrays.

PyTorch defines a module called nn ( torch.nn ) to describe neural networks and to support training. This module offers a comprehensive collection of building blocks for neural networks, including various layers and activation functions, enabling the construction of complex models. Networks are built by inheriting from the torch.nn module and defining the sequence of operations in the forward() function.

The following program shows the low-level functionality of the library with a simple example

The following code-block shows an example of the higher level functionality provided nn module. A neural network with linear layers is defined in the example.